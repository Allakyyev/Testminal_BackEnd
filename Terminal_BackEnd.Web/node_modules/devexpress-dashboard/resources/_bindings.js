/**
* DevExpress Dashboard (_bindings.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { addToBindingsCache } from '@devexpress/analytics-core/analytics-widgets-internal';
addToBindingsCache('dx-ko-resizable: { getWidgetContainer: $root.getWidgetContainer, layoutItem: $data }, visible: visible', function ($context, $element) { return { 'dx-ko-resizable': function () { return { 'getWidgetContainer': $context.$root.getWidgetContainer, 'layoutItem': $context.$data }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('style: { width: containerWidth() + \'px\', height: containerHeight() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'width': $context.$data.containerWidth() + 'px', 'height': $context.$data.containerHeight() + 'px' }; } }; });
addToBindingsCache('dxclick: coverClickHandler, css: itemStyle', function ($context, $element) { return { 'dxclick': function () { return $context.$data.coverClickHandler; }, 'css': function () { return $context.$data.itemStyle; } }; });
addToBindingsCache('visible: isSelected', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected; } }; });
addToBindingsCache('css: itemStyle', function ($context, $element) { return { 'css': function () { return $context.$data.itemStyle; } }; });
addToBindingsCache('layoutItem: $data', function ($context, $element) { return { 'layoutItem': function () { return $context.$data; } }; });
addToBindingsCache('with: layoutItem', function ($context, $element) { return { 'with': function () { return $context.$data.layoutItem; } }; });
addToBindingsCache('if: viewModel.hasItem()', function ($context, $element) { return { 'if': function () { return $context.$data.viewModel.hasItem(); } }; });
addToBindingsCache('template: viewModel.template || \'dx-layout-item-container\'', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.template || 'dx-layout-item-container'; } }; });
addToBindingsCache('ifnot: viewModel.hasItem()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.viewModel.hasItem(); } }; });
addToBindingsCache('template: \'dx-layout-group-container\'', function ($context, $element) { return { 'template': function () { return 'dx-layout-group-container'; } }; });
addToBindingsCache('if: isDesignMode', function ($context, $element) { return { 'if': function () { return $context.$data.isDesignMode; } }; });
addToBindingsCache('if: viewModel.orientation() === \'Horizontal\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewModel.orientation() === 'Horizontal'; } }; });
addToBindingsCache('foreach: items', function ($context, $element) { return { 'foreach': function () { return $context.$data.items; } }; });
addToBindingsCache('if: viewModel.orientation() === \'Vertical\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewModel.orientation() === 'Vertical'; } }; });
addToBindingsCache('if: items().length === 0 && !!$data.getPlaceholder', function ($context, $element) { return { 'if': function () { return $context.$data.items().length === 0 && !!$context.$data.getPlaceholder; } }; });
addToBindingsCache('with: $data.getPlaceholder()', function ($context, $element) { return { 'with': function () { return $context.$data.getPlaceholder(); } }; });
addToBindingsCache('template: viewModel.template', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.template; } }; });
addToBindingsCache('foreach: $data', function ($context, $element) { return { 'foreach': function () { return $context.$data; } }; });
addToBindingsCache('template: $data', function ($context, $element) { return { 'template': function () { return $context.$data; } }; });
addToBindingsCache('if: $parent.isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$parent.isDesignMode(); } }; });
addToBindingsCache('if: !dragOverLocation()', function ($context, $element) { return { 'if': function () { return !$context.$data.dragOverLocation(); } }; });
addToBindingsCache('template: getLayoutItemPlaceholder()', function ($context, $element) { return { 'template': function () { return $context.$data.getLayoutItemPlaceholder(); } }; });
addToBindingsCache('dx-dashboard-layout-group-binding: { dashboardContext: $data.getContext(), localContext: $data.getLocalContext(), sizeController: $data.sizeController, dashboardItem: $data.viewModel.model.item, headerHeight: $parent.headerHeight }', function ($context, $element) { return { 'dx-dashboard-layout-group-binding': function () { return { 'dashboardContext': $context.$data.getContext(), 'localContext': $context.$data.getLocalContext(), 'sizeController': $context.$data.sizeController, 'dashboardItem': $context.$data.viewModel.model.item, 'headerHeight': $context.$parent.headerHeight }; } }; });
addToBindingsCache('dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle', function ($context, $element) { return { 'dxclick': function () { return $context.$data.coverClickHandler; }, 'event': function () { return { 'mouseover': $context.$data.coverMouseOverHandler }; }, 'css': function () { return $context.$data.itemStyle; } }; });
addToBindingsCache('style: { top: $parent.headerHeight() + \'px\', padding: $parent.padding() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'top': $context.$parent.headerHeight() + 'px', 'padding': $context.$parent.padding() + 'px' }; } }; });
addToBindingsCache('if: items().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.items().length !== 0; } }; });
addToBindingsCache('if: items().length === 0 && isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$data.items().length === 0 && $context.$data.isDesignMode(); } }; });
addToBindingsCache('if: isSelected', function ($context, $element) { return { 'if': function () { return $context.$data.isSelected; } }; });
addToBindingsCache('template: getContextMenu()', function ($context, $element) { return { 'template': function () { return $context.$data.getContextMenu(); } }; });
addToBindingsCache('template: { name: \'dx-dashboard-item-plate\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-item-plate' }; } }; });
addToBindingsCache('dxTabs: { items: tabPageBindings, itemTemplate: \'dx-dasbhoard-layout-tab-item\', selectionMode: \'single\', keyExpr: \'id\', selectedItemKeys: selectedItemKeys, onSelectionChanged: onSelectionChanged, hoverStateEnabled: true, scrollingEnabled: false, focusStateEnabled: false}', function ($context, $element) { return { 'dxTabs': function () { return { 'items': $context.$data.tabPageBindings, 'itemTemplate': 'dx-dasbhoard-layout-tab-item', 'selectionMode': 'single', 'keyExpr': 'id', 'selectedItemKeys': $context.$data.selectedItemKeys, 'onSelectionChanged': $context.$data.onSelectionChanged, 'hoverStateEnabled': true, 'scrollingEnabled': false, 'focusStateEnabled': false }; } }; });
addToBindingsCache('dx-dashboard-layout-tab-binding: { dashboardItem: $data.dashboardItem, dashboardContext: $data.context, localContext: $data.localContext, sizeController: $data.sizeController, ignoreBorder: $data.ignoreBorder }', function ($context, $element) { return { 'dx-dashboard-layout-tab-binding': function () { return { 'dashboardItem': $context.$data.dashboardItem, 'dashboardContext': $context.$data.context, 'localContext': $context.$data.localContext, 'sizeController': $context.$data.sizeController, 'ignoreBorder': $context.$data.ignoreBorder }; } }; });
addToBindingsCache('click: toggleMenu', function ($context, $element) { return { 'click': function () { return $context.$data.toggleMenu; } }; });
addToBindingsCache('click: createTabPage', function ($context, $element) { return { 'click': function () { return $context.$data.createTabPage; } }; });
addToBindingsCache('layoutItem: $data, headerHeight: $parent.headerHeight', function ($context, $element) { return { 'layoutItem': function () { return $context.$data; }, 'headerHeight': function () { return $context.$parent.headerHeight; } }; });
addToBindingsCache('if: $parent.activeItems().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems().length !== 0; } }; });
addToBindingsCache('if: $parent.activeItems()[0].items().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems()[0].items().length !== 0; } }; });
addToBindingsCache('if: $parent.activeItems()[0].items().length === 0 && isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems()[0].items().length === 0 && $context.$data.isDesignMode(); } }; });
addToBindingsCache('with:  $parent.activeItems()[0].getPlaceholder()', function ($context, $element) { return { 'with': function () { return $context.$parent.activeItems()[0].getPlaceholder(); } }; });
addToBindingsCache('if: $parent.activeItems().length === 0 && isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$parent.activeItems().length === 0 && $context.$data.isDesignMode(); } }; });
addToBindingsCache('if: showMenu()', function ($context, $element) { return { 'if': function () { return $context.$data.showMenu(); } }; });
addToBindingsCache('if: showAddButton()', function ($context, $element) { return { 'if': function () { return $context.$data.showAddButton(); } }; });
addToBindingsCache('dxTemplate:{ name:\'dx-dasbhoard-layout-tab-item\' }', function () { return { dxTemplate: { name: 'dx-dasbhoard-layout-tab-item' } }; });
addToBindingsCache('css: cssClasses', function ($context, $element) { return { 'css': function () { return $context.$data.cssClasses; } }; });
addToBindingsCache('style: title.containerStyles', function ($context, $element) { return { 'style': function () { return $context.$data.title.containerStyles; } }; });
addToBindingsCache('style: title.styles', function ($context, $element) { return { 'style': function () { return $context.$data.title.styles; } }; });
addToBindingsCache('dxScrollView: scrollView.options, style: scrollView.styles', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.scrollView.options; }, 'style': function () { return $context.$data.scrollView.styles; } }; });
addToBindingsCache('style: scrollView.contentWrapperStyles, dx-dashboard-element-accessor: layoutMainElementEvents', function ($context, $element) { return { 'style': function () { return $context.$data.scrollView.contentWrapperStyles; }, 'dx-dashboard-element-accessor': function () { return $context.$data.layoutMainElementEvents; } }; });
addToBindingsCache('css: { \'dx-state-underlying-selection\': $data.areChildrenSelected() }', function ($context, $element) { return { 'css': function () { return { 'dx-state-underlying-selection': $context.$data.areChildrenSelected() }; } }; });
addToBindingsCache('style: fullscreenItem.styles', function ($context, $element) { return { 'style': function () { return $context.$data.fullscreenItem.styles; } }; });
addToBindingsCache('dx-dashboard-item-binding: { dashboardItem: fullscreenItemModel.viewModel().dashboardItem, dashboardContext: fullscreenItemModel.viewModel().dashboardContext, localContext:  fullscreenItemModel.viewModel().localContext, sizeController: fullscreenItemModel.viewModel().getSizeController($element) }', function ($context, $element) { return { 'dx-dashboard-item-binding': function () { return { 'dashboardItem': $context.$data.fullscreenItemModel.viewModel().dashboardItem, 'dashboardContext': $context.$data.fullscreenItemModel.viewModel().dashboardContext, 'localContext': $context.$data.fullscreenItemModel.viewModel().localContext, 'sizeController': $context.$data.fullscreenItemModel.viewModel().getSizeController($element) }; } }; });
addToBindingsCache('componentArgs: componentArgs', function ($context, $element) { return { 'componentArgs': function () { return $context.$data.componentArgs; } }; });
addToBindingsCache('componentArgs: title.componentArgs', function ($context, $element) { return { 'componentArgs': function () { return $context.$data.title.componentArgs; } }; });
addToBindingsCache('if: componentArgs', function ($context, $element) { return { 'if': function () { return $context.$data.componentArgs; } }; });
addToBindingsCache('if: title.showTitle()', function ($context, $element) { return { 'if': function () { return $context.$data.title.showTitle(); } }; });
addToBindingsCache('with: layout', function ($context, $element) { return { 'with': function () { return $context.$data.layout; } }; });
addToBindingsCache('if: fullscreenItemModel.visible()', function ($context, $element) { return { 'if': function () { return $context.$data.fullscreenItemModel.visible(); } }; });
addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'left top\', at: \'left top\', collision: \'flipfit\', boundaryOffset: \'0, 0\', boundary: $root.getWidgetContainer(), of:  $root.getWidgetContainer(), offset: \'0, 0\' }, animation: enableAnimation () ? { show: { type: \'slide\', from: { left: panelWidth() * -1 }, to: { left: 0 }, duration: 500 }, hide: { type: \'slide\', from: { left: 0 }, to: { left: panelWidth() * -1 }, duration: 500 } } : null, focusStateEnabled: false, showCloseButton: isMobile, dragEnabled: false, width: panelWidth, height: \'100%\', shading: false, toolbarItems: [{ text: $root.getLocalizationById(\'DashboardWebStringId.Dashboards\'), location: \'before\', toolbar: \'top\', }], hideOnOutsideClick: false, onInitialized: onPopupInitialized, onDisposing: onPopupDisposing, onContentReady: function() { enableAnimation(true) }, visible: visible, wrapperAttr: { class: isMobile() ? \'dx-dashboard-card-view-panel dx-dashboard-panel-extension dx-dashboard-typography\' : \'dx-dashboard-panel-extension dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'left top', 'at': 'left top', 'collision': 'flipfit', 'boundaryOffset': '0, 0', 'boundary': $context.$root.getWidgetContainer(), 'of': $context.$root.getWidgetContainer(), 'offset': '0, 0' }, 'animation': $context.$data.enableAnimation() ? { 'show': { 'type': 'slide', 'from': { 'left': $context.$data.panelWidth() * -1 }, 'to': { 'left': 0 }, 'duration': 500 }, 'hide': { 'type': 'slide', 'from': { 'left': 0 }, 'to': { 'left': $context.$data.panelWidth() * -1 }, 'duration': 500 } } : null, 'focusStateEnabled': false, 'showCloseButton': $context.$data.isMobile, 'dragEnabled': false, 'width': $context.$data.panelWidth, 'height': '100%', 'shading': false, 'toolbarItems': [{ 'text': $context.$root.getLocalizationById('DashboardWebStringId.Dashboards'), 'location': 'before', 'toolbar': 'top' }], 'hideOnOutsideClick': false, 'onInitialized': $context.$data.onPopupInitialized, 'onDisposing': $context.$data.onPopupDisposing, 'onContentReady': function () { $context.$data.enableAnimation(true); }, 'visible': $context.$data.visible, 'wrapperAttr': { 'class': $context.$data.isMobile() ? 'dx-dashboard-card-view-panel dx-dashboard-panel-extension dx-dashboard-typography' : 'dx-dashboard-panel-extension dx-dashboard-typography' } }; } }; });
addToBindingsCache('dxList: listOptions, css: { \'dx-dashboard-dashboard-list-full\': !allowSwitchToDesigner(), \'dx-dashboard-dashboard-list-clipped\': allowSwitchToDesigner() }', function ($context, $element) { return { 'dxList': function () { return $context.$data.listOptions; }, 'css': function () { return { 'dx-dashboard-dashboard-list-full': !$context.$data.allowSwitchToDesigner(), 'dx-dashboard-dashboard-list-clipped': $context.$data.allowSwitchToDesigner() }; } }; });
addToBindingsCache('text: name', function ($context, $element) { return { 'text': function () { return $context.$data.name; } }; });
addToBindingsCache('css: { \'dx-dashboard-minimized\': hidden }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-minimized': $context.$data.hidden }; } }; });
addToBindingsCache('css: { \'dx-dashboard-hidden\': hidden }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-hidden': $context.$data.hidden }; } }; });
addToBindingsCache('attr: { src: imageUrl, alt: name }, event: { error: hide }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.imageUrl, 'alt': $context.$data.name }; }, 'event': function () { return { 'error': $context.$data.hide }; } }; });
addToBindingsCache('dxButton: { onClick: switchToDesigner, type: \'default\', template: \'template\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.switchToDesigner, 'type': 'default', 'template': 'template' }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.EditInDesigner\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.EditInDesigner'); } }; });
addToBindingsCache('dxButton: { onClick: click, type: \'default\', text: $root.getLocalizationById(\'DashboardWebStringId.Viewer\') }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.click, 'type': 'default', 'text': $context.$root.getLocalizationById('DashboardWebStringId.Viewer') }; } }; });
addToBindingsCache('if: allowSwitchToDesigner', function ($context, $element) { return { 'if': function () { return $context.$data.allowSwitchToDesigner; } }; });
addToBindingsCache('template: \'dx-dashboard-edit-in-designer-button\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-edit-in-designer-button'; } }; });
addToBindingsCache('template: \'dx-dashboard-edit-in-designer-button-icon\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-edit-in-designer-button-icon'; } }; });
addToBindingsCache('dxTemplate:{ name: \'dashboard-card-view\' }', function () { return { dxTemplate: { name: 'dashboard-card-view' } }; });
addToBindingsCache('dxTemplate:{ name: \'dashboard-preview\' }', function () { return { dxTemplate: { name: 'dashboard-preview' } }; });
addToBindingsCache('dxTemplate:{ name: \'dashboard-list-item\' }', function () { return { dxTemplate: { name: 'dashboard-list-item' } }; });
addToBindingsCache('dxTemplate: { name: \'template\' }', function () { return { dxTemplate: { name: 'template' } }; });
addToBindingsCache('dxPopup: _getPopupOptions()', function ($context, $element) { return { 'dxPopup': function () { return $context.$data._getPopupOptions(); } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.InspectedData\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.InspectedData'); } }; });
addToBindingsCache('dxRadioGroup: { layout: \'horizontal\', displayExpr: \'text\', valueExpr: \'value\', dataSource: avaliableInspectedDataType, value: inspectedDataType }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'layout': 'horizontal', 'displayExpr': 'text', 'valueExpr': 'value', 'dataSource': $context.$data.avaliableInspectedDataType, 'value': $context.$data.inspectedDataType }; } }; });
addToBindingsCache('dxDataGrid: $data', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data; } }; });
addToBindingsCache('if: allowSwitchInspectedDataType', function ($context, $element) { return { 'if': function () { return $context.$data.allowSwitchInspectedDataType; } }; });
addToBindingsCache('with: gridOptions', function ($context, $element) { return { 'with': function () { return $context.$data.gridOptions; } }; });
addToBindingsCache('dxList: layoutViewModel, style: { top: titleViewModel.height() + \'px\' }', function ($context, $element) { return { 'dxList': function () { return $context.$data.layoutViewModel; }, 'style': function () { return { 'top': $context.$data.titleViewModel.height() + 'px' }; } }; });
addToBindingsCache('componentArgs: { options: options, width: width, height: height, encodeHtml: encodeHtml, className: className }', function ($context, $element) { return { 'componentArgs': function () { return { 'options': $context.$data.options, 'width': $context.$data.width, 'height': $context.$data.height, 'encodeHtml': $context.$data.encodeHtml, 'className': $context.$data.className }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-mobile-title\', data: titleViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-mobile-title', 'data': $context.$data.titleViewModel }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-mobile-fullscreen-item\', data: fullscreenItemViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-mobile-fullscreen-item', 'data': $context.$data.fullscreenItemViewModel }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-mobile-item-master-filters\', data: itemMasterFiltersViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-mobile-item-master-filters', 'data': $context.$data.itemMasterFiltersViewModel }; } }; });
addToBindingsCache('dxTemplate:{ name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('dxOverlay: { shading: false, width: width, height: height, deferRendering: true, visible: visible, animation: { show: { type: \'slide\', duration: 400, from: { position: { my: \'left\', at: \'right\', of: window } }, to: { position: { my: \'center\', at: \'center\', of: window } } }, hide: { type: \'slide\', duration: 400, from: { position: { my: \'center\', at: \'center\', of: window } }, to: { position: { my: \'left\', at: \'right\', of: window } } } }, onInitialized: onInitialized, onDisposing: onDisposing, wrapperAttr: { class: \'dx-dashboard-fullscreen-item-popup\' }, position: { my: \'left top\', at: \'left top\' } }', function ($context, $element) { return { 'dxOverlay': function () { return { 'shading': false, 'width': $context.$data.width, 'height': $context.$data.height, 'deferRendering': true, 'visible': $context.$data.visible, 'animation': { 'show': { 'type': 'slide', 'duration': 400, 'from': { 'position': { 'my': 'left', 'at': 'right', 'of': window } }, 'to': { 'position': { 'my': 'center', 'at': 'center', 'of': window } } }, 'hide': { 'type': 'slide', 'duration': 400, 'from': { 'position': { 'my': 'center', 'at': 'center', 'of': window } }, 'to': { 'position': { 'my': 'left', 'at': 'right', 'of': window } } } }, 'onInitialized': $context.$data.onInitialized, 'onDisposing': $context.$data.onDisposing, 'wrapperAttr': { 'class': 'dx-dashboard-fullscreen-item-popup' }, 'position': { 'my': 'left top', 'at': 'left top' } }; } }; });
addToBindingsCache('dashboardItem: dashboardItem, dashboardContext: dashboardContext, localContext: localContext, repaintRequest: repaintRequest,', function ($context, $element) { return { 'dashboardItem': function () { return $context.$data.dashboardItem; }, 'dashboardContext': function () { return $context.$data.dashboardContext; }, 'localContext': function () { return $context.$data.localContext; }, 'repaintRequest': function () { return $context.$data.repaintRequest; }, '': function () { return undefined; } }; });
addToBindingsCache('if: visible', function ($context, $element) { return { 'if': function () { return $context.$data.visible; } }; });
addToBindingsCache('with: itemViewModel', function ($context, $element) { return { 'with': function () { return $context.$data.itemViewModel; } }; });
addToBindingsCache('css: { \'dx-dashboard-mobile-layout-maximize-icon-selected\': isReadyForAction() }, style: { \'opacity\': maximizeIconOpacity()  }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-mobile-layout-maximize-icon-selected': $context.$data.isReadyForAction() }; }, 'style': function () { return { 'opacity': $context.$data.maximizeIconOpacity() }; } }; });
addToBindingsCache('style: { \'transform\': \'translateX(\' + itemOffsetInPixels() + \'px)\'  }', function ($context, $element) { return { 'style': function () { return { 'transform': 'translateX(' + $context.$data.itemOffsetInPixels() + 'px)' }; } }; });
addToBindingsCache('dxclick: click, dxpointerdown: selectItem, dxpointerup: unselectItem, dxpointermove: unselectItem', function ($context, $element) { return { 'dxclick': function () { return $context.$data.click; }, 'dxpointerdown': function () { return $context.$data.selectItem; }, 'dxpointerup': function () { return $context.$data.unselectItem; }, 'dxpointermove': function () { return $context.$data.unselectItem; } }; });
addToBindingsCache('dxOverlay: { height: masterFiltersPopup.height, width: masterFiltersPopup.width, hideOnOutsideClick: true, visible: masterFiltersPopup.visible, onHiding: function() { closeMasterFiltersPopup() }, position: { my: \'bottom\', at: \'bottom\', of: window } , animation: { show: { type: \'slide\', duration: 250, from: { position: { my: \'top\', at: \'bottom\', of: window } } }, hide: { type: \'slide\', duration: 250, to: { position: { my: \'top\', at: \'bottom\', of: window } } } }, onInitialized: masterFiltersPopup.onInitialized, onDisposing: masterFiltersPopup.onDisposing, wrapperAttr: { class: \'dx-dashboard-master-filters-popup\' } }', function ($context, $element) { return { 'dxOverlay': function () { return { 'height': $context.$data.masterFiltersPopup.height, 'width': $context.$data.masterFiltersPopup.width, 'hideOnOutsideClick': true, 'visible': $context.$data.masterFiltersPopup.visible, 'onHiding': function () { $context.$data.closeMasterFiltersPopup(); }, 'position': { 'my': 'bottom', 'at': 'bottom', 'of': window }, 'animation': { 'show': { 'type': 'slide', 'duration': 250, 'from': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } }, 'hide': { 'type': 'slide', 'duration': 250, 'to': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } } }, 'onInitialized': $context.$data.masterFiltersPopup.onInitialized, 'onDisposing': $context.$data.masterFiltersPopup.onDisposing, 'wrapperAttr': { 'class': 'dx-dashboard-master-filters-popup' } }; } }; });
addToBindingsCache('style: { flex: maximizeFiltersPopup() ? 0 : 1 }, dxclick: function() { closeMasterFiltersPopup() }', function ($context, $element) { return { 'style': function () { return { 'flex': $context.$data.maximizeFiltersPopup() ? 0 : 1 }; }, 'dxclick': function () { return function () { $context.$data.closeMasterFiltersPopup(); }; } }; });
addToBindingsCache('style: { flex: maximizeFiltersPopup() ? 1 : 0 }', function ($context, $element) { return { 'style': function () { return { 'flex': $context.$data.maximizeFiltersPopup() ? 1 : 0 }; } }; });
addToBindingsCache('dxclick: click', function ($context, $element) { return { 'dxclick': function () { return $context.$data.click; } }; });
addToBindingsCache('text: valuesString', function ($context, $element) { return { 'text': function () { return $context.$data.valuesString; } }; });
addToBindingsCache('dxButton: { text:  $root.getLocalizationById(\'DashboardStringId.ButtonOK\'), onClick: closeMasterFiltersPopup, type: \'default\' }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalizationById('DashboardStringId.ButtonOK'), 'onClick': $context.$data.closeMasterFiltersPopup, 'type': 'default' }; } }; });
addToBindingsCache('dxOverlay: { height: masterFilterMaximizedItemPopup.height, width: masterFilterMaximizedItemPopup.width, hideOnOutsideClick: true, onHiding: function() { closeMasterFilterItemPopup() }, visible: masterFilterMaximizedItemPopup.visible, position: { my: \'bottom\', at: \'bottom\', of: window } , animation: { show: { type: \'slide\', duration: 250, from: { position: { my: \'top\', at: \'bottom\', of: window } } }, hide: { type: \'slide\', duration: 250, to: { position: { my: \'top\', at: \'bottom\', of: window } } } }, onInitialized: masterFilterMaximizedItemPopup.onInitialized, onDisposing: masterFilterMaximizedItemPopup.onDisposing, wrapperAttr: { class: \'dx-dashboard-master-filters-popup\' } }', function ($context, $element) { return { 'dxOverlay': function () { return { 'height': $context.$data.masterFilterMaximizedItemPopup.height, 'width': $context.$data.masterFilterMaximizedItemPopup.width, 'hideOnOutsideClick': true, 'onHiding': function () { $context.$data.closeMasterFilterItemPopup(); }, 'visible': $context.$data.masterFilterMaximizedItemPopup.visible, 'position': { 'my': 'bottom', 'at': 'bottom', 'of': window }, 'animation': { 'show': { 'type': 'slide', 'duration': 250, 'from': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } }, 'hide': { 'type': 'slide', 'duration': 250, 'to': { 'position': { 'my': 'top', 'at': 'bottom', 'of': window } } } }, 'onInitialized': $context.$data.masterFilterMaximizedItemPopup.onInitialized, 'onDisposing': $context.$data.masterFilterMaximizedItemPopup.onDisposing, 'wrapperAttr': { 'class': 'dx-dashboard-master-filters-popup' } }; } }; });
addToBindingsCache('dxButton: { text: $root.getLocalizationById(\'DashboardStringId.ButtonOK\'), onClick: closeMasterFilterItemPopup, type: \'default\' }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalizationById('DashboardStringId.ButtonOK'), 'onClick': $context.$data.closeMasterFilterItemPopup, 'type': 'default' }; } }; });
addToBindingsCache('foreach: masterItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.masterItems; } }; });
addToBindingsCache('foreach: filterValues', function ($context, $element) { return { 'foreach': function () { return $context.$data.filterValues; } }; });
addToBindingsCache('with: masterFilterItem', function ($context, $element) { return { 'with': function () { return $context.$data.masterFilterItem; } }; });
addToBindingsCache('dxToast: { type: \'custom\', visible: visible() && !suspended(), width: \'auto\', target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'bottom right\', at: \'bottom right\', offset: \'0 0\', boundary: $root.getWidgetContainer(), of: $root.getWidgetContainer() }, displayTime: displayTime, closeOnClick: true, onHidden: onHidden, closeOnSwipe: false, onInitialized: onInitialized }', function ($context, $element) { return { 'dxToast': function () { return { 'type': 'custom', 'visible': $context.$data.visible() && !$context.$data.suspended(), 'width': 'auto', 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'bottom right', 'at': 'bottom right', 'offset': '0 0', 'boundary': $context.$root.getWidgetContainer(), 'of': $context.$root.getWidgetContainer() }, 'displayTime': $context.$data.displayTime, 'closeOnClick': true, 'onHidden': $context.$data.onHidden, 'closeOnSwipe': false, 'onInitialized': $context.$data.onInitialized }; } }; });
addToBindingsCache('foreach: notifications, css: {  \'dx-dashboard-error\': type() === \'error\', \'dx-dashboard-success\': type() === \'success\', \'dx-dashboard-info\': type() === \'info\'}', function ($context, $element) { return { 'foreach': function () { return $context.$data.notifications; }, 'css': function () { return { 'dx-dashboard-error': $context.$data.type() === 'error', 'dx-dashboard-success': $context.$data.type() === 'success', 'dx-dashboard-info': $context.$data.type() === 'info' }; } }; });
addToBindingsCache('text: title', function ($context, $element) { return { 'text': function () { return $context.$data.title; } }; });
addToBindingsCache('text: detail', function ($context, $element) { return { 'text': function () { return $context.$data.detail; } }; });
addToBindingsCache('if: detail !== null', function ($context, $element) { return { 'if': function () { return $context.$data.detail !== null; } }; });
addToBindingsCache('dx-dashboard-item-binding: { dashboardItem: $data.viewModel.model.item, dashboardContext: $data.getContext(), localContext: $data.getLocalContext(), sizeController: $data.sizeController }, css: { \'dx-layout-item-selected\': isSelected }', function ($context, $element) { return { 'dx-dashboard-item-binding': function () { return { 'dashboardItem': $context.$data.viewModel.model.item, 'dashboardContext': $context.$data.getContext(), 'localContext': $context.$data.getLocalContext(), 'sizeController': $context.$data.sizeController }; }, 'css': function () { return { 'dx-layout-item-selected': $context.$data.isSelected }; } }; });
addToBindingsCache('text:$root.getLocalizationById(\'DashboardStringId.MessageLoading\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.MessageLoading'); } }; });
addToBindingsCache('class: sizeClass', function ($context, $element) { return { 'class': function () { return $context.$data.sizeClass; } }; });
addToBindingsCache('xlinkHref: icon', function ($context, $element) { return { 'xlinkHref': function () { return $context.$data.icon; } }; });
addToBindingsCache('text: errorState() && errorState().title', function ($context, $element) { return { 'text': function () { return $context.$data.errorState() && $context.$data.errorState().title; } }; });
addToBindingsCache('text: errorState() && errorState().detail', function ($context, $element) { return { 'text': function () { return $context.$data.errorState() && $context.$data.errorState().detail; } }; });
addToBindingsCache('css: {\'dx-dashboard-widget-container\': isStandalone, \'dx-dashboard-typography\': isStandalone  }, dx-dashboard-item-binding: { dashboardItem: $data.dashboardItem, dashboardContext: $data.dashboardContext, localContext: $data.localContext, sizeController: $data.sizeController }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-widget-container': $context.$data.isStandalone, 'dx-dashboard-typography': $context.$data.isStandalone }; }, 'dx-dashboard-item-binding': function () { return { 'dashboardItem': $context.$data.dashboardItem, 'dashboardContext': $context.$data.dashboardContext, 'localContext': $context.$data.localContext, 'sizeController': $context.$data.sizeController }; } }; });
addToBindingsCache('if: $data', function ($context, $element) { return { 'if': function () { return $context.$data; } }; });
addToBindingsCache('if: $parent.getEmptyItemTemplates', function ($context, $element) { return { 'if': function () { return $context.$parent.getEmptyItemTemplates; } }; });
addToBindingsCache('template: $parent.getEmptyItemTemplates()', function ($context, $element) { return { 'template': function () { return $context.$parent.getEmptyItemTemplates(); } }; });
addToBindingsCache('css: colorSchemeCss', function ($context, $element) { return { 'css': function () { return $context.$data.colorSchemeCss; } }; });
addToBindingsCache('style: { left: surfaceLeft() + \'px\' }, css: $data.classList()', function ($context, $element) { return { 'style': function () { return { 'left': $context.$data.surfaceLeft() + 'px' }; }, 'css': function () { return $context.$data.classList(); } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.NoDashboards\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.NoDashboards'); } }; });
addToBindingsCache('foreach: externalTemplates', function ($context, $element) { return { 'foreach': function () { return $context.$data.externalTemplates; } }; });
addToBindingsCache('if: isDashboardLoaded()', function ($context, $element) { return { 'if': function () { return $context.$data.isDashboardLoaded(); } }; });
addToBindingsCache('template: $data.layoutTemplate()', function ($context, $element) { return { 'template': function () { return $context.$data.layoutTemplate(); } }; });
addToBindingsCache('ifnot: isDashboardLoaded()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isDashboardLoaded(); } }; });
addToBindingsCache('if: isLoading()', function ($context, $element) { return { 'if': function () { return $context.$data.isLoading(); } }; });
addToBindingsCache('ifnot: isLoading()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isLoading(); } }; });
addToBindingsCache('foreach: emptyControlTemplates', function ($context, $element) { return { 'foreach': function () { return $context.$data.emptyControlTemplates; } }; });
addToBindingsCache('template:  { name: "dx-dashboard-notification-controller", data: notificationController._viewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-notification-controller', 'data': $context.$data.notificationController._viewModel }; } }; });
addToBindingsCache('dxButtonGroup: $data', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data; } }; });
addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'center\', at: \'center\', of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, height: \'80%\', width: \'688px\', maxHeight: \'800px\', minHeight: \'500px\', maxWidth: \'80%\', minWidth:\'600px\', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: toolbarItems, visible: popupVisible, showTitle: true, hideOnParentScroll: false, title: $root.getLocalizationById(\'DashboardWebStringId.DataSources.EditCalculatedField\'), wrapperAttr: { class: \'dx-dashboard-calc-field-editor-popup\' }, resizeEnabled: true, onResize: function() { $data.resizeAceEditor(); } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'center', 'at': 'center', 'of': $context.$root.getWidgetContainer(), 'boundary': $context.$root.getWidgetContainer() }, 'height': '80%', 'width': '688px', 'maxHeight': '800px', 'minHeight': '500px', 'maxWidth': '80%', 'minWidth': '600px', 'animation': {}, 'focusStateEnabled': true, 'hideOnOutsideClick': false, 'toolbarItems': $context.$data.toolbarItems, 'visible': $context.$data.popupVisible, 'showTitle': true, 'hideOnParentScroll': false, 'title': $context.$root.getLocalizationById('DashboardWebStringId.DataSources.EditCalculatedField'), 'wrapperAttr': { 'class': 'dx-dashboard-calc-field-editor-popup' }, 'resizeEnabled': true, 'onResize': function () { $context.$data.resizeAceEditor(); } }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CalculatedField.Name\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Name'); } }; });
addToBindingsCache('dxTextBox: { value: name }, dxValidator: { isValid: isCalcFieldNameValid, validationRules: nameValidationRules }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.name }; }, 'dxValidator': function () { return { 'isValid': $context.$data.isCalcFieldNameValid, 'validationRules': $context.$data.nameValidationRules }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CalculatedField.FieldType\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.FieldType'); } }; });
addToBindingsCache('dxSelectBox: { dataSource: availableTypes, valueExpr: \'value\', displayExpr: \'displayValue\', value: fieldType, displayCustomValue: true, editEnabled: false, dropDownOptions: { container: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.availableTypes, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'value': $context.$data.fieldType, 'displayCustomValue': true, 'editEnabled': false, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; } }; });
addToBindingsCache('css: { \'dx-invalid\': !expressionEditable.isValid() }', function ($context, $element) { return { 'css': function () { return { 'dx-invalid': !$context.$data.expressionEditable.isValid() }; } }; });
addToBindingsCache('dshdExpressionEditor: { options: expressionEditable, onResize: onResize, fieldListProvider: itemsProvider, displayNameProvider: displayNameProvider, saveHandler: saveHandler }', function ($context, $element) { return { 'dshdExpressionEditor': function () { return { 'options': $context.$data.expressionEditable, 'onResize': $context.$data.onResize, 'fieldListProvider': $context.$data.itemsProvider, 'displayNameProvider': $context.$data.displayNameProvider, 'saveHandler': $context.$data.saveHandler }; } }; });
addToBindingsCache('with: viewModel', function ($context, $element) { return { 'with': function () { return $context.$data.viewModel; } }; });
addToBindingsCache('dxPopup: { showTitle: true, title: $root.getLocalizationById(\'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption\'), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'70%\', width: \'645px\', animation: { }, maxHeight: \'800px\', minHeight: \'500px\', maxWidth: \'80%\', minWidth:\'600px\', container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, wrapperAttr: { class: \'dx-designer dx-expressioneditor dx-popup-general\' }, resizeEnabled: true, onResize: function() { $data.resizeAceEditor(); } }', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'title': $context.$root.getLocalizationById('AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption'), 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'fullScreen': false, 'height': '70%', 'width': '645px', 'animation': {}, 'maxHeight': '800px', 'minHeight': '500px', 'maxWidth': '80%', 'minWidth': '600px', 'container': $context.$root.getWidgetContainer(), 'position': { 'of': $context.$root.getWidgetContainer(), 'boundary': $context.$root.getWidgetContainer() }, 'wrapperAttr': { 'class': 'dx-designer dx-expressioneditor dx-popup-general' }, 'resizeEnabled': true, 'onResize': function () { $context.$data.resizeAceEditor(); } }; } }; });
addToBindingsCache('template: "dx-expressioneditor-main"', function ($context, $element) { return { 'template': function () { return 'dx-expressioneditor-main'; } }; });
addToBindingsCache('dx-dashboard-form-adapter: { target: $data }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data }; } }; });
addToBindingsCache('value: mode, values: dataSource', function ($context, $element) { return { 'value': function () { return $context.$data.mode; }, 'values': function () { return $context.$data.dataSource; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.mode = _z; } }; } }; });
addToBindingsCache('with: formAdapterWrapper', function ($context, $element) { return { 'with': function () { return $context.$data.formAdapterWrapper; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.ColorSchemes\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemes'); } }; });
addToBindingsCache('dxList: { dataSource: editableSignatures, selectedItems: selectedSignatures, selectionMode: \'single\', keyExpr: \'key\', nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\') }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.editableSignatures, 'selectedItems': $context.$data.selectedSignatures, 'selectionMode': 'single', 'keyExpr': 'key', 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More') }; } }; });
addToBindingsCache('style: { \'margin-left\': ($index() > 1 ? ($index() -1) * 21 : 0).toString() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'margin-left': ($context.$index() > 1 ? ($context.$index() - 1) * 21 : 0).toString() + 'px' }; } }; });
addToBindingsCache('text: $data, attr: { title: $data }', function ($context, $element) { return { 'text': function () { return $context.$data; }, 'attr': function () { return { 'title': $context.$data }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.ColorSchemeType\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemeType'); } }; });
addToBindingsCache('text: typeText, attr: {title: typeText}', function ($context, $element) { return { 'text': function () { return $context.$data.typeText; }, 'attr': function () { return { 'title': $context.$data.typeText }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.DefaultDataSourceName\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.DefaultDataSourceName'); } }; });
addToBindingsCache('text: _getDataSourceText($parents[1].getDataSourceName(dataSource)), attr: { title: _getDataSourceText($parents[1].getDataSourceName(dataSource)) }', function ($context, $element) { return { 'text': function () { return $context.$data._getDataSourceText($context.$parents[1].getDataSourceName($context.$data.dataSource)); }, 'attr': function () { return { 'title': $context.$data._getDataSourceText($context.$parents[1].getDataSourceName($context.$data.dataSource)) }; } }; });
addToBindingsCache('click: $parent.removeTable', function ($context, $element) { return { 'click': function () { return $context.$parent.removeTable; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ColorScheme.Empty\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ColorScheme.Empty'); } }; });
addToBindingsCache('template: { name :\'dx-dashboard-edit-color-scheme\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-edit-color-scheme' }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.NoSelectedSchema\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.NoSelectedSchema'); } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ColorScheme.Color\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ColorScheme.Color'); } }; });
addToBindingsCache('dxColorBox: { value: color, editAlphaChannel: true, dropDownOptions: { container: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxColorBox': function () { return { 'value': $context.$data.color, 'editAlphaChannel': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; } }; });
addToBindingsCache('dxPopover: { target: target, container: $root.getWidgetContainer(), toolbarItems: buttonItems, visible: visible, position: { boundary: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxPopover': function () { return { 'target': $context.$data.target, 'container': $context.$root.getWidgetContainer(), 'toolbarItems': $context.$data.buttonItems, 'visible': $context.$data.visible, 'position': { 'boundary': $context.$root.getWidgetContainer() } }; } }; });
addToBindingsCache('dxScrollView: { direction: \'vertical\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'vertical' }; } }; });
addToBindingsCache('dxColorView: { value: colorCss, editAlphaChannel: true, applyValueMode: \'instantly\' }', function ($context, $element) { return { 'dxColorView': function () { return { 'value': $context.$data.colorCss, 'editAlphaChannel': true, 'applyValueMode': 'instantly' }; } }; });
addToBindingsCache('text: dimensionKey.definition.dataMember', function ($context, $element) { return { 'text': function () { return $context.$data.dimensionKey.definition.dataMember; } }; });
addToBindingsCache('dxNumberBox: { height: 40, showSpinButtons:true, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }, dxValidator: { validationGroup: \'newEntry\', name: dimensionKey.definition.dataMember(), validationRules: [{ type: \'required\' } ] }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'height': 40, 'showSpinButtons': true, 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'name': $context.$data.dimensionKey.definition.dataMember(), 'validationRules': [{ 'type': 'required' }] }; } }; });
addToBindingsCache('dxDateBox: { height: 40, width: \'auto\', disabled: $parent.isAutogenerated, value: dimensionKey.value.value, dropDownOptions: { container: $root.getWidgetContainer() } }, dxValidator: { validationGroup: \'newEntry\', name: dimensionKey.definition.dataMember(), validationRules: [{ type: \'required\' } ] }', function ($context, $element) { return { 'dxDateBox': function () { return { 'height': 40, 'width': 'auto', 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'name': $context.$data.dimensionKey.definition.dataMember(), 'validationRules': [{ 'type': 'required' }] }; } }; });
addToBindingsCache('dxCheckBox: { height: 40, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'height': 40, 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value }; } }; });
addToBindingsCache('dxTextBox: { height: 40, disabled: $parent.isAutogenerated, value: dimensionKey.value.value }, dxValidator: { validationGroup: \'newEntry\', name: dimensionKey.definition.dataMember(), validationRules: [{ type: \'required\' } ] }', function ($context, $element) { return { 'dxTextBox': function () { return { 'height': 40, 'disabled': $context.$parent.isAutogenerated, 'value': $context.$data.dimensionKey.value.value }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'name': $context.$data.dimensionKey.definition.dataMember(), 'validationRules': [{ 'type': 'required' }] }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.MeasureNames\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames'); } }; });
addToBindingsCache('dxTagBox: { dataSource: availableMeasures, value: selectedMeasuresIds, disabled: isAutogenerated, displayExpr: \'displayText\', valueExpr: \'_id\', dropDownOptions: { container: $root.getWidgetContainer() } }, dxValidator: { validationGroup: \'newEntry\', validationRules: measuresValidationRules || [] }', function ($context, $element) { return { 'dxTagBox': function () { return { 'dataSource': $context.$data.availableMeasures, 'value': $context.$data.selectedMeasuresIds, 'disabled': $context.$data.isAutogenerated, 'displayExpr': 'displayText', 'valueExpr': '_id', 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; }, 'dxValidator': function () { return { 'validationGroup': 'newEntry', 'validationRules': $context.$data.measuresValidationRules || [] }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ColorScheme.Colors\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ColorScheme.Colors'); } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Colorization.AddColor\'), click: addNewEntry', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Colorization.AddColor'); }, 'click': function () { return $context.$data.addNewEntry; } }; });
addToBindingsCache('visible: allowModify || isTreeMode()', function ($context, $element) { return { 'visible': function () { return $context.$data.allowModify || $context.$data.isTreeMode(); } }; });
addToBindingsCache('dxTreeView: { dataSource: dataSource, dataStructure: \'tree\', height: !allowModify ? \'450px\' : \'100%\', selectByClick: allowModify ? true : false, selectionMode: allowModify ? \'single\' : \'none\', onItemSelectionChanged: allowModify ? onItemSelectionChanged : null, searchEnabled: true, searchExpr: [\'value\'], searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\'), focusStateEnabled: false, hoverStateEnabled: false } }', function ($context, $element) { return { 'dxTreeView': function () { return { 'dataSource': $context.$data.dataSource, 'dataStructure': 'tree', 'height': !$context.$data.allowModify ? '450px' : '100%', 'selectByClick': $context.$data.allowModify ? true : false, 'selectionMode': $context.$data.allowModify ? 'single' : 'none', 'onItemSelectionChanged': $context.$data.allowModify ? $context.$data.onItemSelectionChanged : null, 'searchEnabled': true, 'searchExpr': ['value'], 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search'), 'focusStateEnabled': false, 'hoverStateEnabled': false } }; } }; });
addToBindingsCache('css: { \'dx-color-scheme-group-tree-item\': !$data.editColor }', function ($context, $element) { return { 'css': function () { return { 'dx-color-scheme-group-tree-item': !$context.$data.editColor }; } }; });
addToBindingsCache('click: editColor, style: { \'backgroundColor\': color }', function ($context, $element) { return { 'click': function () { return $context.$data.editColor; }, 'style': function () { return { 'backgroundColor': $context.$data.color }; } }; });
addToBindingsCache('text: value', function ($context, $element) { return { 'text': function () { return $context.$data.value; } }; });
addToBindingsCache('click: $parent.removeItem', function ($context, $element) { return { 'click': function () { return $context.$parent.removeItem; } }; });
addToBindingsCache('visible: !allowModify && !isTreeMode(), dxList: { dataSource: dataSource, focusStateEnabled: false, hoverStateEnabled: false, activeStateEnabled: false, searchEnabled: true, searchMode: \'contains\', searchExpr: [\'value\'], noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\'), focusStateEnabled: false, hoverStateEnabled: false }, height: !allowModify ? \'450px\' : \'100%\', }', function ($context, $element) { return { 'visible': function () { return !$context.$data.allowModify && !$context.$data.isTreeMode(); }, 'dxList': function () { return { 'dataSource': $context.$data.dataSource, 'focusStateEnabled': false, 'hoverStateEnabled': false, 'activeStateEnabled': false, 'searchEnabled': true, 'searchMode': 'contains', 'searchExpr': ['value'], 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search'), 'focusStateEnabled': false, 'hoverStateEnabled': false }, 'height': !$context.$data.allowModify ? '450px' : '100%' }; } }; });
addToBindingsCache('style: { \'backgroundColor\': color }', function ($context, $element) { return { 'style': function () { return { 'backgroundColor': $context.$data.color }; } }; });
addToBindingsCache('click: editColor', function ($context, $element) { return { 'click': function () { return $context.$data.editColor; } }; });
addToBindingsCache('dataSource: colorSchemeModel().selectedSignatureEntries, allowModify: true, selectedEntry: selectedEntry, addNewEntry: createNewEntry, removeEntry: colorSchemeModel().removeEntry, colorPalette: colorPalette', function ($context, $element) { return { 'dataSource': function () { return $context.$data.colorSchemeModel().selectedSignatureEntries; }, 'allowModify': function () { return true; }, 'selectedEntry': function () { return $context.$data.selectedEntry; }, 'addNewEntry': function () { return $context.$data.createNewEntry; }, 'removeEntry': function () { return $context.$data.colorSchemeModel().removeEntry; }, 'colorPalette': function () { return $context.$data.colorPalette; } }; });
addToBindingsCache('with: colorSchemeModel', function ($context, $element) { return { 'with': function () { return $context.$data.colorSchemeModel; } }; });
addToBindingsCache('if: editableSignatures().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.editableSignatures().length > 0; } }; });
addToBindingsCache('foreach: dataItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.dataItems; } }; });
addToBindingsCache('if: $index() > 0', function ($context, $element) { return { 'if': function () { return $context.$index() > 0; } }; });
addToBindingsCache('if: !$parent.isSignatureAutogenerated($data)', function ($context, $element) { return { 'if': function () { return !$context.$parent.isSignatureAutogenerated($context.$data); } }; });
addToBindingsCache('ifnot: editableSignatures().length > 0', function ($context, $element) { return { 'ifnot': function () { return $context.$data.editableSignatures().length > 0; } }; });
addToBindingsCache('if: colorSchemeModel() && colorSchemeModel().selectedSignatureEntries().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.colorSchemeModel() && $context.$data.colorSchemeModel().selectedSignatureEntries().length > 0; } }; });
addToBindingsCache('ifnot: colorSchemeModel() && colorSchemeModel().selectedSignatureEntries().length > 0', function ($context, $element) { return { 'ifnot': function () { return $context.$data.colorSchemeModel() && $context.$data.colorSchemeModel().selectedSignatureEntries().length > 0; } }; });
addToBindingsCache('if: entryEditorModel.visible', function ($context, $element) { return { 'if': function () { return $context.$data.entryEditorModel.visible; } }; });
addToBindingsCache('with: entryEditorModel', function ($context, $element) { return { 'with': function () { return $context.$data.entryEditorModel; } }; });
addToBindingsCache('template: \'dx-dashboard-enter-new-entry-editor\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-enter-new-entry-editor'; } }; });
addToBindingsCache('foreach: dimensionEditors || []', function ($context, $element) { return { 'foreach': function () { return $context.$data.dimensionEditors || []; } }; });
addToBindingsCache('if: ["Integer", "Float", "Double", "Decimal"].indexOf(valueType) > -1', function ($context, $element) { return { 'if': function () { return ['Integer', 'Float', 'Double', 'Decimal'].indexOf($context.$data.valueType) > -1; } }; });
addToBindingsCache('if: ["DateTime"].indexOf(valueType) > -1', function ($context, $element) { return { 'if': function () { return ['DateTime'].indexOf($context.$data.valueType) > -1; } }; });
addToBindingsCache('if: ["Bool","Boolean"].indexOf(valueType) > -1', function ($context, $element) { return { 'if': function () { return ['Bool', 'Boolean'].indexOf($context.$data.valueType) > -1; } }; });
addToBindingsCache('ifnot: ["Integer", "Float", "Double", "Decimal", "DateTime", "Bool", "Boolean"].indexOf(valueType) > -1', function ($context, $element) { return { 'ifnot': function () { return ['Integer', 'Float', 'Double', 'Decimal', 'DateTime', 'Bool', 'Boolean'].indexOf($context.$data.valueType) > -1; } }; });
addToBindingsCache('if: hasMeasures', function ($context, $element) { return { 'if': function () { return $context.$data.hasMeasures; } }; });
addToBindingsCache('with: colorPickerModel', function ($context, $element) { return { 'with': function () { return $context.$data.colorPickerModel; } }; });
addToBindingsCache('template: { name : \'dx-dashboard-color-picker-editor\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-color-picker-editor', 'data': $context.$data }; } }; });
addToBindingsCache('if: allowAddNewEntry', function ($context, $element) { return { 'if': function () { return $context.$data.allowAddNewEntry; } }; });
addToBindingsCache('if: $data.editColor', function ($context, $element) { return { 'if': function () { return $context.$data.editColor; } }; });
addToBindingsCache('if: $parent.allowModify && custom', function ($context, $element) { return { 'if': function () { return $context.$parent.allowModify && $context.$data.custom; } }; });
addToBindingsCache('css: { \'dx-dashboard-state-condition-selected\': displayMode() === \'specificTypes\' }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-state-condition-selected': $context.$data.displayMode() === 'specificTypes' }; } }; });
addToBindingsCache('dxList: { dataSource: availableConditionTypes, selectionMode: \'single\', selectedItems: availableConditionTypes() && availableConditionTypes().filter(function(value) { return value.value === conditionType(); }) || [], onItemClick: function (e) { conditionType(e.itemData.value); }, itemTemplate: \'item\', onItemRendered: updateItemAppearance, encodeNoDataText: true, noDataText: $root.getLocalizationById(\'DashboardWebStringId.ConditionalFormatting.UnsupportedDataType\') }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.availableConditionTypes, 'selectionMode': 'single', 'selectedItems': $context.$data.availableConditionTypes() && $context.$data.availableConditionTypes().filter(function (value) { return value.value === $context.$data.conditionType(); }) || [], 'onItemClick': function (e) { $context.$data.conditionType(e.itemData.value); }, 'itemTemplate': 'item', 'onItemRendered': $context.$data.updateItemAppearance, 'encodeNoDataText': true, 'noDataText': $context.$root.getLocalizationById('DashboardWebStringId.ConditionalFormatting.UnsupportedDataType') }; } }; });
addToBindingsCache('text: $root.getLocalizationById(displayText)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.displayText); } }; });
addToBindingsCache('dxList: { dataSource: availableSpecificTypes, selectionMode: \'single\', grouped: availableSpecificTypes().rangeStyleType !== \'None\', selectedItems: selectedSpecificTypes, onItemClick: function (e) { specificType(e.itemData.value); }, itemTemplate: \'item\' }, css: { \'dx-dashboard-gallery-list\': availableSpecificTypes().rangeStyleType !== \'None\' }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.availableSpecificTypes, 'selectionMode': 'single', 'grouped': $context.$data.availableSpecificTypes().rangeStyleType !== 'None', 'selectedItems': $context.$data.selectedSpecificTypes, 'onItemClick': function (e) { $context.$data.specificType(e.itemData.value); }, 'itemTemplate': 'item' }; }, 'css': function () { return { 'dx-dashboard-gallery-list': $context.$data.availableSpecificTypes().rangeStyleType !== 'None' }; } }; });
addToBindingsCache('attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.displayText) }; }, 'foreach': function () { return $context.$parent.getStyleList($context.$data.value); } }; });
addToBindingsCache('css: \'dx-dashboard-appearance-range-preview\', style: $data', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-range-preview'; }, 'style': function () { return $context.$data; } }; });
addToBindingsCache('css: \'dx-dashboard-appearance-bar-preview\', style: $data', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-bar-preview'; }, 'style': function () { return $context.$data; } }; });
addToBindingsCache('css: $data', function ($context, $element) { return { 'css': function () { return $context.$data; } }; });
addToBindingsCache('attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getGradientColorsList(value)', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.displayText) }; }, 'foreach': function () { return $context.$parent.getGradientColorsList($context.$data.value); } }; });
addToBindingsCache('css: \'dx-dashboard-appearance-gradient-preview\', style: { \'background-color\': $data.css }', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-gradient-preview'; }, 'style': function () { return { 'background-color': $context.$data.css }; } }; });
addToBindingsCache('css: \'dx-dashboard-appearance-gradient-bar-preview\', style: { \'background-color\': $data.css }', function ($context, $element) { return { 'css': function () { return 'dx-dashboard-appearance-gradient-bar-preview'; }, 'style': function () { return { 'background-color': $context.$data.css }; } }; });
addToBindingsCache('template: \'dx-slidable-lists-navigation-area\'', function ($context, $element) { return { 'template': function () { return 'dx-slidable-lists-navigation-area'; } }; });
addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'None\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'None'; } }; });
addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'Color\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'Color'; } }; });
addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'ColorBar\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'ColorBar'; } }; });
addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'Icon\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'Icon'; } }; });
addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'Gradient\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'Gradient'; } }; });
addToBindingsCache('if: $parent.availableSpecificTypes().rangeStyleType === \'GradientBar\'', function ($context, $element) { return { 'if': function () { return $context.$parent.availableSpecificTypes().rangeStyleType === 'GradientBar'; } }; });
addToBindingsCache('dxTemplate:{ name:\'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('dxTemplate: { name:\'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('dxPopup: popupOptions', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.popupOptions; } }; });
addToBindingsCache('dxForm: formOptions', function ($context, $element) { return { 'dxForm': function () { return $context.$data.formOptions; } }; });
addToBindingsCache('if: popupOptions.visible', function ($context, $element) { return { 'if': function () { return $context.$data.popupOptions.visible; } }; });
addToBindingsCache('dxPopover: { container: $root.getWidgetContainer(), toolbarItems: buttonItems, visible: visible, position: { of: $element.parentNode, my: \'top\', at: \'bottom\', boundary: $root.getWidgetContainer(), collision: \'flipfit\' }, wrapperAttr: { class: \'dx-dropdowneditor-overlay dx-dashboard-cf-color-picker\' } }', function ($context, $element) { return { 'dxPopover': function () { return { 'container': $context.$root.getWidgetContainer(), 'toolbarItems': $context.$data.buttonItems, 'visible': $context.$data.visible, 'position': { 'of': $element.parentNode, 'my': 'top', 'at': 'bottom', 'boundary': $context.$root.getWidgetContainer(), 'collision': 'flipfit' }, 'wrapperAttr': { 'class': 'dx-dropdowneditor-overlay dx-dashboard-cf-color-picker' } }; } }; });
addToBindingsCache('dxColorView: { value: color, editAlphaChannel: true, applyValueMode: \'instantly\' }', function ($context, $element) { return { 'dxColorView': function () { return { 'value': $context.$data.color, 'editAlphaChannel': true, 'applyValueMode': 'instantly' }; } }; });
addToBindingsCache('click: add', function ($context, $element) { return { 'click': function () { return $context.$data.add; } }; });
addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': (!!selection() && value().length > 2) }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': (!!$context.$data.selection() && $context.$data.value().length > 2) }; } }; });
addToBindingsCache('dxDataGrid: dataGridOptions', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.dataGridOptions; } }; });
addToBindingsCache('text: $data.text', function ($context, $element) { return { 'text': function () { return $context.$data.text; } }; });
addToBindingsCache('dxPopover: { visible: true, hideOnOutsideClick: false, position: { of: $element, my: \'left top\', at: \'left bottom\', offset: $parent.popoverOffset }, container: $root.getWidgetContainer(), contentTemplate: \'dx-dashboard-style-settings-editor-template\', wrapperAttr: { class: \'dx-dashboard-style-settings-editor-popup dx-dropdowneditor-overlay\' } }', function ($context, $element) { return { 'dxPopover': function () { return { 'visible': true, 'hideOnOutsideClick': false, 'position': { 'of': $element, 'my': 'left top', 'at': 'left bottom', 'offset': $context.$parent.popoverOffset }, 'container': $context.$root.getWidgetContainer(), 'contentTemplate': 'dx-dashboard-style-settings-editor-template', 'wrapperAttr': { 'class': 'dx-dashboard-style-settings-editor-popup dx-dropdowneditor-overlay' } }; } }; });
addToBindingsCache('text: negativeInfinityDisplayText', function ($context, $element) { return { 'text': function () { return $context.$data.negativeInfinityDisplayText; } }; });
addToBindingsCache('dxNumberBox: editorOptions', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.editorOptions; } }; });
addToBindingsCache('dxDateBox: editorOptions', function ($context, $element) { return { 'dxDateBox': function () { return $context.$data.editorOptions; } }; });
addToBindingsCache('dxPopover: { visible: true, width: \'241px\', height: \'auto\', hideOnOutsideClick: false, position: { of: $element, my: \'left top\', at: \'left bottom\', boundary: $root.getWidgetContainer() }, container: $root.getWidgetContainer(), wrapperAttr: { class: \'dx-dropdowneditor-overlay dx-dashboard-range-edit-number-template\' } }', function ($context, $element) { return { 'dxPopover': function () { return { 'visible': true, 'width': '241px', 'height': 'auto', 'hideOnOutsideClick': false, 'position': { 'of': $element, 'my': 'left top', 'at': 'left bottom', 'boundary': $context.$root.getWidgetContainer() }, 'container': $context.$root.getWidgetContainer(), 'wrapperAttr': { 'class': 'dx-dropdowneditor-overlay dx-dashboard-range-edit-number-template' } }; } }; });
addToBindingsCache('dxButtonGroup: buttonOptions', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data.buttonOptions; } }; });
addToBindingsCache('target: $root.ko.observable(value), options: $parent.createStyleSettingsEditorOptions($data.data)', function ($context, $element) { return { 'target': function () { return $context.$root.ko.observable($context.$data.value); }, 'options': function () { return $context.$parent.createStyleSettingsEditorOptions($context.$data.data); } }; });
addToBindingsCache('args: $parent.createStyleSettingsEditorItemOptions($data.data)', function ($context, $element) { return { 'args': function () { return $context.$parent.createStyleSettingsEditorItemOptions($context.$data.data); } }; });
addToBindingsCache('if: !$data.isGradient', function ($context, $element) { return { 'if': function () { return !$context.$data.isGradient; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-range-edit-number-template\', data: $parent.createRangeNumberEditorViewModel({ grid: $data.component, isRightValue: true, rowIndex: $data.rowIndex, value: $data.data.rightValue, setValue: $data.setValue }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-range-edit-number-template', 'data': $context.$parent.createRangeNumberEditorViewModel({ 'grid': $context.$data.component, 'isRightValue': true, 'rowIndex': $context.$data.rowIndex, 'value': $context.$data.data.rightValue, 'setValue': $context.$data.setValue }) }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-range-edit-number-template\', data: $parent.createRangeNumberEditorViewModel({ grid: $data.component, isRightValue: false, rowIndex: $data.rowIndex, value: $data.data.leftValue, setValue: $data.setValue }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-range-edit-number-template', 'data': $context.$parent.createRangeNumberEditorViewModel({ 'grid': $context.$data.component, 'isRightValue': false, 'rowIndex': $context.$data.rowIndex, 'value': $context.$data.data.leftValue, 'setValue': $context.$data.setValue }) }; } }; });
addToBindingsCache('template: \'dx-dashboard-style-settings-view\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-style-settings-view'; } }; });
addToBindingsCache('if: infinitValue', function ($context, $element) { return { 'if': function () { return $context.$data.infinitValue; } }; });
addToBindingsCache('ifnot: infinitValue', function ($context, $element) { return { 'ifnot': function () { return $context.$data.infinitValue; } }; });
addToBindingsCache('if: editorType === \'numberBox\'', function ($context, $element) { return { 'if': function () { return $context.$data.editorType === 'numberBox'; } }; });
addToBindingsCache('if: editorType === \'dateBox\'', function ($context, $element) { return { 'if': function () { return $context.$data.editorType === 'dateBox'; } }; });
addToBindingsCache('if: allowInfinity', function ($context, $element) { return { 'if': function () { return $context.$data.allowInfinity; } }; });
addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-range-cell-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-cell-template' } }; });
addToBindingsCache('dxTemplate: { name: \'dx-dashboard-range-edit-number-template-right\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-edit-number-template-right' } }; });
addToBindingsCache('dxTemplate: { name: \'dx-dashboard-range-edit-number-template-left\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-edit-number-template-left' } }; });
addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-range-style-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-style-template' } }; });
addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-range-style-editor-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-range-style-editor-template' } }; });
addToBindingsCache('dxTemplate:{ name: \'dx-dashboard-style-settings-editor-template\' }', function () { return { dxTemplate: { name: 'dx-dashboard-style-settings-editor-template' } }; });
addToBindingsCache('click: clickHandler, style: cssStyles, attr: { title: title, \'data-label\': dataLabel }, css: cssClasses', function ($context, $element) { return { 'click': function () { return $context.$data.clickHandler; }, 'style': function () { return $context.$data.cssStyles; }, 'attr': function () { return { 'title': $context.$data.title, 'data-label': $context.$data.dataLabel }; }, 'css': function () { return $context.$data.cssClasses; } }; });
addToBindingsCache('if: isRangeStop', function ($context, $element) { return { 'if': function () { return $context.$data.isRangeStop; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-popover-color-picker\', data: colorPicker }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-popover-color-picker', 'data': $context.$data.colorPicker }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-custom-appearance-dialog\', data: customizeAppearanceDialog }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-custom-appearance-dialog', 'data': $context.$data.customizeAppearanceDialog }; } }; });
addToBindingsCache('text: restrictToColor ? $root.getLocalizationById(\'DashboardStringId.FormatRulePredefinedColor\') : $root.getLocalizationById(\'DashboardWebStringId.FormatConditionPredefinedAppearanceCaption\')', function ($context, $element) { return { 'text': function () { return $context.$data.restrictToColor ? $context.$root.getLocalizationById('DashboardStringId.FormatRulePredefinedColor') : $context.$root.getLocalizationById('DashboardWebStringId.FormatConditionPredefinedAppearanceCaption'); } }; });
addToBindingsCache('foreach: list', function ($context, $element) { return { 'foreach': function () { return $context.$data.list; } }; });
addToBindingsCache('text: restrictToColor ? $root.getLocalizationById(\'DashboardStringId.FormatRuleCustomColor\') : $root.getLocalizationById(\'DashboardWebStringId.FormatConditionCustomAppearanceCaption\')', function ($context, $element) { return { 'text': function () { return $context.$data.restrictToColor ? $context.$root.getLocalizationById('DashboardStringId.FormatRuleCustomColor') : $context.$root.getLocalizationById('DashboardWebStringId.FormatConditionCustomAppearanceCaption'); } }; });
addToBindingsCache('foreach: customStyleItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.customStyleItems; } }; });
addToBindingsCache('foreach: iconList', function ($context, $element) { return { 'foreach': function () { return $context.$data.iconList; } }; });
addToBindingsCache('value: viewMode, values: [{ value: \'Appearance\', displayValue: \'DashboardStringId.FormatRuleStyleAppearance\'}, { value: \'Icon\', displayValue: \'DashboardStringId.FormatRuleStyleIcons\'}]', function ($context, $element) { return { 'value': function () { return $context.$data.viewMode; }, 'values': function () { return [{ 'value': 'Appearance', 'displayValue': 'DashboardStringId.FormatRuleStyleAppearance' }, { 'value': 'Icon', 'displayValue': 'DashboardStringId.FormatRuleStyleIcons' }]; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.viewMode = _z; } }; } }; });
addToBindingsCache('args: $data', function ($context, $element) { return { 'args': function () { return $context.$data; } }; });
addToBindingsCache('if: allowChangeViewMode', function ($context, $element) { return { 'if': function () { return $context.$data.allowChangeViewMode; } }; });
addToBindingsCache('if: viewMode() === \'Appearance\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewMode() === 'Appearance'; } }; });
addToBindingsCache('if: customStyleItems', function ($context, $element) { return { 'if': function () { return $context.$data.customStyleItems; } }; });
addToBindingsCache('if: $data.item.appearanceType && $data.item.appearanceType() === \'None\' || $data.item.predefinedColor && $data.item.predefinedColor() === \'None\'', function ($context, $element) { return { 'if': function () { return $context.$data.item.appearanceType && $context.$data.item.appearanceType() === 'None' || $context.$data.item.predefinedColor && $context.$data.item.predefinedColor() === 'None'; } }; });
addToBindingsCache('ifnot: $data.item.appearanceType && $data.item.appearanceType() === \'None\' || $data.item.predefinedColor && $data.item.predefinedColor() === \'None\'', function ($context, $element) { return { 'ifnot': function () { return $context.$data.item.appearanceType && $context.$data.item.appearanceType() === 'None' || $context.$data.item.predefinedColor && $context.$data.item.predefinedColor() === 'None'; } }; });
addToBindingsCache('if: viewMode() === \'Icon\'', function ($context, $element) { return { 'if': function () { return $context.$data.viewMode() === 'Icon'; } }; });
addToBindingsCache('if: $data.item.iconType && $data.item.iconType() === \'None\'', function ($context, $element) { return { 'if': function () { return $context.$data.item.iconType && $context.$data.item.iconType() === 'None'; } }; });
addToBindingsCache('ifnot: $data.item.iconType && $data.item.iconType() === \'None\'', function ($context, $element) { return { 'ifnot': function () { return $context.$data.item.iconType && $context.$data.item.iconType() === 'None'; } }; });
addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer(), boundary: $root.getWidgetContainer() }, title: confirmTitle, visible: confirmVisible, toolbarItems: confirmButtons, onHidden: function(e) { confirmHidden(e); }, width: \'550px\', height: \'280px\', wrapperAttr: { class: \'dx-dashboard-confirm dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'of': $context.$root.getWidgetContainer(), 'boundary': $context.$root.getWidgetContainer() }, 'title': $context.$data.confirmTitle, 'visible': $context.$data.confirmVisible, 'toolbarItems': $context.$data.confirmButtons, 'onHidden': function (e) { $context.$data.confirmHidden(e); }, 'width': '550px', 'height': '280px', 'wrapperAttr': { 'class': 'dx-dashboard-confirm dx-dashboard-typography' } }; } }; });
addToBindingsCache('html: confirmText', function ($context, $element) { return { 'html': function () { return $context.$data.confirmText; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Currency.Currency\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Currency.Currency'); } }; });
addToBindingsCache('dxList: { dataSource: { store: currencies, paginate: false }, displayExpr: \'displayText\', selectedItem: selectedCurrency, selectionMode: \'single\', onContentReady: function (e) { e.component.scrollToItem(currencies.indexOf(selectedCurrency()) + 1); }, itemTemplate: \'currencyItemWithPreview\', searchEnabled: true, searchExpr: \'displayText\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': { 'store': $context.$data.currencies, 'paginate': false }, 'displayExpr': 'displayText', 'selectedItem': $context.$data.selectedCurrency, 'selectionMode': 'single', 'onContentReady': function (e) { e.component.scrollToItem($context.$data.currencies.indexOf($context.$data.selectedCurrency()) + 1); }, 'itemTemplate': 'currencyItemWithPreview', 'searchEnabled': true, 'searchExpr': 'displayText', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Currency.CurrencyCulture\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Currency.CurrencyCulture'); } }; });
addToBindingsCache('dxSelectBox: { dataSource: selectedCurrency() && selectedCurrency().cultures || [], displayExpr: \'displayText\', value: selectedCulture, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\'), noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }, searchEnabled: true, searchExpr: \'displayText\' }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.selectedCurrency() && $context.$data.selectedCurrency().cultures || [], 'displayExpr': 'displayText', 'value': $context.$data.selectedCulture, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText'), 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() }, 'searchEnabled': true, 'searchExpr': 'displayText' }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Preview\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Preview'); } }; });
addToBindingsCache('text: $data.previewPositive', function ($context, $element) { return { 'text': function () { return $context.$data.previewPositive; } }; });
addToBindingsCache('text: $data.previewNegative', function ($context, $element) { return { 'text': function () { return $context.$data.previewNegative; } }; });
addToBindingsCache('text: $data.previewWarning', function ($context, $element) { return { 'text': function () { return $context.$data.previewWarning; } }; });
addToBindingsCache('dxSelectBox: { dataSource: currencies, displayExpr: \'displayText\', value: selectedCurrency, disabled: disabled, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\'), noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }, itemTemplate: \'currencyItemWithPreview\', searchEnabled: true, searchExpr: \'displayText\' }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.currencies, 'displayExpr': 'displayText', 'value': $context.$data.selectedCurrency, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText'), 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() }, 'itemTemplate': 'currencyItemWithPreview', 'searchEnabled': true, 'searchExpr': 'displayText' }; } }; });
addToBindingsCache('text: displayText', function ($context, $element) { return { 'text': function () { return $context.$data.displayText; } }; });
addToBindingsCache('text: previewText', function ($context, $element) { return { 'text': function () { return $context.$data.previewText; } }; });
addToBindingsCache('currencyCultureName: dashboard() && dashboard().currencyCultureName', function ($context, $element) { return { 'currencyCultureName': function () { return $context.$data.dashboard() && $context.$data.dashboard().currencyCultureName; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-currency-list-item\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-currency-list-item' }; } }; });
addToBindingsCache('if: $data.previewPositive && $data.previewNegative', function ($context, $element) { return { 'if': function () { return $context.$data.previewPositive && $context.$data.previewNegative; } }; });
addToBindingsCache('if: $data.previewWarning', function ($context, $element) { return { 'if': function () { return $context.$data.previewWarning; } }; });
addToBindingsCache('dxTemplate:{ name:\'currencyItemWithPreview\' }', function () { return { dxTemplate: { name: 'currencyItemWithPreview' } }; });
addToBindingsCache('', function ($context, $element) { return {}; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.UsedDataSources\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.UsedDataSources'); } }; });
addToBindingsCache('click: click, text: text, css: { \'disabled-action\': disabled }', function ($context, $element) { return { 'click': function () { return $context.$data.click; }, 'text': function () { return $context.$data.text; }, 'css': function () { return { 'disabled-action': $context.$data.disabled }; } }; });
addToBindingsCache('click: click, text: text', function ($context, $element) { return { 'click': function () { return $context.$data.click; }, 'text': function () { return $context.$data.text; } }; });
addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'center\', at: \'center\', of: $root.getWidgetContainer(), boundary: \'.dx-dashboard-datasource-browser-wrapper\' }, height: \'80%\', width: \'700px\', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: popupContent() && popupContent().toolbarItems || [], onHidden: function() { $data.popupContent(undefined); }, visible: popupVisible, showTitle: true, title: popupContent() && popupContent().title || \'\', wrapperAttr: { class: \'dx-dashboard-datasource-browser-popup dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'center', 'at': 'center', 'of': $context.$root.getWidgetContainer(), 'boundary': '.dx-dashboard-datasource-browser-wrapper' }, 'height': '80%', 'width': '700px', 'animation': {}, 'focusStateEnabled': true, 'hideOnOutsideClick': false, 'toolbarItems': $context.$data.popupContent() && $context.$data.popupContent().toolbarItems || [], 'onHidden': function () { $context.$data.popupContent(undefined); }, 'visible': $context.$data.popupVisible, 'showTitle': true, 'title': $context.$data.popupContent() && $context.$data.popupContent().title || '', 'wrapperAttr': { 'class': 'dx-dashboard-datasource-browser-popup dx-dashboard-typography' } }; } }; });
addToBindingsCache('dxList: { dataSource: dataSourceBrowser._dataSources, selectionMode: \'single\', selectedItem: selectedDataSource, nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), searchEnabled: true, searchExpr: \'name\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.dataSourceBrowser._dataSources, 'selectionMode': 'single', 'selectedItem': $context.$data.selectedDataSource, 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'searchEnabled': true, 'searchExpr': 'name', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
addToBindingsCache('text: name()', function ($context, $element) { return { 'text': function () { return $context.$data.name(); } }; });
addToBindingsCache('click: $parent.showRenameDataSourceForm', function ($context, $element) { return { 'click': function () { return $context.$parent.showRenameDataSourceForm; } }; });
addToBindingsCache('click: $parent.removeDataSource', function ($context, $element) { return { 'click': function () { return $context.$parent.removeDataSource; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.NoUsedDataSources\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.NoUsedDataSources'); } }; });
addToBindingsCache('click: showAddDataSourceForm, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.AddDataSource\')', function ($context, $element) { return { 'click': function () { return $context.$data.showAddDataSourceForm; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.AddDataSource'); } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.NoAvailableDataSources\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.NoAvailableDataSources'); } }; });
addToBindingsCache('treelist: $data, css: {\'dx-state-loading\': itemsProvider.loading() }', function ($context, $element) { return { 'treelist': function () { return $context.$data; }, 'css': function () { return { 'dx-state-loading': $context.$data.itemsProvider.loading() }; } }; });
addToBindingsCache('css: { \'dx-state-active\': itemsProvider.loading() }', function ($context, $element) { return { 'css': function () { return { 'dx-state-active': $context.$data.itemsProvider.loading() }; } }; });
addToBindingsCache('event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() } }, css: { \'dx-treelist-item-selected\': isSelected, \'dx-treelist-item-collapsed\': collapsed, \'dx-treelist-group-item\': hasItems, \'dx-dashboard-treelist-item-disabled\': data.isList, \'dx-dashboard-corrupted-calc-field\': data.isCorruptedCalcField }, click: toggleSelected', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.dblClickHandler ? $context.$data.dblClickHandler($context.$data) : $context.$data.toggleCollapsed(); } }; }, 'css': function () { return { 'dx-treelist-item-selected': $context.$data.isSelected, 'dx-treelist-item-collapsed': $context.$data.collapsed, 'dx-treelist-group-item': $context.$data.hasItems, 'dx-dashboard-treelist-item-disabled': $context.$data.data.isList, 'dx-dashboard-corrupted-calc-field': $context.$data.data.isCorruptedCalcField }; }, 'click': function () { return $context.$data.toggleSelected; } }; });
addToBindingsCache('styleunit: { \'paddingLeft\': 20 * getModel().level + 10 }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingLeft': 20 * $context.$data.getModel().level + 10 }; } }; });
addToBindingsCache('css: nodeImageClass, click: toggleCollapsed', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; }, 'click': function () { return $context.$data.toggleCollapsed; } }; });
addToBindingsCache('css: data.style', function ($context, $element) { return { 'css': function () { return $context.$data.data.style; } }; });
addToBindingsCache('event: { dblclick: function() { $data.dblClickHandler && $data.dblClickHandler($data); } }', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.dblClickHandler && $context.$data.dblClickHandler($context.$data); } }; } }; });
addToBindingsCache('text: text, attr: { title: text }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('text: data.field.fieldType', function ($context, $element) { return { 'text': function () { return $context.$data.data.field.fieldType; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardStringId.MessageCollectionTypesNotSupported\'), attr: { title: $root.getLocalizationById(\'DashboardStringId.MessageCollectionTypesNotSupported\')}', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported') }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CalculatedField.Corrupted\'), attr: { title: $root.getLocalizationById(\'DashboardStringId.MessageCollectionTypesNotSupported\')}', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Corrupted'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported') }; } }; });
addToBindingsCache('click: click, css: style', function ($context, $element) { return { 'click': function () { return $context.$data.click; }, 'css': function () { return $context.$data.style; } }; });
addToBindingsCache('foreach: dataSourceActions', function ($context, $element) { return { 'foreach': function () { return $context.$data.dataSourceActions; } }; });
addToBindingsCache('template: \'dx-dashboard-datasource-used-datasources\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-datasource-used-datasources'; } }; });
addToBindingsCache('foreach: editDataSourceActions', function ($context, $element) { return { 'foreach': function () { return $context.$data.editDataSourceActions; } }; });
addToBindingsCache('if: visible()', function ($context, $element) { return { 'if': function () { return $context.$data.visible(); } }; });
addToBindingsCache('if: $data.filterEditorModel() !== null', function ($context, $element) { return { 'if': function () { return $context.$data.filterEditorModel() !== null; } }; });
addToBindingsCache('template: { name: \'dx-filtereditor-popup\', data: filterEditorModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-filtereditor-popup', 'data': $context.$data.filterEditorModel }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-datasource-tree\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-datasource-tree', 'data': $context.$data }; } }; });
addToBindingsCache('if: popupVisible', function ($context, $element) { return { 'if': function () { return $context.$data.popupVisible; } }; });
addToBindingsCache('with: popupContent', function ($context, $element) { return { 'with': function () { return $context.$data.popupContent; } }; });
addToBindingsCache('template: { name: template, data: { extension: $data.bindingData ? $data.bindingData : $data, dataSourcesFilter: dataSourcesFilter, federationSources: null } }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': { 'extension': $context.$data.bindingData ? $context.$data.bindingData : $context.$data, 'dataSourcesFilter': $context.$data.dataSourcesFilter, 'federationSources': null } }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-calc-field-editor\', data: calcFieldEditor  }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-calc-field-editor', 'data': $context.$data.calcFieldEditor }; } }; });
addToBindingsCache('if: $data.usedDataSourcesExist()', function ($context, $element) { return { 'if': function () { return $context.$data.usedDataSourcesExist(); } }; });
addToBindingsCache('template: renameDataSourcePopup.template', function ($context, $element) { return { 'template': function () { return $context.$data.renameDataSourcePopup.template; } }; });
addToBindingsCache('ifnot: $data.usedDataSourcesExist()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.usedDataSourcesExist(); } }; });
addToBindingsCache('if: availableDataSourcesExist()', function ($context, $element) { return { 'if': function () { return $context.$data.availableDataSourcesExist(); } }; });
addToBindingsCache('if: $data.sqlDataSourceWizard', function ($context, $element) { return { 'if': function () { return $context.$data.sqlDataSourceWizard; } }; });
addToBindingsCache('if: !availableDataSourcesExist()', function ($context, $element) { return { 'if': function () { return !$context.$data.availableDataSourcesExist(); } }; });
addToBindingsCache('with: dataSourceTreeListViewModel.treeListEditorOption', function ($context, $element) { return { 'with': function () { return $context.$data.dataSourceTreeListViewModel.treeListEditorOption; } }; });
addToBindingsCache('if: !data.style', function ($context, $element) { return { 'if': function () { return !$context.$data.data.style; } }; });
addToBindingsCache('if: !!data.style', function ($context, $element) { return { 'if': function () { return !!$context.$data.data.style; } }; });
addToBindingsCache('if: !data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return !$context.$data.data.isCorruptedCalcField; } }; });
addToBindingsCache('if: data.field.fieldType && data.field.fieldType() !== \'Unknown\'', function ($context, $element) { return { 'if': function () { return $context.$data.data.field.fieldType && $context.$data.data.field.fieldType() !== 'Unknown'; } }; });
addToBindingsCache('if: data.isList', function ($context, $element) { return { 'if': function () { return $context.$data.data.isList; } }; });
addToBindingsCache('if: data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.data.isCorruptedCalcField; } }; });
addToBindingsCache('foreach: data.innerActions', function ($context, $element) { return { 'foreach': function () { return $context.$data.data.innerActions; } }; });
addToBindingsCache('with: $data', function ($context, $element) { return { 'with': function () { return $context.$data; } }; });
addToBindingsCache('template: { name :\'dx-dashboard-datasource-browser\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-datasource-browser' }; } }; });
addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'center\', at: \'center\', boundary: \'.dx-dashboard-datasource-browser-wrapper\' }, width: \'400px\', height: \'240px\', animation: { }, focusStateEnabled: true, hideOnOutsideClick: false, toolbarItems: toolbarItems || [], visible: popupVisible, showTitle: true, title: title || \'\', wrapperAttr: { class: \'dx-dashboard-datasources-rename-popup dx-dashboard-typography\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'center', 'at': 'center', 'boundary': '.dx-dashboard-datasource-browser-wrapper' }, 'width': '400px', 'height': '240px', 'animation': {}, 'focusStateEnabled': true, 'hideOnOutsideClick': false, 'toolbarItems': $context.$data.toolbarItems || [], 'visible': $context.$data.popupVisible, 'showTitle': true, 'title': $context.$data.title || '', 'wrapperAttr': { 'class': 'dx-dashboard-datasources-rename-popup dx-dashboard-typography' } }; } }; });
addToBindingsCache('text: label', function ($context, $element) { return { 'text': function () { return $context.$data.label; } }; });
addToBindingsCache('dxTextBox: nameTextBoxOptions, dxValidator: nameValidatorOptions', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.nameTextBoxOptions; }, 'dxValidator': function () { return $context.$data.nameValidatorOptions; } }; });
addToBindingsCache('dxLoadPanel: { visible: loadingPanelVisible, hideOnOutsideClick: true, container: $root.getWidgetContainer(), position: { of: $root.getWidgetContainer() } }', function ($context, $element) { return { 'dxLoadPanel': function () { return { 'visible': $context.$data.loadingPanelVisible, 'hideOnOutsideClick': true, 'container': $context.$root.getWidgetContainer(), 'position': { 'of': $context.$root.getWidgetContainer() } }; } }; });
addToBindingsCache('dx-dashboard-element-accessor-binding: { element: wizardElement }', function ($context, $element) { return { 'dx-dashboard-element-accessor-binding': function () { return { 'element': $context.$data.wizardElement }; } }; });
addToBindingsCache('if: wizardModel.isVisible()', function ($context, $element) { return { 'if': function () { return $context.$data.wizardModel.isVisible(); } }; });
addToBindingsCache('template: { name: \'dx-wizard-newlayout\', data: wizardModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-wizard-newlayout', 'data': $context.$data.wizardModel }; } }; });
addToBindingsCache('css: { selected: selectedType() === \'Sql\' }, click: function() { return selectedType(\'Sql\'); }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.selectedType() === 'Sql' }; }, 'click': function () { return function () { return $context.$data.selectedType('Sql'); }; } }; });
addToBindingsCache('css: { selected: selectedType() === \'Olap\' }, click: function() { return selectedType(\'Olap\'); }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.selectedType() === 'Olap' }; }, 'click': function () { return function () { return $context.$data.selectedType('Olap'); }; } }; });
addToBindingsCache('click: edit', function ($context, $element) { return { 'click': function () { return $context.$data.edit; } }; });
addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': !!criteriaString() }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': !!$context.$data.criteriaString() }; } }; });
addToBindingsCache('text: criteriaString', function ($context, $element) { return { 'text': function () { return $context.$data.criteriaString; } }; });
addToBindingsCache('template: { name: editorTemplate, data: editor }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.editorTemplate, 'data': $context.$data.editor }; } }; });
addToBindingsCache('text: extension.errorState().title', function ($context, $element) { return { 'text': function () { return $context.$data.extension.errorState().title; } }; });
addToBindingsCache('text: extension.errorState().detail', function ($context, $element) { return { 'text': function () { return $context.$data.extension.errorState().detail; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.ChooseDataSource\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.ChooseDataSource'); } }; });
addToBindingsCache('click: function() { extension.showCreateDataSourceWizard(federationSources); }, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CreateNewDataSource\'), attr: { title: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CreateDataSource.Tooltip\') }', function ($context, $element) { return { 'click': function () { return function () { $context.$data.extension.showCreateDataSourceWizard($context.$data.federationSources); }; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CreateNewDataSource'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource.Tooltip') }; } }; });
addToBindingsCache('dxList: { dataSource: extension.getDataSources(dataSourcesFilter), selectionMode: \'single\', selectedItems: extension.selectedDataSources, noDataText: \'\', encodeNoDataText: true, nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), searchEnabled: true, searchExpr: \'name\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') }}', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.extension.getDataSources($context.$data.dataSourcesFilter), 'selectionMode': 'single', 'selectedItems': $context.$data.extension.selectedDataSources, 'noDataText': '', 'encodeNoDataText': true, 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'searchEnabled': true, 'searchExpr': 'name', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
addToBindingsCache('if: extension.uiState() === \'error\'', function ($context, $element) { return { 'if': function () { return $context.$data.extension.uiState() === 'error'; } }; });
addToBindingsCache('if: extension.errorState()', function ($context, $element) { return { 'if': function () { return $context.$data.extension.errorState(); } }; });
addToBindingsCache('if: extension.uiState() === \'loading\'', function ($context, $element) { return { 'if': function () { return $context.$data.extension.uiState() === 'loading'; } }; });
addToBindingsCache('if: extension.uiState() === \'live\'', function ($context, $element) { return { 'if': function () { return $context.$data.extension.uiState() === 'live'; } }; });
addToBindingsCache('if: extension.canCreateDataSourceWizard', function ($context, $element) { return { 'if': function () { return $context.$data.extension.canCreateDataSourceWizard; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.ClickHereInvitation\'), click: click', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.ClickHereInvitation'); }, 'click': function () { return $context.$data.click; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.BindDataInvitation\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.BindDataInvitation'); } }; });
addToBindingsCache('css: { \'dx-visible-properties\': !!data.propertiesController.mainModel() }', function ($context, $element) { return { 'css': function () { return { 'dx-visible-properties': !!$context.$data.data.propertiesController.mainModel() }; } }; });
addToBindingsCache('dxButton: { onClick: hideBindingProperties, type: \'normal\', stylingMode: \'text\', icon: \'arrowleft\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.hideBindingProperties, 'type': 'normal', 'stylingMode': 'text', 'icon': 'arrowleft' }; } }; });
addToBindingsCache('text: $root.getLocalizationById(data.propertiesController.secondaryModel().displayText)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.data.propertiesController.secondaryModel().displayText); } }; });
addToBindingsCache('css: {\'dx-dashboard-slide-to-right\': isSecondaryPanelVisible() }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-slide-to-right': $context.$data.isSecondaryPanelVisible() }; } }; });
addToBindingsCache('dxScrollView: { }', function ($context, $element) { return { 'dxScrollView': function () { return {}; } }; });
addToBindingsCache('template: { name: data.template, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.data.template, 'data': $context.$data }; } }; });
addToBindingsCache('if: isSecondaryPanelVisible()', function ($context, $element) { return { 'if': function () { return $context.$data.isSecondaryPanelVisible(); } }; });
addToBindingsCache('if: data.propertiesController.mainModel()', function ($context, $element) { return { 'if': function () { return $context.$data.data.propertiesController.mainModel(); } }; });
addToBindingsCache('template: { name: \'dx-dashboard-properties-accordion\', data: { propertiesController: data.propertiesController } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-accordion', 'data': { 'propertiesController': $context.$data.data.propertiesController } }; } }; });
addToBindingsCache('if: data.propertiesController.secondaryModel()', function ($context, $element) { return { 'if': function () { return $context.$data.data.propertiesController.secondaryModel(); } }; });
addToBindingsCache('template: { name: \'dx-dashboard-properties-accordion\', data: { propertiesController: data.propertiesController, useSecondaryModel: true } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-accordion', 'data': { 'propertiesController': $context.$data.data.propertiesController, 'useSecondaryModel': true } }; } }; });
addToBindingsCache('text: groupTitle', function ($context, $element) { return { 'text': function () { return $context.$data.groupTitle; } }; });
addToBindingsCache('attr: { \'data-item-type\': type, title: title }, click: convert, css: {\'dx-state-disabled\': disabled }', function ($context, $element) { return { 'attr': function () { return { 'data-item-type': $context.$data.type, 'title': $context.$data.title }; }, 'click': function () { return $context.$data.convert; }, 'css': function () { return { 'dx-state-disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxButton: { text: duplicateActionCaption, onClick: duplicate }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.duplicateActionCaption, 'onClick': $context.$data.duplicate }; } }; });
addToBindingsCache('using: data', function ($context, $element) { return { 'using': function () { return $context.$data.data; } }; });
addToBindingsCache('foreach: groups', function ($context, $element) { return { 'foreach': function () { return $context.$data.groups; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.New.DashboardName\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.New.DashboardName'); } }; });
addToBindingsCache('dxTextBox: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder\'), value: dashboardName }', function ($context, $element) { return { 'dxTextBox': function () { return { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder'), 'value': $context.$data.dashboardName }; } }; });
addToBindingsCache('dxButton: { text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.CreateDataSource\'), onClick: createNewDashboard, disabled: createNewDashboardDisabled, width: \'160px\', height: \'40px\', type: \'default\' }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource'), 'onClick': $context.$data.createNewDashboard, 'disabled': $context.$data.createNewDashboardDisabled, 'width': '160px', 'height': '40px', 'type': 'default' }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.AddNewDashboard\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.AddNewDashboard'); } }; });
addToBindingsCache('click: showCreateNewDashboard, text: $root.getLocalizationById(\'DashboardWebStringId.DashboardMenuNewDashboardCreate\')', function ($context, $element) { return { 'click': function () { return $context.$data.showCreateNewDashboard; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardCreate'); } }; });
addToBindingsCache('if: accessibleDataSourcesExtension()', function ($context, $element) { return { 'if': function () { return $context.$data.accessibleDataSourcesExtension(); } }; });
addToBindingsCache('template: { name: accessibleDataSourcesExtension().templateName, data: { extension: accessibleDataSourcesExtension().viewModel, dataSourcesFilter: function() { return true; }, federationSources: [] } }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.accessibleDataSourcesExtension().templateName, 'data': { 'extension': $context.$data.accessibleDataSourcesExtension().viewModel, 'dataSourcesFilter': function () { return true; }, 'federationSources': [] } }; } }; });
addToBindingsCache('if: isDesignMode()', function ($context, $element) { return { 'if': function () { return $context.$data.isDesignMode(); } }; });
addToBindingsCache('with: data', function ($context, $element) { return { 'with': function () { return $context.$data.data; } }; });
addToBindingsCache('ifnot: propertiesController.accordionDataSource().length > 1', function ($context, $element) { return { 'ifnot': function () { return $context.$data.propertiesController.accordionDataSource().length > 1; } }; });
addToBindingsCache('with: propertiesController.accordionDataSource()[0]', function ($context, $element) { return { 'with': function () { return $context.$data.propertiesController.accordionDataSource()[0]; } }; });
addToBindingsCache('template: \'dx-dashboard-accordion-tab-content\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-accordion-tab-content'; } }; });
addToBindingsCache('if: propertiesController.accordionDataSource().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.propertiesController.accordionDataSource().length > 1; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-properties-accordion\', data: { propertiesController: propertiesController } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-accordion', 'data': { 'propertiesController': $context.$data.propertiesController } }; } }; });
addToBindingsCache('if: data.propertiesController.secondaryModel', function ($context, $element) { return { 'if': function () { return $context.$data.data.propertiesController.secondaryModel; } }; });
addToBindingsCache('dxList: { dataSource: { load: dashboardsListStore, totalCount: function() { return 0; }, paginate: false, searchExpr: \'name\' }, noDataText: \'\', encodeNoDataText: true, searchEnabled: true, pageLoadingText: $root.getLocalizationById(\'DashboardStringId.MessageLoading\'), nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), displayExpr: \'name\', keyExpr: \'id\', searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') }, hoverStateEnabled: true, height: \'100%\', onItemClick: openDashboard }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': { 'load': $context.$data.dashboardsListStore, 'totalCount': function () { return 0; }, 'paginate': false, 'searchExpr': 'name' }, 'noDataText': '', 'encodeNoDataText': true, 'searchEnabled': true, 'pageLoadingText': $context.$root.getLocalizationById('DashboardStringId.MessageLoading'), 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'displayExpr': 'name', 'keyExpr': 'id', 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') }, 'hoverStateEnabled': true, 'height': '100%', 'onItemClick': $context.$data.openDashboard }; } }; });
addToBindingsCache('dx-dashboard-form-adapter: { target: titleSettings }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.titleSettings }; } }; });
addToBindingsCache('text: formCaption', function ($context, $element) { return { 'text': function () { return $context.$data.formCaption; } }; });
addToBindingsCache('componentArgs: getTitleComponentArgs($element)', function ($context, $element) { return { 'componentArgs': function () { return $context.$data.getTitleComponentArgs($element); } }; });
addToBindingsCache('dxPopup: viewModel.getPopupOptions($root.getWidgetContainer())', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.viewModel.getPopupOptions($context.$root.getWidgetContainer()); } }; });
addToBindingsCache('dxSelectBox: { dataSource: fields, displayExpr: \'displayName\', value: selectedField, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\'), noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\'), encodeNoDataText: true, dropDownOptions: { container: $root.getWidgetContainer() }   }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.fields, 'displayExpr': 'displayName', 'value': $context.$data.selectedField, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText'), 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getWidgetContainer() } }; } }; });
addToBindingsCache('dxTreeList: $data', function ($context, $element) { return { 'dxTreeList': function () { return $context.$data; } }; });
addToBindingsCache('text: displayName', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; } }; });
addToBindingsCache('template: viewModel.fieldSelector.template', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.fieldSelector.template; } }; });
addToBindingsCache('template: viewModel.filterTreeList.template', function ($context, $element) { return { 'template': function () { return $context.$data.viewModel.filterTreeList.template; } }; });
addToBindingsCache('with: editorOptions', function ($context, $element) { return { 'with': function () { return $context.$data.editorOptions; } }; });
addToBindingsCache('text: $data', function ($context, $element) { return { 'text': function () { return $context.$data; } }; });
addToBindingsCache('dxSelectBox: selectBoxOptions', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.selectBoxOptions; } }; });
addToBindingsCache('dxNumberBox: numberBoxOptions', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.numberBoxOptions; } }; });
addToBindingsCache('foreach: buttons', function ($context, $element) { return { 'foreach': function () { return $context.$data.buttons; } }; });
addToBindingsCache('dxButton: $data', function ($context, $element) { return { 'dxButton': function () { return $context.$data; } }; });
addToBindingsCache('text: caption', function ($context, $element) { return { 'text': function () { return $context.$data.caption; } }; });
addToBindingsCache('dx-dashboard-form-adapter: { target: object }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.object }; } }; });
addToBindingsCache('dxButtonGroup: buttonGroupOptions', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data.buttonGroupOptions; } }; });
addToBindingsCache('dx-dashboard-container-draggable: data', function ($context, $element) { return { 'dx-dashboard-container-draggable': function () { return $context.$data.data; } }; });
addToBindingsCache('attr: { title: $root.getLocalizationById(title) }, click: action', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.title) }; }, 'click': function () { return $context.$data.action; } }; });
addToBindingsCache('css: { \'dx-dashboard-data-source-panel-opened\': changeDataSourcePanelVisible() }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-data-source-panel-opened': $context.$data.changeDataSourcePanelVisible() }; } }; });
addToBindingsCache('click: changeDataSource', function ($context, $element) { return { 'click': function () { return $context.$data.changeDataSource; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Binding.DataSource\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Binding.DataSource'); } }; });
addToBindingsCache('css: { \'dx-dashboard-data-source-options-active\': changeDataSourcePanelVisible()  }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-data-source-options-active': $context.$data.changeDataSourcePanelVisible() }; } }; });
addToBindingsCache('style: { height: changeDataSourcePanelVisible() ? \'\' : \'0px\' }', function ($context, $element) { return { 'style': function () { return { 'height': $context.$data.changeDataSourcePanelVisible() ? '' : '0px' }; } }; });
addToBindingsCache('click: saveDataSourceChanges, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.OK\')', function ($context, $element) { return { 'click': function () { return $context.$data.saveDataSourceChanges; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.OK'); } }; });
addToBindingsCache('click: changeDataSource, text: $root.getLocalizationById(\'DashboardWebStringId.DataSources.Cancel\')', function ($context, $element) { return { 'click': function () { return $context.$data.changeDataSource; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DataSources.Cancel'); } }; });
addToBindingsCache('text: $root.getLocalizationById(dataSourceDisplayText()), attr: { title: $root.getLocalizationById(\'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip\') }, style: { height: changeDataSourcePanelVisible() ? \'0px\' : \'\' }, click: changeDataSource, css: { \'dx-dashboard-data-source-info-alert\': needSetDataSource }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.dataSourceDisplayText()); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip') }; }, 'style': function () { return { 'height': $context.$data.changeDataSourcePanelVisible() ? '0px' : '' }; }, 'click': function () { return $context.$data.changeDataSource; }, 'css': function () { return { 'dx-dashboard-data-source-info-alert': $context.$data.needSetDataSource }; } }; });
addToBindingsCache('dataSourceBrowser: dataSourceBrowser, dataSource: dataSourceName, dataMember: dataMemberName, active: changeDataSourcePanelVisible', function ($context, $element) { return { 'dataSourceBrowser': function () { return $context.$data.dataSourceBrowser; }, 'dataSource': function () { return $context.$data.dataSourceName; }, 'dataMember': function () { return $context.$data.dataMemberName; }, 'active': function () { return $context.$data.changeDataSourcePanelVisible; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-context-menu-header\', data: { title: title, click: hideBindingPanel, detailVisible: detailVisible } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-context-menu-header', 'data': { 'title': $context.$data.title, 'click': $context.$data.hideBindingPanel, 'detailVisible': $context.$data.detailVisible } }; } }; });
addToBindingsCache('foreach: data.dataSections', function ($context, $element) { return { 'foreach': function () { return $context.$data.data.dataSections; } }; });
addToBindingsCache('if: $data.sectionInfo && sectionInfo.actions', function ($context, $element) { return { 'if': function () { return $context.$data.sectionInfo && $context.$data.sectionInfo.actions; } }; });
addToBindingsCache('foreach: sectionInfo.actions', function ($context, $element) { return { 'foreach': function () { return $context.$data.sectionInfo.actions; } }; });
addToBindingsCache('lazy: { if: $parents[2].detailVisible }', function ($context, $element) { return { 'lazy': function () { return { 'if': $context.$parents[2].detailVisible }; } }; });
addToBindingsCache('template: { name: $data.template, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-item-datasource\', data: data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-item-datasource', 'data': $context.$data.data }; } }; });
addToBindingsCache('template: { name: "dx-dashboard-confirm-dialog", data: confirmDialogViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-confirm-dialog', 'data': $context.$data.confirmDialogViewModel }; } }; });
addToBindingsCache('dxclick: function(data, event) { event.stopPropagation(); return false; }', function ($context, $element) { return { 'dxclick': function () { return function (data, event) { event.stopPropagation(); return false; }; } }; });
addToBindingsCache('css: { \'dx-dashboard-include-summary\': $data.additionalProperties()}', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-include-summary': $context.$data.additionalProperties() }; } }; });
addToBindingsCache('model: $data.model(), holder: $data', function ($context, $element) { return { 'model': function () { return $context.$data.model(); }, 'holder': function () { return $context.$data; } }; });
addToBindingsCache('binding: binding, item: item, click: click, selected: false, dataItemDisplayNameProvider: dataItemDisplayNameProvider, removeDataItem: removeDataItem, placeholder: placeholder, embeddedRemovalIcon: true, error: $parent.holder.dataItemErrorFactory && $parent.holder.dataItemErrorFactory($data.item.dataItem())', function ($context, $element) { return { 'binding': function () { return $context.$data.binding; }, 'item': function () { return $context.$data.item; }, 'click': function () { return $context.$data.click; }, 'selected': function () { return false; }, 'dataItemDisplayNameProvider': function () { return $context.$data.dataItemDisplayNameProvider; }, 'removeDataItem': function () { return $context.$data.removeDataItem; }, 'placeholder': function () { return $context.$data.placeholder; }, 'embeddedRemovalIcon': function () { return true; }, 'error': function () { return $context.$parent.holder.dataItemErrorFactory && $context.$parent.holder.dataItemErrorFactory($context.$data.item.dataItem()); } }; });
addToBindingsCache('dataSourceBrowser: dataSourceBrowser, filter: constraint, startPath: dataMemberPath(), selectedField: choosenField()', function ($context, $element) { return { 'dataSourceBrowser': function () { return $context.$data.dataSourceBrowser; }, 'filter': function () { return $context.$data.constraint; }, 'startPath': function () { return $context.$data.dataMemberPath(); }, 'selectedField': function () { return $context.$data.choosenField(); } }; });
addToBindingsCache('with: additionalProperties', function ($context, $element) { return { 'with': function () { return $context.$data.additionalProperties; } }; });
addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: $data.selected, hint: $root.getLocalizationById(displayName), icon: icon, click: function(e) { $parent.itemClick($data, e.event) } } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.selected, 'hint': $context.$root.getLocalizationById($context.$data.displayName), 'icon': $context.$data.icon, 'click': function (e) { $context.$parent.itemClick($context.$data, e.event); } } }; } }; });
addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { hint: $root.getLocalizationById(\'DashboardStringId.CloseCaption\'), icon: \'dx-dashboard-close\' } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'hint': $context.$root.getLocalizationById('DashboardStringId.CloseCaption'), 'icon': 'dx-dashboard-close' } }; } }; });
addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { hint: $root.getLocalizationById(\'DashboardWebStringId.Binding.ShowAll\'), icon: \'dx-dashboard-group-types-full-list\' } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'hint': $context.$root.getLocalizationById('DashboardWebStringId.Binding.ShowAll'), 'icon': 'dx-dashboard-group-types-full-list' } }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.FilterItem.Type\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.FilterItem.Type'); } }; });
addToBindingsCache('template: { name: \'dx-dashboard-container-types-header\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-container-types-header' }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.StyleSettings\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.StyleSettings'); } }; });
addToBindingsCache('text: $root.getLocalizationById($data.displayName)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.displayName); } }; });
addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: $data.selected, hint: $root.getLocalizationById(displayName), icon: icon, click: function(e) { $parents[1].itemClick($data, e.event) } } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.selected, 'hint': $context.$root.getLocalizationById($context.$data.displayName), 'icon': $context.$data.icon, 'click': function (e) { $context.$parents[1].itemClick($context.$data, e.event); } } }; } }; });
addToBindingsCache('foreach: shortAvailableContainerTypes', function ($context, $element) { return { 'foreach': function () { return $context.$data.shortAvailableContainerTypes; } }; });
addToBindingsCache('if: hasFullList', function ($context, $element) { return { 'if': function () { return $context.$data.hasFullList; } }; });
addToBindingsCache('foreach: availableContainerTypeGroups', function ($context, $element) { return { 'foreach': function () { return $context.$data.availableContainerTypeGroups; } }; });
addToBindingsCache('if: $data.displayName', function ($context, $element) { return { 'if': function () { return $context.$data.displayName; } }; });
addToBindingsCache('foreach: $parent.availableContainerTypes.filter(function (type) { return type.group === $data.name; } )', function ($context, $element) { return { 'foreach': function () { return $context.$parent.availableContainerTypes.filter(function (type) { return type.group === $context.$data.name; }); } }; });
addToBindingsCache('css: { \'dx-state-selected\': $data.layoutItem.isSelected }', function ($context, $element) { return { 'css': function () { return { 'dx-state-selected': $context.$data.layoutItem.isSelected }; } }; });
addToBindingsCache('css: menuContainerCssClasses', function ($context, $element) { return { 'css': function () { return $context.$data.menuContainerCssClasses; } }; });
addToBindingsCache('menuVisibilitySubscription: { visible: menuItemDetailVisible }', function ($context, $element) { return { 'menuVisibilitySubscription': function () { return { 'visible': $context.$data.menuItemDetailVisible }; } }; });
addToBindingsCache('click: collapsedStateToggle, css: isCollapsed() ? \'dx-dashboard-item-menu-expand\' : \'\'', function ($context, $element) { return { 'click': function () { return $context.$data.collapsedStateToggle; }, 'css': function () { return $context.$data.isCollapsed() ? 'dx-dashboard-item-menu-expand' : ''; } }; });
addToBindingsCache('css: menuButton.cssClass, click: menuButton.clickHandler, attr: { title: menuButton.hint }', function ($context, $element) { return { 'css': function () { return $context.$data.menuButton.cssClass; }, 'click': function () { return $context.$data.menuButton.clickHandler; }, 'attr': function () { return { 'title': $context.$data.menuButton.hint }; } }; });
addToBindingsCache('xlinkHref: menuButton.icon', function ($context, $element) { return { 'xlinkHref': function () { return $context.$data.menuButton.icon; } }; });
addToBindingsCache('dxPopover: getPopoverOptions($root.getWidgetContainer())', function ($context, $element) { return { 'dxPopover': function () { return $context.$data.getPopoverOptions($context.$root.getWidgetContainer()); } }; });
addToBindingsCache('click: deleteCurrentItemAction, attr: { title: deleteCurrentItemActionCaption }', function ($context, $element) { return { 'click': function () { return $context.$data.deleteCurrentItemAction; }, 'attr': function () { return { 'title': $context.$data.deleteCurrentItemActionCaption }; } }; });
addToBindingsCache('dxButton: { onClick: click, type: \'normal\', stylingMode: \'text\', icon: \'close\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.click, 'type': 'normal', 'stylingMode': 'text', 'icon': 'close' }; } }; });
addToBindingsCache('css: cssClasses, style: style', function ($context, $element) { return { 'css': function () { return $context.$data.cssClasses; }, 'style': function () { return $context.$data.style; } }; });
addToBindingsCache('layoutController: $data.dockingLayoutController, layoutItem: $data.layoutItem, itemMenuViewModelContainer: $data.itemMenuViewModelContainer, notificationController: $data.notificationController', function ($context, $element) { return { 'layoutController': function () { return $context.$data.dockingLayoutController; }, 'layoutItem': function () { return $context.$data.layoutItem; }, 'itemMenuViewModelContainer': function () { return $context.$data.itemMenuViewModelContainer; }, 'notificationController': function () { return $context.$data.notificationController; } }; });
addToBindingsCache('if: isCollapsedStateToggleVisible()', function ($context, $element) { return { 'if': function () { return $context.$data.isCollapsedStateToggleVisible(); } }; });
addToBindingsCache('if: !isCollapsed()', function ($context, $element) { return { 'if': function () { return !$context.$data.isCollapsed(); } }; });
addToBindingsCache('foreach: contextMenuItemViewModels', function ($context, $element) { return { 'foreach': function () { return $context.$data.contextMenuItemViewModels; } }; });
addToBindingsCache('lazy: { template: \'dx-dashboard-context-menu-panel-content\' }', function ($context, $element) { return { 'lazy': function () { return { 'template': 'dx-dashboard-context-menu-panel-content' }; } }; });
addToBindingsCache('with: menuPropertiesPanel', function ($context, $element) { return { 'with': function () { return $context.$data.menuPropertiesPanel; } }; });
addToBindingsCache('if: title', function ($context, $element) { return { 'if': function () { return $context.$data.title; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-context-menu-header\', data: { title: title, click: hidePanelAction, detailVisible: detailVisible } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-context-menu-header', 'data': { 'title': $context.$data.title, 'click': $context.$data.hidePanelAction, 'detailVisible': $context.$data.detailVisible } }; } }; });
addToBindingsCache('if: detailVisible', function ($context, $element) { return { 'if': function () { return $context.$data.detailVisible; } }; });
addToBindingsCache('template: { name: panelContent.view, data: panelContent.viewModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.panelContent.view, 'data': $context.$data.panelContent.viewModel }; } }; });
addToBindingsCache('style: { \'font-weight\': $data.customTemplateGetItemWeight($data.itemModel)}', function ($context, $element) { return { 'style': function () { return { 'font-weight': $context.$data.customTemplateGetItemWeight($context.$data.itemModel) }; } }; });
addToBindingsCache('text: $root.getLocalizationById($data.parent.getItemText($data.itemModel))', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.parent.getItemText($context.$data.itemModel)); } }; });
addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: $data.selected, text: $data.item && $data.item.dataItem && $data.item.dataItem() && dataItemDisplayNameProvider($data.item.dataItem()) || (($root.ko.unwrap($data.selected) && $data.selectedPlaceholder) || $data.placeholder), click: function(e) { !!$data.propertiesController ? $data.propertiesController.processDataItemClick($data) : $data.click($data); } } }, style: { \'z-index\': 1000 - $data.index }, css: { \'dx-dashboard-data-item-remove-action-visible\': $root.ko.unwrap($data.selected) && !$root.ko.unwrap($data.isEmpty), \'dx-empty\': $data.isEmpty, \'dx-state-warning\': $data.warning, \'dx-state-error\': $data.error }, attr: { draggable: !!$root.ko.unwrap($data.draggable) }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.selected, 'text': $context.$data.item && $context.$data.item.dataItem && $context.$data.item.dataItem() && $context.$data.dataItemDisplayNameProvider($context.$data.item.dataItem()) || (($context.$root.ko.unwrap($context.$data.selected) && $context.$data.selectedPlaceholder) || $context.$data.placeholder), 'click': function (e) { !!$context.$data.propertiesController ? $context.$data.propertiesController.processDataItemClick($context.$data) : $context.$data.click($context.$data); } } }; }, 'style': function () { return { 'z-index': 1000 - $context.$data.index }; }, 'css': function () { return { 'dx-dashboard-data-item-remove-action-visible': $context.$root.ko.unwrap($context.$data.selected) && !$context.$root.ko.unwrap($context.$data.isEmpty), 'dx-empty': $context.$data.isEmpty, 'dx-state-warning': $context.$data.warning, 'dx-state-error': $context.$data.error }; }, 'attr': function () { return { 'draggable': !!$context.$root.ko.unwrap($context.$data.draggable) }; } }; });
addToBindingsCache('click: function(model, event) { removeDataItem(item); event.stopPropagation(); }, css: { \'dx-dashboard-data-item-remove-action-visible\': $root.ko.unwrap($data.selected) , \'dx-dashboard-data-item-remove-action-embeded\': $data.embeddedRemovalIcon }', function ($context, $element) { return { 'click': function () { return function (model, event) { $context.$data.removeDataItem($context.$data.item); event.stopPropagation(); }; }, 'css': function () { return { 'dx-dashboard-data-item-remove-action-visible': $context.$root.ko.unwrap($context.$data.selected), 'dx-dashboard-data-item-remove-action-embeded': $context.$data.embeddedRemovalIcon }; } }; });
addToBindingsCache('ifnot: $data.isEmpty', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isEmpty; } }; });
addToBindingsCache('text: $root.getLocalizationById(sectionInfo.title)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.sectionInfo.title); } }; });
addToBindingsCache('css: { \'dx-dashboard-hierarchical-group\': $data.groupIndex !== undefined }', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-hierarchical-group': $context.$data.groupIndex !== undefined }; } }; });
addToBindingsCache('css: {\'dx-dashboard-hierarchical-group-cover\': false}', function ($context, $element) { return { 'css': function () { return { 'dx-dashboard-hierarchical-group-cover': false }; } }; });
addToBindingsCache('click: addPane, title: $root.getLocalizationById(\'DashboardWebStringId.Chart.AddPane\')', function ($context, $element) { return { 'click': function () { return $context.$data.addPane; }, 'title': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Chart.AddPane'); } }; });
addToBindingsCache('item: $data, click: $parents[1].selectDataItem, removeDataItem: $parents[1].removeDataItem, index: $index(), dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider, propertiesController: $parents[1].itemSurface.propertiesController, error: $parents[1].errorFactory($data), draggable: true', function ($context, $element) { return { 'item': function () { return $context.$data; }, 'click': function () { return $context.$parents[1].selectDataItem; }, 'removeDataItem': function () { return $context.$parents[1].removeDataItem; }, 'index': function () { return $context.$index(); }, 'dataItemDisplayNameProvider': function () { return $context.$parents[1].dataItemDisplayNameProvider; }, 'propertiesController': function () { return $context.$parents[1].itemSurface.propertiesController; }, 'error': function () { return $context.$parents[1].errorFactory($context.$data); }, 'draggable': function () { return true; } }; });
addToBindingsCache('selectionTarget: newItemSample, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, click: addClick, propertiesController: $parent.itemSurface.propertiesController, warning: $data.warning', function ($context, $element) { return { 'selectionTarget': function () { return $context.$data.newItemSample; }, 'placeholder': function () { return $context.$data.sectionInfo.bindingProperty.emptyPlaceholder; }, 'selectedPlaceholder': function () { return $context.$data.sectionInfo.bindingProperty.selectedPlaceholder; }, 'click': function () { return $context.$data.addClick; }, 'propertiesController': function () { return $context.$parent.itemSurface.propertiesController; }, 'warning': function () { return $context.$data.warning; } }; });
addToBindingsCache('draggable: true, click: $parents[1].selectDataItemContainer, item: $data, removeDataItem: $parents[1].removeDataItem, dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider, placeholder: $parents[1].getDisplayName($data), isEmpty: false, error: $parents[1].errorFactory($data), propertiesController: $parents[1].itemSurface.propertiesController', function ($context, $element) { return { 'draggable': function () { return true; }, 'click': function () { return $context.$parents[1].selectDataItemContainer; }, 'item': function () { return $context.$data; }, 'removeDataItem': function () { return $context.$parents[1].removeDataItem; }, 'dataItemDisplayNameProvider': function () { return $context.$parents[1].dataItemDisplayNameProvider; }, 'placeholder': function () { return $context.$parents[1].getDisplayName($context.$data); }, 'isEmpty': function () { return false; }, 'error': function () { return $context.$parents[1].errorFactory($context.$data); }, 'propertiesController': function () { return $context.$parents[1].itemSurface.propertiesController; } }; });
addToBindingsCache('selectionTarget: newContainerSample, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, click: addDataItemContainerClick, propertiesController: $parent.itemSurface.propertiesController, warning: $data.warning', function ($context, $element) { return { 'selectionTarget': function () { return $context.$data.newContainerSample; }, 'placeholder': function () { return $context.$data.sectionInfo.bindingProperty.emptyPlaceholder; }, 'selectedPlaceholder': function () { return $context.$data.sectionInfo.bindingProperty.selectedPlaceholder; }, 'click': function () { return $context.$data.addDataItemContainerClick; }, 'propertiesController': function () { return $context.$parent.itemSurface.propertiesController; }, 'warning': function () { return $context.$data.warning; } }; });
addToBindingsCache('item: dataItemLink, removeDataItem: removeDataItem, dataItemDisplayNameProvider: dataItemDisplayNameProvider, click: selectDataItem, placeholder: sectionInfo.bindingProperty.emptyPlaceholder, selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder, propertiesController: $parent.itemSurface.propertiesController, error: errorFactory(dataItemLink), draggable: dataItemLink.uniqueName, warning: $data.warning', function ($context, $element) { return { 'item': function () { return $context.$data.dataItemLink; }, 'removeDataItem': function () { return $context.$data.removeDataItem; }, 'dataItemDisplayNameProvider': function () { return $context.$data.dataItemDisplayNameProvider; }, 'click': function () { return $context.$data.selectDataItem; }, 'placeholder': function () { return $context.$data.sectionInfo.bindingProperty.emptyPlaceholder; }, 'selectedPlaceholder': function () { return $context.$data.sectionInfo.bindingProperty.selectedPlaceholder; }, 'propertiesController': function () { return $context.$parent.itemSurface.propertiesController; }, 'error': function () { return $context.$data.errorFactory($context.$data.dataItemLink); }, 'draggable': function () { return $context.$data.dataItemLink.uniqueName; }, 'warning': function () { return $context.$data.warning; } }; });
addToBindingsCache('lazy: { if: $parents[3].detailVisible }', function ($context, $element) { return { 'lazy': function () { return { 'if': $context.$parents[3].detailVisible }; } }; });
addToBindingsCache('dxFieldListPicker: { path: pathToMembers, value: value, displayValue: displayValue, itemsProvider: itemsProvider, treeListController: treeListController, disabled: disabled, placeholder: $root.getLocalizationById(\'DashboardStringId.ParametersSelectorText\') }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'path': $context.$data.pathToMembers, 'value': $context.$data.value, 'displayValue': $context.$data.displayValue, 'itemsProvider': $context.$data.itemsProvider, 'treeListController': $context.$data.treeListController, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.getLocalizationById('DashboardStringId.ParametersSelectorText') }; } }; });
addToBindingsCache('dxScrollView: { direction: \'vertical\', height: \'100%\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'vertical', 'height': '100%' }; } }; });
addToBindingsCache('dx-dashboard-form-adapter: { target: commonParameterSettings  }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.commonParameterSettings }; } }; });
addToBindingsCache('dx-dashboard-form-adapter: { target: lookUpParameterType  }', function ($context, $element) { return { 'dx-dashboard-form-adapter': function () { return { 'target': $context.$data.lookUpParameterType }; } }; });
addToBindingsCache('with: staticListLookUpSettings', function ($context, $element) { return { 'with': function () { return $context.$data.staticListLookUpSettings; } }; });
addToBindingsCache('with: dynamicListLookUpSettings', function ($context, $element) { return { 'with': function () { return $context.$data.dynamicListLookUpSettings; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Parameters.ParameterList\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Parameters.ParameterList'); } }; });
addToBindingsCache('click: toggleReordering, text: allowReordering() ? $root.getLocalizationById(\'DashboardWebStringId.Parameters.Done\'): $root.getLocalizationById(\'DashboardWebStringId.Parameters.Reorder\')', function ($context, $element) { return { 'click': function () { return $context.$data.toggleReordering; }, 'text': function () { return $context.$data.allowReordering() ? $context.$root.getLocalizationById('DashboardWebStringId.Parameters.Done') : $context.$root.getLocalizationById('DashboardWebStringId.Parameters.Reorder'); } }; });
addToBindingsCache('click: addParameter, text: $root.getLocalizationById(\'DashboardWebStringId.Add\'), attr: { title: $root.getLocalizationById(\'DashboardWebStringId.Parameters.AddParameter.Tooltip\') }', function ($context, $element) { return { 'click': function () { return $context.$data.addParameter; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Add'); }, 'attr': function () { return { 'title': $context.$root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter.Tooltip') }; } }; });
addToBindingsCache('dxList: { dataSource: dashboard().parameters, selectionMode: \'single\', itemDragging: { allowReordering: allowReordering, }, onItemReordered: reorderParameters, selectedItems: $data.selectedParameters, nextButtonText: $root.getLocalizationById(\'DashboardWebStringId.More\'), searchEnabled: true, searchExpr: [\'name\', \'description\'], searchEditorOptions: { placeholder: $root.getLocalizationById(\'DashboardWebStringId.Search\') } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.dashboard().parameters, 'selectionMode': 'single', 'itemDragging': { 'allowReordering': $context.$data.allowReordering }, 'onItemReordered': $context.$data.reorderParameters, 'selectedItems': $context.$data.selectedParameters, 'nextButtonText': $context.$root.getLocalizationById('DashboardWebStringId.More'), 'searchEnabled': true, 'searchExpr': ['name', 'description'], 'searchEditorOptions': { 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Search') } }; } }; });
addToBindingsCache('text: description', function ($context, $element) { return { 'text': function () { return $context.$data.description; } }; });
addToBindingsCache('click: $parent.removeParameter', function ($context, $element) { return { 'click': function () { return $context.$parent.removeParameter; } }; });
addToBindingsCache('click: addParameter, text: $root.getLocalizationById(\'DashboardWebStringId.Parameters.AddParameter\')', function ($context, $element) { return { 'click': function () { return $context.$data.addParameter; }, 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter'); } }; });
addToBindingsCache('template: { name: \'dx-dashboard-parameter-settings\', data: parameterEditorViewModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-parameter-settings', 'data': $context.$data.parameterEditorViewModel }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.Parameters.NoSelectedParameter\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.Parameters.NoSelectedParameter'); } }; });
addToBindingsCache('if: dashboard()', function ($context, $element) { return { 'if': function () { return $context.$data.dashboard(); } }; });
addToBindingsCache('if: dashboard().parameters().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.dashboard().parameters().length > 1; } }; });
addToBindingsCache('if: dashboard().parameters().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.dashboard().parameters().length > 0; } }; });
addToBindingsCache('if: description', function ($context, $element) { return { 'if': function () { return $context.$data.description; } }; });
addToBindingsCache('ifnot: $parent.allowReordering', function ($context, $element) { return { 'ifnot': function () { return $context.$parent.allowReordering; } }; });
addToBindingsCache('ifnot: dashboard().parameters().length > 0', function ($context, $element) { return { 'ifnot': function () { return $context.$data.dashboard().parameters().length > 0; } }; });
addToBindingsCache('if: parameterEditorViewModel', function ($context, $element) { return { 'if': function () { return $context.$data.parameterEditorViewModel; } }; });
addToBindingsCache('dxAccordion: { dataSource: !$data.useSecondaryModel ? propertiesController.accordionDataSource : propertiesController.secondaryAccordionDataSource, itemTitleTemplate: \'title\', itemTemplate: \'itemCategory\', focusStateEnabled: false, selectedIndex: !$data.useSecondaryModel ? propertiesController.selectedIndex : propertiesController.secondarySelectedIndex, collapsible: true, noDataText: $root.getLocalizationById(\'DashboardStringId.MessageLoading\'), encodeNoDataText: true, onItemRendered: function (e) { if(e.itemData.hasNoBorder) { $root.$unwrap(e.itemElement).classList.add(\'dx-dashboard-accordion-item-no-border\'); } }, onSelectionChanged: function(e) { if(e.addedItems[0] && e.addedItems[0].tabModel) { e.addedItems[0].tabModel(e.addedItems[0].tabModel()) } } }', function ($context, $element) { return { 'dxAccordion': function () { return { 'dataSource': !$context.$data.useSecondaryModel ? $context.$data.propertiesController.accordionDataSource : $context.$data.propertiesController.secondaryAccordionDataSource, 'itemTitleTemplate': 'title', 'itemTemplate': 'itemCategory', 'focusStateEnabled': false, 'selectedIndex': !$context.$data.useSecondaryModel ? $context.$data.propertiesController.selectedIndex : $context.$data.propertiesController.secondarySelectedIndex, 'collapsible': true, 'noDataText': $context.$root.getLocalizationById('DashboardStringId.MessageLoading'), 'encodeNoDataText': true, 'onItemRendered': function (e) { if (e.itemData.hasNoBorder) {
            $context.$root.$unwrap(e.itemElement).classList.add('dx-dashboard-accordion-item-no-border');
        } }, 'onSelectionChanged': function (e) { if (e.addedItems[0] && e.addedItems[0].tabModel) {
            e.addedItems[0].tabModel(e.addedItems[0].tabModel());
        } } }; } }; });
addToBindingsCache('css: $data.style, style: { height: $data.headerHeight ? $data.headerHeight + \'px\': \'\' }, dxclick: function(data, event) { $data.onTitleClick && $data.onTitleClick($data.headerModel || $data.tabModel, data, event); }', function ($context, $element) { return { 'css': function () { return $context.$data.style; }, 'style': function () { return { 'height': $context.$data.headerHeight ? $context.$data.headerHeight + 'px' : '' }; }, 'dxclick': function () { return function (data, event) { $context.$data.onTitleClick && $context.$data.onTitleClick($context.$data.headerModel || $context.$data.tabModel, data, event); }; } }; });
addToBindingsCache('css: $data.style', function ($context, $element) { return { 'css': function () { return $context.$data.style; } }; });
addToBindingsCache('text: $root.getLocalizationById($data.category)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.category); } }; });
addToBindingsCache('text: $root.getLocalizationById($data.summary && $data.summary()), attr: { title: $data.summaryHint && $data.summaryHint() }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.summary && $context.$data.summary()); }, 'attr': function () { return { 'title': $context.$data.summaryHint && $context.$data.summaryHint() }; } }; });
addToBindingsCache('if: $data.headerTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.headerTemplate; } }; });
addToBindingsCache('template: { name: $data.headerTemplate, data: $data.headerModel || $data.tabModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.headerTemplate, 'data': $context.$data.headerModel || $context.$data.tabModel }; } }; });
addToBindingsCache('ifnot: $data.headerTemplate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.headerTemplate; } }; });
addToBindingsCache('template: { name: \'dx-dashboard-properties-header-template\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-properties-header-template' }; } }; });
addToBindingsCache('if: $data.tabTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.tabTemplate; } }; });
addToBindingsCache('template: { name: $data.tabTemplate, data: $data.tabModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.tabTemplate, 'data': $context.$data.tabModel }; } }; });
addToBindingsCache('ifnot: $data.tabTemplate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.tabTemplate; } }; });
addToBindingsCache('with: $data.tabModel', function ($context, $element) { return { 'with': function () { return $context.$data.tabModel; } }; });
addToBindingsCache('if: $data.summary', function ($context, $element) { return { 'if': function () { return $context.$data.summary; } }; });
addToBindingsCache('ifnot: $data.summary', function ($context, $element) { return { 'ifnot': function () { return $context.$data.summary; } }; });
addToBindingsCache('dxTemplate : { name: \'title\', visible: \'visible\' }', function () { return { dxTemplate: { name: 'title', visible: 'visible' } }; });
addToBindingsCache('dxTemplate : { name: \'itemCategory\', visible: \'visible\' }', function () { return { dxTemplate: { name: 'itemCategory', visible: 'visible' } }; });
addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { boundary: $root.getWidgetContainer(), of: $root.getWidgetContainer(), my: \'center\', at: \'center\' }, height: \'80%\', width: \'80%\', hideOnOutsideClick: true, showTitle: true, deferRendering: true, onHiding: onHiding, onHidden: onHidden, onInitialized: onInitialized, title: $root.getLocalizationById(\'DashboardWebStringId.TextBoxItemEditor.DialogCaption\'), toolbarItems: [ { toolbar: \'bottom\', location: \'after\', widget: \'dxButton\', options: { text: $root.getLocalizationById(\'DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose\'), onClick: saveAndClose, type: \'default\' } }, { toolbar: \'bottom\', location: \'after\', widget: \'dxButton\', options: { text: $root.getLocalizationById(\'DashboardWebStringId.TextBoxItemEditor.DialogClose\'), onClick: close } } ], wrapperAttr: { class: \'dx-dashboard-text-box-item-editor-popup\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'boundary': $context.$root.getWidgetContainer(), 'of': $context.$root.getWidgetContainer(), 'my': 'center', 'at': 'center' }, 'height': '80%', 'width': '80%', 'hideOnOutsideClick': true, 'showTitle': true, 'deferRendering': true, 'onHiding': $context.$data.onHiding, 'onHidden': $context.$data.onHidden, 'onInitialized': $context.$data.onInitialized, 'title': $context.$root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogCaption'), 'toolbarItems': [{ 'toolbar': 'bottom', 'location': 'after', 'widget': 'dxButton', 'options': { 'text': $context.$root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose'), 'onClick': $context.$data.saveAndClose, 'type': 'default' } }, { 'toolbar': 'bottom', 'location': 'after', 'widget': 'dxButton', 'options': { 'text': $context.$root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogClose'), 'onClick': $context.$data.close } }], 'wrapperAttr': { 'class': 'dx-dashboard-text-box-item-editor-popup' } }; } }; });
addToBindingsCache('dx-dashboard-rich-edit: $data', function ($context, $element) { return { 'dx-dashboard-rich-edit': function () { return $context.$data; } }; });
addToBindingsCache('with: richEditorOptions', function ($context, $element) { return { 'with': function () { return $context.$data.richEditorOptions; } }; });
addToBindingsCache('dxPopup: getKoPopupOptions()', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.getKoPopupOptions(); } }; });
addToBindingsCache('dxToolbar: koToolbarOptions', function ($context, $element) { return { 'dxToolbar': function () { return $context.$data.koToolbarOptions; } }; });
addToBindingsCache('style: { left: designerPanelLeft() + \'px\' }', function ($context, $element) { return { 'style': function () { return { 'left': $context.$data.designerPanelLeft() + 'px' }; } }; });
addToBindingsCache('dxPopup: { target: $root.getWidgetContainer(), container: $root.getWidgetContainer(), position: { my: \'left top\', at: \'left top\', collision: \'flipfit\', boundaryOffset: \'0, 0\', boundary: $root.getWidgetContainer(), of:  $root.getWidgetContainer(), offset: \'0, 0\' }, animation: { show: { type: \'slide\', from: { left: -240 }, to: { left: 0 } }, hide: { type: \'slide\', from: { left: 0 }, to: { left: -240 } } }, focusStateEnabled: false, showCloseButton: false, dragEnabled: false, width: settingsFormVisible() ? \'100%\' : 240, height: \'100%\', titleTemplate: \'menuTitleTemplate\', hideOnOutsideClick: !settingsFormVisible(), hideOnParentScroll: false, visible: menuVisible, wrapperAttr: { class: \'dx-dashboard-designer-menu-popup\' } }', function ($context, $element) { return { 'dxPopup': function () { return { 'target': $context.$root.getWidgetContainer(), 'container': $context.$root.getWidgetContainer(), 'position': { 'my': 'left top', 'at': 'left top', 'collision': 'flipfit', 'boundaryOffset': '0, 0', 'boundary': $context.$root.getWidgetContainer(), 'of': $context.$root.getWidgetContainer(), 'offset': '0, 0' }, 'animation': { 'show': { 'type': 'slide', 'from': { 'left': -240 }, 'to': { 'left': 0 } }, 'hide': { 'type': 'slide', 'from': { 'left': 0 }, 'to': { 'left': -240 } } }, 'focusStateEnabled': false, 'showCloseButton': false, 'dragEnabled': false, 'width': $context.$data.settingsFormVisible() ? '100%' : 240, 'height': '100%', 'titleTemplate': 'menuTitleTemplate', 'hideOnOutsideClick': !$context.$data.settingsFormVisible(), 'hideOnParentScroll': false, 'visible': $context.$data.menuVisible, 'wrapperAttr': { 'class': 'dx-dashboard-designer-menu-popup' } }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.DashboardMenu\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.DashboardMenu'); } }; });
addToBindingsCache('dxButton: { onClick: function() { toggleMenu(); }, type: \'normal\', stylingMode: \'text\', icon: \'close\' }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': function () { $context.$data.toggleMenu(); }, 'type': 'normal', 'stylingMode': 'text', 'icon': 'close' }; } }; });
addToBindingsCache('click: disabled() ? null : $parent.menuItemClick, text: $root.getLocalizationById(title), css: { \'dx-state-selected\': selected, \'dx-state-disabled\': disabled, \'dx-separator\': $data.hasSeparator }', function ($context, $element) { return { 'click': function () { return $context.$data.disabled() ? null : $context.$parent.menuItemClick; }, 'text': function () { return $context.$root.getLocalizationById($context.$data.title); }, 'css': function () { return { 'dx-state-selected': $context.$data.selected, 'dx-state-disabled': $context.$data.disabled, 'dx-separator': $context.$data.hasSeparator }; } }; });
addToBindingsCache('text: $root.getLocalizationById(settingsForm().title)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.settingsForm().title); } }; });
addToBindingsCache('element-height-change-provider: { model: toolbarGroupsSorted, height: toolbarHeight }', function ($context, $element) { return { 'element-height-change-provider': function () { return { 'model': $context.$data.toolbarGroupsSorted, 'height': $context.$data.toolbarHeight }; } }; });
addToBindingsCache('attr: { title: $root.getLocalizationById(title) }, click: click, css: { \'dx-state-disabled\': disabled }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.title) }; }, 'click': function () { return $context.$data.click; }, 'css': function () { return { 'dx-state-disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxScrollView: { direction: \'vertical\'}, style: { bottom: toolbarHeight() + \'px\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'vertical' }; }, 'style': function () { return { 'bottom': $context.$data.toolbarHeight() + 'px' }; } }; });
addToBindingsCache('text: $root.getLocalizationById(title)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data.title); } }; });
addToBindingsCache('dx-dashboard-element-accessor: $parents[1].initDragEvents(type), attr: { \'data-item-type\': type, title: $root.getLocalizationById(title) }, click: click, css: { \'dx-state-disabled\': disabled }', function ($context, $element) { return { 'dx-dashboard-element-accessor': function () { return $context.$parents[1].initDragEvents($context.$data.type); }, 'attr': function () { return { 'data-item-type': $context.$data.type, 'title': $context.$root.getLocalizationById($context.$data.title) }; }, 'click': function () { return $context.$data.click; }, 'css': function () { return { 'dx-state-disabled': $context.$data.disabled }; } }; });
addToBindingsCache('text: $root.getLocalizationById(\'DashboardWebStringId.AddItemInvitation\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById('DashboardWebStringId.AddItemInvitation'); } }; });
addToBindingsCache('attr: { title: $root.getLocalizationById(title) }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalizationById($context.$data.title) }; } }; });
addToBindingsCache('xlinkHref: iconName', function ($context, $element) { return { 'xlinkHref': function () { return $context.$data.iconName; } }; });
addToBindingsCache('attr: { \'data-item-type\': type }, click:  $parent.addDashboardItem', function ($context, $element) { return { 'attr': function () { return { 'data-item-type': $context.$data.type }; }, 'click': function () { return $context.$parent.addDashboardItem; } }; });
addToBindingsCache('template: \'dx-dashboard-menu\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-menu'; } }; });
addToBindingsCache('template: \'dx-dashboard-toolbox\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-toolbox'; } }; });
addToBindingsCache('template: \'dx-dashboard-toolbar\'', function ($context, $element) { return { 'template': function () { return 'dx-dashboard-toolbar'; } }; });
addToBindingsCache('foreach: menuItemsSorted', function ($context, $element) { return { 'foreach': function () { return $context.$data.menuItemsSorted; } }; });
addToBindingsCache('if: settingsFormVisible() && settingsForm()', function ($context, $element) { return { 'if': function () { return $context.$data.settingsFormVisible() && $context.$data.settingsForm(); } }; });
addToBindingsCache('template:{ name: settingsForm().template, data: settingsForm().data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.settingsForm().template, 'data': $context.$data.settingsForm().data }; } }; });
addToBindingsCache('foreach: toolbarGroupsSorted', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolbarGroupsSorted; } }; });
addToBindingsCache('if: $data[\'template\']', function ($context, $element) { return { 'if': function () { return $context.$data['template']; } }; });
addToBindingsCache('template: $data[\'template\']', function ($context, $element) { return { 'template': function () { return $context.$data['template']; } }; });
addToBindingsCache('if: $data[\'icon\']', function ($context, $element) { return { 'if': function () { return $context.$data['icon']; } }; });
addToBindingsCache('foreach: toolboxGroupsSorted', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolboxGroupsSorted; } }; });
addToBindingsCache('foreach: dashboardItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.dashboardItems; } }; });
addToBindingsCache('dxTemplate: { name: \'menuTitleTemplate\' }', function () { return { dxTemplate: { name: 'menuTitleTemplate' } }; });
addToBindingsCache('visible: isToolbarVisible', function ($context, $element) { return { 'visible': function () { return $context.$data.isToolbarVisible; } }; });
addToBindingsCache('click: add, css: { \'dx-state-disabled\': !addEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.add; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.addEnabled() }; } }; });
addToBindingsCache('click: edit, css: { \'dx-state-disabled\': !editEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.edit; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.editEnabled() }; } }; });
addToBindingsCache('click: down, css: { \'dx-state-disabled\': !downEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.down; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.downEnabled() }; } }; });
addToBindingsCache('click: up, css: { \'dx-state-disabled\': !upEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.up; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.upEnabled() }; } }; });
addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': !!removeEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': !!$context.$data.removeEnabled() }; } }; });
addToBindingsCache('click: action, attr: { title: name }', function ($context, $element) { return { 'click': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.name }; } }; });
addToBindingsCache('attr: { \'xlink:href\': icon }', function ($context, $element) { return { 'attr': function () { return { 'xlink:href': $context.$data.icon }; } }; });
addToBindingsCache('dxList: $data.getListOptions()', function ($context, $element) { return { 'dxList': function () { return $context.$data.getListOptions(); } }; });
addToBindingsCache('if: allowAddItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowAddItem; } }; });
addToBindingsCache('if: allowEditItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowEditItem; } }; });
addToBindingsCache('if: allowReorderItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowReorderItem; } }; });
addToBindingsCache('if: allowRemoveItem', function ($context, $element) { return { 'if': function () { return $context.$data.allowRemoveItem; } }; });
addToBindingsCache('foreach: customToolbarItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.customToolbarItems; } }; });
addToBindingsCache('css: { \'dx-state-disabled\': !downEnabled() }, click: down', function ($context, $element) { return { 'css': function () { return { 'dx-state-disabled': !$context.$data.downEnabled() }; }, 'click': function () { return $context.$data.down; } }; });
addToBindingsCache('css: { \'dx-state-disabled\': !upEnabled() }, click: up', function ($context, $element) { return { 'css': function () { return { 'dx-state-disabled': !$context.$data.upEnabled() }; }, 'click': function () { return $context.$data.up; } }; });
addToBindingsCache('click: remove, css: { \'dx-dashboard-state-selected\': removeEnabled() }', function ($context, $element) { return { 'click': function () { return $context.$data.remove; }, 'css': function () { return { 'dx-dashboard-state-selected': $context.$data.removeEnabled() }; } }; });
addToBindingsCache('dxDataGrid: $data.getGridOptions()', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.getGridOptions(); } }; });
addToBindingsCache('template: \'dx-field-chooser-content-list\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-content-list'; } }; });
addToBindingsCache('css: { \'dx-field-chooser-search-mode\': isSearchMode() }', function ($context, $element) { return { 'css': function () { return { 'dx-field-chooser-search-mode': $context.$data.isSearchMode() }; } }; });
addToBindingsCache('click: searchButtonClick', function ($context, $element) { return { 'click': function () { return $context.$data.searchButtonClick; } }; });
addToBindingsCache('click: addCalcField', function ($context, $element) { return { 'click': function () { return $context.$data.addCalcField; } }; });
addToBindingsCache('click: editCalcField, css: {\'dx-state-disabled\': !isCalcFieldSelected()}', function ($context, $element) { return { 'click': function () { return $context.$data.editCalcField; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.isCalcFieldSelected() }; } }; });
addToBindingsCache('click: removeCalcField, css: {\'dx-state-disabled\': !isCalcFieldSelected()}', function ($context, $element) { return { 'click': function () { return $context.$data.removeCalcField; }, 'css': function () { return { 'dx-state-disabled': !$context.$data.isCalcFieldSelected() }; } }; });
addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: isListMode, icon: \'dx-dashboard-fc-mode-list\', click: setListMode } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': $context.$data.isListMode, 'icon': 'dx-dashboard-fc-mode-list', 'click': $context.$data.setListMode } }; } }; });
addToBindingsCache('component: { name: \'dx-dashboard-checked-button\', params: { isSelected: !isListMode(), icon: \'dx-dashboard-fc-mode-tree\', click: setTreeMode } }', function ($context, $element) { return { 'component': function () { return { 'name': 'dx-dashboard-checked-button', 'params': { 'isSelected': !$context.$data.isListMode(), 'icon': 'dx-dashboard-fc-mode-tree', 'click': $context.$data.setTreeMode } }; } }; });
addToBindingsCache('dxTextBox: { value: searchString, valueChangeEvent: \'keyup\', showClearButton: true, placeholder: $root.getLocalizationById(\'DashboardWebStringId.Binding.Searching\'), disabled: !isSearchMode() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.searchString, 'valueChangeEvent': 'keyup', 'showClearButton': true, 'placeholder': $context.$root.getLocalizationById('DashboardWebStringId.Binding.Searching'), 'disabled': !$context.$data.isSearchMode() }; } }; });
addToBindingsCache('dxList: { items: searchResults, onItemClick: selectViaSearchResults, selectionMode: \'single\', selectedItems: [selectedSearchResult()], noDataText: $root.getLocalizationById(\'DashboardWebStringId.Binding.EmptySearchResult\'), }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.searchResults, 'onItemClick': $context.$data.selectViaSearchResults, 'selectionMode': 'single', 'selectedItems': [$context.$data.selectedSearchResult()], 'noDataText': $context.$root.getLocalizationById('DashboardWebStringId.Binding.EmptySearchResult') }; } }; });
addToBindingsCache('css: {\'dx-has-path\': path.length > 0 }', function ($context, $element) { return { 'css': function () { return { 'dx-has-path': $context.$data.path.length > 0 }; } }; });
addToBindingsCache('text: item.displayName, attr: { title: $root.ko.unwrap(item.displayName).length > 30 ? item.displayName : null }, css: {\'dx-dashboard-corrupted-calc-field\': item.isCorruptedCalcField }', function ($context, $element) { return { 'text': function () { return $context.$data.item.displayName; }, 'attr': function () { return { 'title': $context.$root.ko.unwrap($context.$data.item.displayName).length > 30 ? $context.$data.item.displayName : null }; }, 'css': function () { return { 'dx-dashboard-corrupted-calc-field': $context.$data.item.isCorruptedCalcField }; } }; });
addToBindingsCache('text: path, attr: { title: path.length > 30 ? path : null }', function ($context, $element) { return { 'text': function () { return $context.$data.path; }, 'attr': function () { return { 'title': $context.$data.path.length > 30 ? $context.$data.path : null }; } }; });
addToBindingsCache('css: { \'dx-state-ready\': ready }, style: { left: $element.offsetWidth * index() + \'px\' }', function ($context, $element) { return { 'css': function () { return { 'dx-state-ready': $context.$data.ready }; }, 'style': function () { return { 'left': $element.offsetWidth * $context.$data.index() + 'px' }; } }; });
addToBindingsCache('dxList: { dataSource: items, pageLoadMode: \'scrollBottom\', onItemClick: itemClick, selectionMode: \'single\', selectedItemKeys: selectedItemName, keyExpr: \'name\', onInitialized: onInitialized, onContentReady: onContentReady, encodeNoDataText: true, noDataText: $root.getLocalizationById(\'DashboardStringId.FilterElementNoDataToDisplay\') }, css: { \'dx-hierarchical-field-chooser-list\' : !!ancestors }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.items, 'pageLoadMode': 'scrollBottom', 'onItemClick': $context.$data.itemClick, 'selectionMode': 'single', 'selectedItemKeys': $context.$data.selectedItemName, 'keyExpr': 'name', 'onInitialized': $context.$data.onInitialized, 'onContentReady': $context.$data.onContentReady, 'encodeNoDataText': true, 'noDataText': $context.$root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay') }; }, 'css': function () { return { 'dx-hierarchical-field-chooser-list': !!$context.$data.ancestors }; } }; });
addToBindingsCache('attr: { title: displayName }, css: { \'dx-dashboard-has-children\': $root.ko.unwrap(isGroup) }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dx-dashboard-has-children': $context.$root.ko.unwrap($context.$data.isGroup) }; } }; });
addToBindingsCache('text: displayName, css: {\'dx-dashboard-corrupted-calc-field\': $data.isCorruptedCalcField }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'css': function () { return { 'dx-dashboard-corrupted-calc-field': $context.$data.isCorruptedCalcField }; } }; });
addToBindingsCache('dxLoadIndicator: { visible: loading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.loading }; } }; });
addToBindingsCache('dxTreeView: dataSourceTreeOptions', function ($context, $element) { return { 'dxTreeView': function () { return $context.$data.dataSourceTreeOptions; } }; });
addToBindingsCache('css: { \'dx-field-chooser-group-list-item\': $data.isGroup }', function ($context, $element) { return { 'css': function () { return { 'dx-field-chooser-group-list-item': $context.$data.isGroup }; } }; });
addToBindingsCache('text: displayName, attr: { title: $root.ko.unwrap(displayName).length > 20 ? displayName : null }, css: {\'dx-dashboard-corrupted-calc-field\': $data.isCorruptedCalcField }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$root.ko.unwrap($context.$data.displayName).length > 20 ? $context.$data.displayName : null }; }, 'css': function () { return { 'dx-dashboard-corrupted-calc-field': $context.$data.isCorruptedCalcField }; } }; });
addToBindingsCache('if: isOlap || isCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.isOlap || $context.$data.isCalcField; } }; });
addToBindingsCache('attr: { title: $data.typeTooltip}, style: { cursor: $data.isList ? \'default\' : \'inherit\' }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.typeTooltip }; }, 'style': function () { return { 'cursor': $context.$data.isList ? 'default' : 'inherit' }; } }; });
addToBindingsCache('xlinkHref: \'dx-dashboard-datatype-\' + $data.normalizedType', function ($context, $element) { return { 'xlinkHref': function () { return 'dx-dashboard-datatype-' + $context.$data.normalizedType; } }; });
addToBindingsCache('template: \'dx-field-chooser-header-area\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-header-area'; } }; });
addToBindingsCache('if: hasSearchResults() && isSearchMode()', function ($context, $element) { return { 'if': function () { return $context.$data.hasSearchResults() && $context.$data.isSearchMode(); } }; });
addToBindingsCache('template: \'dx-field-chooser-content-search-results\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-content-search-results'; } }; });
addToBindingsCache('if: !$data.hasSearchResults || !$data.isListMode || (!hasSearchResults() && isListMode())', function ($context, $element) { return { 'if': function () { return !$context.$data.hasSearchResults || !$context.$data.isListMode || (!$context.$data.hasSearchResults() && $context.$data.isListMode()); } }; });
addToBindingsCache('if: !hasSearchResults() && !isListMode()', function ($context, $element) { return { 'if': function () { return !$context.$data.hasSearchResults() && !$context.$data.isListMode(); } }; });
addToBindingsCache('template: \'dx-field-chooser-content-treeview\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-content-treeview'; } }; });
addToBindingsCache('template: { name: "dx-dashboard-confirm-dialog", data: _inappropriateCalcFieldConfirmation }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-dashboard-confirm-dialog', 'data': $context.$data._inappropriateCalcFieldConfirmation }; } }; });
addToBindingsCache('if: canAddCalculatedField', function ($context, $element) { return { 'if': function () { return $context.$data.canAddCalculatedField; } }; });
addToBindingsCache('if: hasGroups()', function ($context, $element) { return { 'if': function () { return $context.$data.hasGroups(); } }; });
addToBindingsCache('template: { name: \'dx-field-chooser-field-type\', data: item }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-field-chooser-field-type', 'data': $context.$data.item }; } }; });
addToBindingsCache('foreach: lists', function ($context, $element) { return { 'foreach': function () { return $context.$data.lists; } }; });
addToBindingsCache('template: { name: \'dx-slidable-lists-navigation-area\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-slidable-lists-navigation-area', 'data': $context.$data }; } }; });
addToBindingsCache('template: \'dx-field-chooser-field-type\'', function ($context, $element) { return { 'template': function () { return 'dx-field-chooser-field-type'; } }; });
addToBindingsCache('if: $data.isOlapDimension', function ($context, $element) { return { 'if': function () { return $context.$data.isOlapDimension; } }; });
addToBindingsCache('if: $data.isOlapDimensionHierarchy', function ($context, $element) { return { 'if': function () { return $context.$data.isOlapDimensionHierarchy; } }; });
addToBindingsCache('if: $data.isOlapMeasure', function ($context, $element) { return { 'if': function () { return $context.$data.isOlapMeasure; } }; });
addToBindingsCache('if: $data.isCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.isCalcField; } }; });
addToBindingsCache('if: $data.isAggregate', function ($context, $element) { return { 'if': function () { return $context.$data.isAggregate; } }; });
addToBindingsCache('ifnot: $data.isAggregate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isAggregate; } }; });
addToBindingsCache('if: !$data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return !$context.$data.isCorruptedCalcField; } }; });
addToBindingsCache('if: $data.isCorruptedCalcField', function ($context, $element) { return { 'if': function () { return $context.$data.isCorruptedCalcField; } }; });
addToBindingsCache('dxTemplate : { name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('visible: !!ancestors', function ($context, $element) { return { 'visible': function () { return !!$context.$data.ancestors; } }; });
addToBindingsCache('attr: { title: $data.map(function(el) { return $root.getLocalizationById(el); }).join(\'/\') }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.map(function (el) { return $context.$root.getLocalizationById(el); }).join('/') }; } }; });
addToBindingsCache('text: $root.getLocalizationById($data), click: function(data) { var handler = $parents[3].backClick || $parents[1].backClick; handler(data, $parent); }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data); }, 'click': function () { return function (data) { var handler = $context.$parents[3].backClick || $context.$parents[1].backClick; handler(data, $context.$parent); }; } }; });
addToBindingsCache('text: $root.getLocalizationById($data)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalizationById($context.$data); } }; });
addToBindingsCache('with: ancestors', function ($context, $element) { return { 'with': function () { return $context.$data.ancestors; } }; });
addToBindingsCache('if: ($index() !== ($parent.length - 1))', function ($context, $element) { return { 'if': function () { return ($context.$index() !== ($context.$parent.length - 1)); } }; });
addToBindingsCache('if: ($index() === ($parent.length - 1))', function ($context, $element) { return { 'if': function () { return ($context.$index() === ($context.$parent.length - 1)); } }; });
