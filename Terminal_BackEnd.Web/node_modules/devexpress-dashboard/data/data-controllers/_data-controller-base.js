/**
* DevExpress Dashboard (_data-controller-base.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { RenderHelper } from '../../viewer-parts/widgets/_render-helper';
import { localizationId } from '../_localization-ids';
import { localizer } from '../_localizer';
import { tooltipContainerSelector } from '../_utils';
import { zIndex } from '../_z-index';
export let DATA_POSTFIX = '_Data';
export let DEFAULT_SUBTITLE_SEPARATOR = ' - ';
export class dataControllerBase {
    constructor(options) {
        this.deltaIndicatorTypes = ['none', 'up', 'down', 'warning'];
        this.multiData = options ? options.multiData : undefined;
        this.viewModel = options ? options.viewModel : undefined;
        this.cfModel = options ? options.cfModel : undefined;
        this.drillDownState = options ? options.drillDownState : undefined;
        this.useNeutralFilterMode = options ? options.useNeutralFilterMode : undefined;
    }
    isMultiselectable() {
        return false;
    }
    update(selectedValues, encodeHtml) {
    }
    getTitle(axisPoint, separator, saveOrder) {
        var axisName = axisPoint.getAxisName(), values;
        if (this.drillDownState[axisName]) {
            var text = axisPoint.getDisplayText();
            return text == undefined ? '' : text;
        }
        else {
            values = axisPoint.getDisplayPath();
            if (!saveOrder) {
                values = values.reverse();
            }
            return values.join(separator ? separator : DEFAULT_SUBTITLE_SEPARATOR);
        }
    }
    _getMeasureValueByAxisPoints(axisPoints, cfMeasureId) {
        var slice = this._getSlice(axisPoints);
        return slice.getConditionalFormattingMeasureValue(cfMeasureId);
    }
    _getSlice(axisPoints) {
        var slice = this.multiData;
        axisPoints.forEach(axisPoint => {
            slice = slice.getSlice(axisPoint);
        });
        return slice;
    }
    _getZeroPosition(zeroPositionMeasureId, columnAxisName, rowAxisName) {
        var that = this, currentZeroPosition, zeroPosition, columnRootPoint, rowRootPoint;
        columnRootPoint = that.multiData.getAxis(columnAxisName).getRootPoint();
        rowRootPoint = that.multiData.getAxis(rowAxisName).getRootPoint();
        currentZeroPosition = that._getMeasureValueByAxisPoints([columnRootPoint, rowRootPoint], zeroPositionMeasureId);
        if (currentZeroPosition !== undefined && currentZeroPosition !== null)
            zeroPosition = currentZeroPosition;
        return zeroPosition;
    }
    _getStyleIndexes(rule, cellInfo, points) {
        return null;
    }
    _getStyleSettingsInfoCore(cellInfo, rules, columnAxisName, rowAxisName) {
        var that = this, currentStyleIndexes = [], uniqueIndexes = [], styleAndRuleMappingTable = {}, ruleIndex, currentNormalizedValue, normalizedValue, zeroPosition, styleSettingsInfo, points = [];
        if (rules.length > 0) {
            rules.forEach(rule => {
                currentStyleIndexes = that._getStyleIndexes(rule, cellInfo, points);
                if (currentStyleIndexes && currentStyleIndexes.length > 0) {
                    ruleIndex = that.cfModel.RuleModels ? that.cfModel.RuleModels.indexOf(rule) : -1;
                    currentStyleIndexes.forEach(styleIndex => {
                        if (uniqueIndexes[styleIndex] === undefined) {
                            uniqueIndexes.push(styleIndex);
                            styleAndRuleMappingTable[styleIndex] = ruleIndex;
                        }
                    });
                }
                currentNormalizedValue = that._getMeasureValueByAxisPoints(points, rule.NormalizedValueMeasureId);
                if (currentNormalizedValue !== undefined && currentNormalizedValue !== null) {
                    normalizedValue = currentNormalizedValue;
                    zeroPosition = that._getZeroPosition(rule.ZeroPositionMeasureId, columnAxisName, rowAxisName);
                }
            });
            styleSettingsInfo = {
                styleIndexes: uniqueIndexes,
                styleAndRuleMappingTable: styleAndRuleMappingTable
            };
            if (normalizedValue !== undefined && zeroPosition !== undefined) {
                styleSettingsInfo.normalizedValue = normalizedValue;
                styleSettingsInfo.zeroPosition = zeroPosition;
            }
        }
        return styleSettingsInfo;
    }
    _generateSparklineOptions(data, options, format) {
        return {
            dataSource: data,
            type: options.ViewType.toLowerCase(),
            onIncidentOccurred: RenderHelper.widgetIncidentOccurred,
            showMinMax: options.HighlightMinMaxPoints,
            showFirstLast: options.HighlightStartEndPoints,
            tooltip: {
                _justify: true,
                container: tooltipContainerSelector,
                contentTemplate: function (data) {
                    var startText = localizer.getString(localizationId.sparkline.TooltipStartValue), endText = localizer.getString(localizationId.sparkline.TooltipEndValue), minText = localizer.getString(localizationId.sparkline.TooltipMinValue), maxText = localizer.getString(localizationId.sparkline.TooltipMaxValue);
                    var table = document.createElement('table');
                    table.style.borderSpacing = '0px';
                    var createRow = (startText, endText) => {
                        var tr = document.createElement('tr');
                        var td = document.createElement('td');
                        var span = document.createElement('span');
                        span.innerText = startText;
                        td.appendChild(span);
                        tr.appendChild(td);
                        td = document.createElement('td');
                        td.style.width = '15px';
                        tr.appendChild(td);
                        td = document.createElement('td');
                        td.style.textAlign = 'right';
                        var span = document.createElement('span');
                        span.innerText = endText;
                        td.appendChild(span);
                        tr.appendChild(td);
                        return tr;
                    };
                    table.appendChild(createRow(startText, format(data.originalFirstValue)));
                    table.appendChild(createRow(endText, format(data.originalLastValue)));
                    table.appendChild(createRow(minText, format(data.originalMinValue)));
                    table.appendChild(createRow(maxText, format(data.originalMaxValue)));
                    var div = document.createElement('div');
                    div.appendChild(table);
                    return div;
                },
                zIndex: zIndex.dashboardItemTooltips
            }
        };
    }
    _convertIndicatorType(type) {
        return this.deltaIndicatorTypes[type];
    }
    _findAxisPoint(dataId, axisPoint) {
        if (axisPoint) {
            while (axisPoint.getDimension() && axisPoint.getDimension().id !== dataId) {
                axisPoint = axisPoint.getParent();
            }
        }
        return axisPoint && axisPoint.getParent() ? axisPoint : null;
    }
}
