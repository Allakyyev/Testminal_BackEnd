/**
* DevExpress Dashboard (_filter-element-data-controller.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { LegacySettings } from '../../viewer-parts/legacy-settings';
import { itemDataAxisNames } from '../item-data/item-data-axis-names';
import { specialValues } from '../special-values';
import { HashsetWrapper } from '../_hashset-wrapper';
import { ALL_ELEMENT } from '../_localizer';
import { wrapHash } from '../_utils';
import { dataControllerBase } from './_data-controller-base';
export const VALUE_EXPR = 'value';
export const KEY_EXPR = 'key';
export class filterElementDataController extends dataControllerBase {
    constructor(options) {
        super(options);
        this._reset();
    }
    getAllItemIndex() {
        return this.dataSource ? this.dataSource.indexOf(ALL_ELEMENT) : -1;
    }
    getDataSourceItemKey(item) {
        return item[KEY_EXPR];
    }
    getDataSourceItemByKey(key) {
        return this.dataSource.filter(item => item[KEY_EXPR] === key)[0];
    }
    isAllSelected() {
        return this.dataSource && this.selection ? (this.dataSource.length === this.selection.length) : false;
    }
    update(selectedValues, encodeHtml, selectionOnly = false) {
        this._reset(selectionOnly);
        var hashset = new HashsetWrapper(selectedValues || []);
        var key = 0, applySelection = (dataItem) => {
            if (hashset.contains(dataItem[VALUE_EXPR])) {
                this.selection.push(dataItem);
            }
            this.fullSelection.push(dataItem);
        }, hasAllElement = this.viewModel && this.viewModel.ShowAllValue && !this.isMultiselectable() && !this.useNeutralFilterMode, points = this.multiData ? this.multiData.getAxis(itemDataAxisNames.defaultAxis).getPoints(true) : [];
        if (selectionOnly) {
            this.dataSource.forEach(dataItem => applySelection(dataItem));
        }
        else {
            if (hasAllElement && points.length > 0) {
                this.dataSource.push(ALL_ELEMENT);
            }
            points.forEach(point => {
                let dataItem = {
                    [KEY_EXPR]: key++,
                    [VALUE_EXPR]: point.getUniquePath()
                };
                if (encodeHtml) {
                    dataItem.text = this.getTitle(point, ', ', true);
                }
                else {
                    dataItem.html = this.getTitle(point, ', ', true);
                }
                this.dataSource.push(dataItem);
                applySelection(dataItem);
            });
        }
        if (hasAllElement && ((!this.useNeutralFilterMode && this.dataSource.length - 1 === this.selection.length) || (!!this.useNeutralFilterMode && !this.selection.length))) {
            this.selection.splice(0, 0, ALL_ELEMENT);
            this.fullSelection.splice(0, 0, ALL_ELEMENT);
        }
    }
    getInteractionValues(elements, selectedValues) {
        var hasAll = !this.isMultiselectable() && elements && elements.indexOf(ALL_ELEMENT) !== -1;
        if (!!this.useNeutralFilterMode && hasAll)
            return null;
        var values = [], items = hasAll ? this.dataSource : elements;
        items.forEach(item => {
            if (item !== ALL_ELEMENT) {
                values.push(this._getDataValue(item));
            }
        });
        return values;
    }
    _getDataValue(wrappedValue) {
        var itemData = (wrappedValue && wrappedValue.itemData) || wrappedValue;
        if (itemData[VALUE_EXPR] != null)
            return itemData[VALUE_EXPR];
        return null;
    }
    _reset(selectionOnly = false) {
        if (!selectionOnly) {
            this.dataSource = [];
        }
        this.selection = [];
        this.fullSelection = [];
    }
}
export class listViewDataController extends filterElementDataController {
    constructor(options) {
        super(options);
        this.ListBoxType = {
            Checked: 'Checked',
            Radio: 'Radio'
        };
        this.ComboBoxType = {
            Standard: 'Standard',
            Checked: 'Checked'
        };
    }
    isMultiselectable() {
        return !this.viewModel || (this.viewModel.ListBoxType == this.ListBoxType.Checked) || (this.viewModel.ComboBoxType == this.ListBoxType.Checked);
    }
}
export class treeViewDataController extends filterElementDataController {
    constructor(options) {
        super(options);
    }
    isMultiselectable() {
        return true;
    }
    getAllItemIndex() {
        return -1;
    }
    isAllSelected() {
        return false;
    }
    update(selectedValues, encodeHtml, selectionOnly = false) {
        this._reset(selectionOnly);
        if (selectionOnly)
            return this._updateSelection(selectedValues);
        var hash = wrapHash(selectedValues), sourceItems = this.multiData ? this.multiData.getAxis('Default').getRootPoint().getChildren() : [], key = 1, createDestNode = (sourceNode) => {
            var dataItem = {};
            dataItem[KEY_EXPR] = key++;
            dataItem[VALUE_EXPR] = sourceNode.getUniqueValue();
            dataItem[encodeHtml || !LegacySettings.useLegacyTreeView ? 'text' : 'html'] = sourceNode.getDisplayText();
            if (LegacySettings.useLegacyTreeView) {
                dataItem['expanded'] = this.viewModel.AutoExpandNodes;
            }
            return dataItem;
        }, walkTree = (sourceNode, destNodeItems, branch, nullChildCount) => {
            var children = sourceNode.getChildren();
            var nextNull = 0;
            while (children.length == 1 && children[0].getUniqueValue() === specialValues.olapNullValueGuid) {
                children = children[0].getChildren();
                nextNull++;
            }
            var hasChildren = (children && children.length !== 0), subDestNode = createDestNode(sourceNode), currentBranch = branch.slice();
            subDestNode.nullChildCount = nextNull;
            for (var a = 0; a < nullChildCount; a++)
                currentBranch.push(specialValues.olapNullValueGuid);
            currentBranch.push(subDestNode.value);
            destNodeItems.push(subDestNode);
            if (hasChildren) {
                subDestNode.items = [];
                children.forEach(node => {
                    walkTree(node, subDestNode.items, currentBranch, nextNull);
                });
            }
            else {
                for (var a = 0; a < nextNull; a++)
                    currentBranch.push(specialValues.olapNullValueGuid);
                if (LegacySettings.useLegacyTreeView) {
                    subDestNode.selected = !!hash[currentBranch];
                }
                else {
                    if (!!hash[currentBranch]) {
                        this.selection.push(subDestNode[KEY_EXPR]);
                    }
                }
            }
        };
        sourceItems.forEach(sourceItem => {
            walkTree(sourceItem, this.dataSource, [], 0);
        });
    }
    getInteractionValues(elements, selectedValues) {
        if (!LegacySettings.useLegacyTreeView)
            return elements;
        var hash = wrapHash(selectedValues), parent = elements.length ? elements[0].parent : undefined, rootBranch = [], resultSelection = [], prepareSelectionItems = (items, parentBranch) => {
            items.forEach(item => {
                var itemBranch = parentBranch.slice(), value = this._getDataValue(item), nullChildCount = this._getDataNullChildCount(item);
                itemBranch.push(value);
                for (var a = 0; a < nullChildCount; a++)
                    itemBranch.push(specialValues.olapNullValueGuid);
                if (!!item.items && item.items.length) {
                    prepareSelectionItems(item.items, itemBranch);
                }
                else {
                    var isSelected = !!hash[itemBranch];
                    if ((!LegacySettings.useLegacyTreeView && !isSelected) ||
                        (LegacySettings.useLegacyTreeView && ((item.selected && !isSelected) || (!item.selected && isSelected)))) {
                        resultSelection.push(itemBranch);
                    }
                }
            });
        };
        while (parent) {
            rootBranch.splice(0, 0, this._getDataValue(parent));
            parent = parent.parent;
        }
        prepareSelectionItems(elements, rootBranch);
        return resultSelection;
    }
    _updateSelection(selectedValues) {
        var hash = wrapHash(selectedValues);
        var updateItemsSelectedState = (items, parentBranch) => {
            items.forEach(item => {
                var itemBranch = parentBranch.slice(), value = this._getDataValue(item), nullChildCount = this._getDataNullChildCount(item);
                itemBranch.push(value);
                for (var a = 0; a < nullChildCount; a++)
                    itemBranch.push(specialValues.olapNullValueGuid);
                if (item.items && item.items.length) {
                    updateItemsSelectedState(item.items, itemBranch);
                }
                else {
                    if (LegacySettings.useLegacyTreeView) {
                        item.selected = !!hash[itemBranch];
                    }
                    else {
                        if (!!hash[itemBranch]) {
                            this.selection.push(item[KEY_EXPR]);
                        }
                    }
                }
            });
        };
        updateItemsSelectedState(this.dataSource, []);
    }
    _getDataNullChildCount(wrappedValue) {
        var itemData = (wrappedValue && wrappedValue.itemData) || wrappedValue;
        if (itemData['nullChildCount'] != null)
            return itemData['nullChildCount'];
        return 0;
    }
}
