/**
* DevExpress Dashboard (_item-data-manager.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { dataStorage } from '../../data-storage/_data-storage';
import { itemDataAxisNames } from '../item-data-axis-names';
import { itemData } from '../_item-data';
import { itemDataAxisBuilder, pivotAreaNames } from './_item-data-axis-builder';
import { itemDataAxisHelper } from './_item-data-axis-helper';
import { itemMetaData } from './_item-meta-data';
export class itemDataManager {
    initialize(itemDataDTO) {
        var metaData = this._createMetaData(itemDataDTO.MetaData), ds = new dataStorage(itemDataDTO.DataStorageDTO), items = {};
        let axes = metaData.getAxes();
        Object.keys(axes).forEach((name) => {
            items[name] = itemDataAxisBuilder.build(name, ds, axes[name], itemDataDTO.SortOrderSlices, metaData);
        });
        this._dataStorage = ds;
        this._metaData = metaData;
        this._itemData = new itemData(metaData, ds, items);
        this._items = items;
    }
    updateExpandedData(expandedItemDataDTO, expandInfo) {
        var that = this, areaNames = itemDataAxisNames, sortOrderSlices = expandedItemDataDTO.SortOrderSlices, area = expandInfo.pivotArea == pivotAreaNames.columns ? areaNames.pivotColumnAxis : areaNames.pivotRowAxis, values = expandInfo.values, metaData = that._metaData, ds = new dataStorage(expandedItemDataDTO.DataStorageDTO);
        var iterators = that._dataStorage.insert(ds, sortOrderSlices);
        var expandedAreaNewRootItem = itemDataAxisBuilder.build(area, that._dataStorage, metaData.getAxes()[area], sortOrderSlices, metaData, iterators);
        if (!!expandedAreaNewRootItem) {
            var expandedAreaRootItem = that._items[area], expandedItem = itemDataAxisHelper.findFirstPointByUniqueValues(expandedAreaRootItem, values), expandedNewItem = itemDataAxisHelper.findFirstPointByUniqueValues(expandedAreaNewRootItem, values);
            if (!!expandedNewItem) {
                var newChildren = expandedNewItem.getChildren();
                newChildren.forEach((child) => {
                    child._setParent(expandedItem);
                });
                expandedItem._setChildren(newChildren);
            }
        }
    }
    updateTotals(expandedItemDataDTO) {
        const totalSliceKeyIds = [];
        let ds = new dataStorage(expandedItemDataDTO.DataStorageDTO);
        this._dataStorage.insertSlice(ds, totalSliceKeyIds);
    }
    getDataStorage() {
        return this._dataStorage;
    }
    getItemData() {
        return this._itemData;
    }
    getMetaData() {
        return this._metaData;
    }
    _createMetaData(metaDataDTO) {
        var metaData = new itemMetaData(metaDataDTO);
        metaData.initialize();
        return metaData;
    }
}
