/**
* DevExpress Dashboard (_jquery-helpers.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import config from 'devextreme/core/config';
import * as $ from 'jquery';
export const $promiseAdapter = (promise) => promise;
export const $unwrap = (element) => {
    if (element.jquery || element.dxRenderer) {
        return element[0];
    }
    else {
        return element;
    }
};
export const $wrap = (element) => $.fn.constructor(element);
export const wrapPublicElement = (element) => (config().useJQuery ? $wrap(element) : element);
export const extend = (target, source1, ...sources) => $.extend(target, source1, ...sources);
export const deepExtend = (target, ...sources) => $.extend(true, target, ...sources);
export const isPlainObject = (object) => $.isPlainObject(object);
export const getWidth = (element) => $.fn.constructor(element).width();
export const getHeight = (element) => $.fn.constructor(element).height();
export const getOuterWidth = (element) => $.fn.constructor(element).outerWidth();
export const getOuterHeight = (element) => $.fn.constructor(element).outerHeight();
export const wrapInner = (element, wrappingElement) => $.fn.constructor(element).wrapInner(wrappingElement);
export const accessJQueryData = function (element, key, value) {
    if (arguments.length > 2) {
        $.fn.constructor(element).data(key, value);
    }
    else {
        return $.fn.constructor(element).data(key);
    }
};
export const isVisible = (element) => $.fn.constructor(element).is(':visible');
export const closest = (element, css) => {
    var node = element;
    var matches = node.matches || node.matchesSelector || node.webkitMatchesSelector || node.mozMatchesSelector || node.msMatchesSelector || node.oMatchesSelector;
    while (node) {
        if (matches.apply(node, [css]))
            return node;
        node = closestParentElement(node);
    }
    return null;
};
const closestParentElement = (node) => {
    while (node && !node.parentElement) {
        node = node.parentNode;
    }
    return node ? node.parentElement : null;
};
export const createJQueryCallbacks = () => $.Callbacks();
export const createJQueryDeferred = () => $.Deferred();
export const jqueryWhen = (...promises) => $.when(...promises);
export const jqueryWhenArray = (promises) => $.when.apply($.when, promises);
export const jqueryQueryParam = (value) => $.param(value);
export const jqueryOffset = (element) => $.fn.constructor(element).offset();
export const createJQueryElement = (element, options) => $.fn.constructor(element, options);
