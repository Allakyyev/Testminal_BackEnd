/**
* DevExpress Dashboard (_interactivity-controller.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import Class from 'devextreme/core/class';
import { createJQueryCallbacks } from '../../data/_jquery-helpers';
import { allowSelectValue, checkArrayContainsTuple } from '../../data/_utils';
export let dashboardSelectionMode = {
    none: 'None',
    single: 'Single',
    multiple: 'Multiple'
};
export let interactivityController = Class.inherit({
    ctor: function ctor(getTuples) {
        var that = this;
        that._getTuples = getTuples;
        that.selectionChanged = createJQueryCallbacks();
    },
    clickAction: function (tuples, isEmpty = false) {
        if (isEmpty) {
            this.selectionChanged.fire(null);
        }
        else if (this.selectionMode !== dashboardSelectionMode.none) {
            var that = this, isMultipleMode = that.selectionMode === dashboardSelectionMode.multiple, currentTuples = isMultipleMode ? that._getTuples().slice() : [], selectedTuples = [], changed = false;
            tuples.forEach(tuple => {
                if (that._allowSelectTuple(tuple)) {
                    var arrayIndex = isMultipleMode ? checkArrayContainsTuple(currentTuples, tuple) : undefined;
                    if (arrayIndex == undefined) {
                        selectedTuples.push(tuple);
                    }
                    else {
                        currentTuples.splice(arrayIndex, 1);
                    }
                    changed = true;
                }
            });
            if (changed) {
                that.selectionChanged.fire(currentTuples.concat(selectedTuples));
            }
        }
    },
    setOptions: function (selectionMode) {
        this.selectionMode = selectionMode;
    },
    _allowSelectTuple: function (tuple) {
        var allowSelect = true;
        tuple.forEach(axisValue => {
            if (!allowSelectValue(axisValue.value)) {
                allowSelect = false;
                return false;
            }
        });
        return allowSelect;
    }
});
