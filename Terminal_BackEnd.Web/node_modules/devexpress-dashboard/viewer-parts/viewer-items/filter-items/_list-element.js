/**
* DevExpress Dashboard (_list-element.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import dxList from 'devextreme/ui/list';
import { KEY_EXPR } from '../../../data/data-controllers/_filter-element-data-controller';
import { getLocalizationById } from '../../../data/localization/_default';
import { $unwrap } from '../../../data/_jquery-helpers';
import { localizationId } from '../../../data/_localization-ids';
import { ALL_ELEMENT, localizer } from '../../../data/_localizer';
import { filterElementBaseItem } from './_base-element';
export let cssListBoxClassNames = {
    borderVisible: 'dx-list-border-visible',
    separatorHidden: 'dx-list-item-separator-hidden',
    list: 'dx-dashboard-list',
    item: 'dx-dashboard-list-item',
    emptyMessage: 'dx-dashboard-empty-message',
};
export class listFilterElement extends filterElementBaseItem {
    constructor(container, options) {
        super(container, options);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    get filterDataController() { return this._dataController; }
    _setSelectionUnsafe(values) {
        super._setSelectionUnsafe(values);
        this._lock();
        try {
            this.widget.option('selectedItems', this._getSelection());
        }
        finally {
            this._unlock();
        }
    }
    _clearSelectionUnsafe() {
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            try {
                this.widget.unselectAll();
            }
            finally {
                this._unlock();
            }
        }
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = super._generateInnerBorderClassesUnsafe(element);
        if (!this._isPaneEmpty()) {
            classes.push(cssListBoxClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(cssListBoxClassNames.item);
            }
            else {
                element.classList.add(cssListBoxClassNames.item);
            }
        }
        return classes;
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        super.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        let widgetElement = $unwrap(this.widget.element());
        widgetElement.classList.add(cssListBoxClassNames.separatorHidden);
        if (this._isPaneEmpty() && this.visualMode !== 'content') {
            widgetElement.classList.add(cssListBoxClassNames.borderVisible);
        }
        else {
            widgetElement.classList.remove(cssListBoxClassNames.borderVisible);
        }
        return false;
    }
    _getWidgetName() {
        return 'dxList';
    }
    _createWidget(div, opts) {
        div.classList.add(cssListBoxClassNames.list, cssListBoxClassNames.emptyMessage);
        return new dxList(div, opts);
    }
    _getSelection() {
        return !this.isMultiSelectable && this._dataController.selection.length > 1 ? [this._dataController.selection[0]] : this._dataController.selection;
    }
    _getOptions(includeActions) {
        var that = this;
        return {
            dataSource: that.getDataSource(),
            selectedItems: that._getSelection(),
            showSelectionControls: true,
            focusStateEnabled: false,
            hoverStateEnabled: true,
            keyExpr: KEY_EXPR,
            searchEnabled: that._enableSearch,
            searchEditorOptions: {
                placeholder: localizer.getString(localizationId.SearchNullValuePrompt)
            },
            encodeNoDataText: true,
            noDataText: getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            selectionMode: that.isMultiSelectable ? 'all' : 'single',
            selectAllMode: 'allPages',
            selectAllText: ALL_ELEMENT.text,
            pageLoadMode: 'scrollBottom',
            onOptionChanged: (e) => {
                if (e.name == 'searchEnabled')
                    e.component.option('searchValue', undefined);
            },
            onSelectionChanged: !includeActions ? undefined : function (e) {
                if (that.isMultiSelectable && e.removedItems.length > 0) {
                    that._raiseItemClick(e.removedItems);
                }
                else {
                    that._raiseItemClick(e.addedItems);
                }
            }
        };
    }
}
