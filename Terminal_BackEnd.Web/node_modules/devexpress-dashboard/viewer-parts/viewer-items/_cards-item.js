/**
* DevExpress Dashboard (_cards-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { deepExtend } from '../../data/_jquery-helpers';
import { KpiValueMode } from '../../data/_utils';
import { CardWidgetImplementation } from '../_card-widget-implementation';
import { cardItemStyleSettingsProvider } from '../conditional-formatting/_style-settings-provider';
import { cardLayout } from '../widgets/widgets-viewer/cards/_card-layout';
import { CardsViewer } from '../widgets/widgets-viewer/cards/_cards-viewer';
import { cssClassNamesBaseItem } from './_base-item';
import { kpiItem } from './_kpi-item';
export class cardsItem extends kpiItem {
    constructor(container, options) {
        super(container, options);
        this.useNewViewer = options.ViewModel.HasLayout;
        this._hasSparkline = false;
        this.apiHandlers = new CardWidgetImplementation(() => { this.renderContentUnsafe(this.contentRoot, true, () => { }); });
        this._styleSettingsProvider = new cardItemStyleSettingsProvider(this.container);
        this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
    }
    get dataController() { return this._dataController; }
    set dataController(dataController) { this._dataController = dataController; }
    _initializeData(newOptions) {
        super._initializeData(newOptions);
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
        }
    }
    renderContentUnsafe(element, changeExisting, afterRenderCallback) {
        this._hasSparkline = false;
        if (this.options.ViewModel.HasLayout != this.useNewViewer && this.widgetsViewer != null) {
            this.widgetsViewer.clear();
            this.widgetsViewer = null;
        }
        this.useNewViewer = this.options.ViewModel.HasLayout;
        this.disposeLayoutCollection();
        this.initializeLayoutCollection();
        super.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        this.apiHandlers._element = this.widgetsViewer.element();
        return false;
    }
    createWidgetViewer(element, options) {
        if (this.useNewViewer)
            return new CardsViewer(element, options);
        else
            return super.createWidgetViewer(element, options);
    }
    initializeLayoutCollection() {
        this.layoutCollection = {};
        if (this.options.ViewModel.HasLayout) {
            var cards = this.options.ViewModel.Cards;
            cards.forEach(card => {
                var layout = new cardLayout(this.apiHandlers);
                layout.fill(card.Layout);
                this.layoutCollection[card.ID] = layout;
            });
        }
    }
    _isPaneEmpty() {
        return super._isPaneEmpty() || !this.hasCaption();
    }
    _isBorderRequired() {
        return false;
    }
    _isTransparentBackground() {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    }
    _getSpecificWidgetViewerOptions() {
        let specificOptions = {};
        specificOptions.viewer = {
            ignorePadding: this._getIgnorePadding(),
            controlContainer: this.options.controlContainer,
        };
        var layoutsArray = [];
        for (var layoutKey in this.layoutCollection) {
            layoutsArray.push(this.layoutCollection[layoutKey]);
        }
        specificOptions.itemOptions = {
            hasSparkline: this._hasSparkline,
            layouts: layoutsArray
        };
        specificOptions.styleSettingsProvider = this._styleSettingsProvider;
        return deepExtend(specificOptions, super._getSpecificWidgetViewerOptions());
    }
    _getIgnorePadding() {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    }
    _getWidgetType() {
        return 'card';
    }
    _getElementsName() {
        return 'Cards';
    }
    setOldCardProperties(sourceItem, cardModel, props) {
        var captions = props.getCaptions(), sparklineOptions, indicatorType, isGood;
        if (cardModel.DataItemType === KpiValueMode.Measure) {
            sourceItem.mainValue = {
                type: undefined,
                hasPositiveMeaning: undefined,
                text: {
                    value: props.getMeasureDisplayText(),
                    useDefaultColor: cardModel.IgnoreDeltaColor
                }
            };
        }
        else {
            indicatorType = props.getIndicatorType();
            isGood = props.getIsGood();
            sourceItem.mainValue = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getMainValueText(),
                    useDefaultColor: cardModel.IgnoreDeltaColor
                }
            };
            sourceItem.variableValue1 = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getSubValue1Text(),
                    useDefaultColor: cardModel.IgnoreSubValue1DeltaColor
                }
            };
            sourceItem.variableValue2 = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getSubValue2Text(),
                    useDefaultColor: cardModel.IgnoreSubValue2DeltaColor
                }
            };
        }
        if (cardModel.ShowSparkline) {
            sparklineOptions = props.getSparklineOptions();
            this._hasSparkline = !!sparklineOptions;
            if (this._hasSparkline) {
                sourceItem.sparklineOptions = sparklineOptions;
            }
        }
        if (captions.length > 0) {
            sourceItem.title = captions.pop();
            sourceItem.subTitle = captions.length != 0 ? captions.join(' - ') : undefined;
        }
    }
    setNewCardProperties(sourceItem, cardModel, props) {
        sourceItem.layout = this.layoutCollection[cardModel.ID];
        sourceItem.dataAccessor = props;
    }
    _setSourceItemProperties(sourceItem, cardModel, props) {
        super._setSourceItemProperties(sourceItem, cardModel, props);
        if (this.useNewViewer)
            this.setNewCardProperties(sourceItem, cardModel, props);
        else
            this.setOldCardProperties(sourceItem, cardModel, props);
    }
    _getWidget() {
        return this.useNewViewer ? this.apiHandlers : undefined;
    }
    _generateInnerBorderClassesUnsafe(element) {
        var classes = super._generateInnerBorderClassesUnsafe(element);
        var cardWithoutBackground = !this.hasParentContainer() && !this.hasCaption();
        if (cardWithoutBackground) {
            classes.push(cssClassNamesBaseItem.cardWihtoutBackground);
        }
        if (element) {
            cardWithoutBackground ?
                element.classList.add(cssClassNamesBaseItem.cardWihtoutBackground) :
                element.classList.remove(cssClassNamesBaseItem.cardWihtoutBackground);
        }
        return classes;
    }
    dispose() {
        super.dispose();
        this.disposeLayoutCollection();
        this._styleSettingsProvider.dispose();
    }
    disposeLayoutCollection() {
        if (this.layoutCollection) {
            for (var key in this.layoutCollection) {
                if (this.layoutCollection.hasOwnProperty(key))
                    this.layoutCollection[key].dispose();
            }
        }
        this.layoutCollection = null;
    }
}
