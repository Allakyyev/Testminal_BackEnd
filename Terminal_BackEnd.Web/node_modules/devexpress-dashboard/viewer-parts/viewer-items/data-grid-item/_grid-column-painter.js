/**
* DevExpress Dashboard (_grid-column-painter.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { isEmpty as isEmptyString } from 'devextreme/core/utils/string';
import 'devextreme/viz/bullet';
import dxBullet from 'devextreme/viz/bullet';
import 'devextreme/viz/sparkline';
import dxSparkline from 'devextreme/viz/sparkline';
import * as $ from 'jquery';
import { extend } from '../../../data/_jquery-helpers';
import { isVulnerable, renderImage, tooltipContainerSelector } from '../../../data/_utils';
import { zIndex } from '../../../data/_z-index';
import { DeltaIndicator } from '../../widgets/indicators/_delta-indicator';
import { SimpleIndicator } from '../../widgets/indicators/_simple-indicator';
import { RenderHelper } from '../../widgets/_render-helper';
export class GridColumnPainter {
    static renderDelta(parentContainer, deltaValue, isDetail) {
        let container = document.createElement('div');
        container.classList.add(this.CssClasses.flexDeltaParent);
        container.classList.add(DeltaIndicator.getIndicatorColorType(deltaValue.type, deltaValue.hasPositiveMeaning, deltaValue.text.useDefaultColor));
        if (!isDetail) {
            container.classList.add(this.CssClasses.rightAlignment);
        }
        parentContainer.appendChild(container);
        let textDiv = document.createElement('div');
        textDiv.classList.add(this.CssClasses.truncated);
        textDiv.innerText = deltaValue.text.value;
        container.appendChild(textDiv);
        let indicatorDiv = document.createElement('div');
        indicatorDiv.classList.add(this.CssClasses.fixed);
        indicatorDiv.classList.add(this.CssClasses.deltaIndicator);
        indicatorDiv.innerHTML = SimpleIndicator.getIndicator(deltaValue.type, deltaValue.hasPositiveMeaning) || '';
        container.appendChild(indicatorDiv);
    }
    static renderSparkline(name, showStartEndValues, parentContainer, sparklineData) {
        let container = document.createElement('div');
        container.classList.add(name + '_sparkline-container');
        container.classList.add(this.CssClasses.flexParent);
        parentContainer.appendChild(container);
        let sparklineDiv = document.createElement('div');
        sparklineDiv.classList.add(name + '_sparkline');
        container.appendChild(sparklineDiv);
        if (showStartEndValues) {
            let startDiv = document.createElement('div');
            startDiv.classList.add(this.CssClasses.sparklineStartValue);
            startDiv.classList.add(name + '_startValue');
            startDiv.innerText = sparklineData.startText;
            $.fn.constructor(startDiv).prependTo(container);
            let endDiv = document.createElement('div');
            endDiv.classList.add(name + '_endValue');
            endDiv.innerText = sparklineData.endText;
            container.appendChild(endDiv);
        }
        extend(sparklineData.sparkline, {
            size: {
                height: 20,
                width: 10
            },
            pointSize: 1
        });
        new dxSparkline(sparklineDiv, sparklineData.sparkline);
    }
    static renderBar(columnName, parentContainer, tooltipText, value, zeroValue) {
        let zerovalue = zeroValue;
        let barContainer = document.createElement('div');
        barContainer.classList.add(this.CssClasses.flexParent);
        barContainer.classList.add(columnName + '_bar-container');
        parentContainer.appendChild(barContainer);
        let barDiv = document.createElement('div');
        barDiv.classList.add(columnName + '_bar');
        barContainer.appendChild(barDiv);
        new dxBullet(barDiv, {
            startScaleValue: -zerovalue,
            endScaleValue: 1 - zerovalue,
            value: value,
            showZeroLevel: value !== 0 && zerovalue !== 0 && zerovalue !== 1,
            showTarget: false,
            onIncidentOccurred: RenderHelper.widgetIncidentOccurred,
            tooltip: {
                container: tooltipContainerSelector,
                customizeTooltip: function () {
                    return {
                        text: tooltipText
                    };
                },
                zIndex: zIndex.dashboardItemTooltips
            },
            size: {
                height: 20,
                width: 10
            }
        });
    }
    static renderImage(container, imageData) {
        renderImage(container, imageData);
    }
    static renderHyperlink(container, uri, displayValue, isEncodeHtml) {
        if (uri) {
            let a = document.createElement('a');
            a.target = '_blank';
            a.onclick = (event) => event.stopPropagation();
            a.rel = 'noopener noreferrer';
            a.href = isVulnerable(uri) ? '' : uri;
            RenderHelper.html(a, displayValue, isEncodeHtml);
            container.appendChild(a);
        }
        else {
            RenderHelper.html(container, displayValue, isEncodeHtml);
        }
    }
    static renderValue(container, text, isEncodeHtml) {
        if (isEmptyString(text)) {
            RenderHelper.html(container, '&nbsp;', false);
        }
        else {
            RenderHelper.html(container, text, isEncodeHtml);
        }
    }
    static changeGridSparklineColumnsWidth(gridRootElement, columnName) {
        var that = this, startValues = gridRootElement.querySelectorAll('.' + columnName + '_startValue'), endValues = gridRootElement.querySelectorAll('.' + columnName + '_endValue'), maxStartWidth = that.calcMaxWidth(startValues), maxEndWidth = that.calcMaxWidth(endValues), sparklineDivs = gridRootElement.querySelectorAll('.' + columnName + '_sparkline'), firstsparklineContainer = $.fn.constructor(gridRootElement.querySelectorAll('.' + columnName + '_sparkline-container')).filter(':visible').get(0), columnWidth = firstsparklineContainer ? $.fn.constructor(firstsparklineContainer).width() : 0, sparklineWidth = columnWidth - (maxStartWidth + maxEndWidth);
        if (sparklineWidth >= 0) {
            $.fn.constructor(startValues).width(maxStartWidth);
            $.fn.constructor(endValues).width(maxEndWidth);
            $.fn.constructor(startValues).show();
            $.fn.constructor(endValues).show();
            for (let i = 0; i < sparklineDivs.length; i++) {
                let sparklineContainer = sparklineDivs[i];
                let sparkline = dxSparkline.getInstance(sparklineContainer);
                sparkline.option('size', { width: sparklineWidth });
                $.fn.constructor(sparklineContainer).show();
            }
        }
        else {
            sparklineDivs.forEach(sparklineDiv => {
                $.fn.constructor(sparklineDiv).hide();
            });
            if (columnWidth >= maxStartWidth + maxEndWidth) {
                $.fn.constructor(startValues).show();
            }
            else {
                $.fn.constructor(startValues).hide();
                if (columnWidth >= maxEndWidth) {
                    $.fn.constructor(endValues).show();
                }
                else {
                    $.fn.constructor(endValues).hide();
                }
            }
        }
    }
    static calcMaxWidth(values) {
        var maxWidth = 0;
        var nodeLen = values.length;
        for (let i = 0; i < nodeLen; ++i) {
            maxWidth = Math.max(maxWidth, values[i].offsetWidth);
        }
        return maxWidth;
    }
    static changeGridBarColumnsWidth(gridRootElement, columnName) {
        var that = this, bars = gridRootElement.querySelectorAll('.' + columnName + '_bar'), firstBarContainer = $.fn.constructor(gridRootElement.querySelectorAll('.' + columnName + '_bar-container')).filter(':visible').get(0), columnWidth = firstBarContainer ? $.fn.constructor(firstBarContainer).width() : 0;
        for (let i = 0; i < bars.length; ++i) {
            let barContainer = bars[i];
            if (columnWidth > 0) {
                $.fn.constructor(barContainer).show();
                let bullet = dxBullet.getInstance(barContainer);
                bullet.option('size', {
                    width: columnWidth
                });
            }
            else {
                $.fn.constructor(barContainer).hide();
            }
        }
    }
}
GridColumnPainter.CssClasses = {
    flexParent: 'dx-dashboard-flex-parent',
    flexDeltaParent: 'dx-dashboard-flex-delta-parent',
    sparklineStartValue: 'dx-dashboard-sparkline-start-value',
    deltaIndicator: 'dx-dashboard-delta-indicator',
    truncated: 'dx-dashboard-truncated',
    fixed: 'dx-dashboard-fixed',
    rightAlignment: 'dx-dashboard-flex-right'
};
