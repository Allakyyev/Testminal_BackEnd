/**
* DevExpress Dashboard (_grid-filter-patcher.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { getLocalizationById } from '../../../data/localization/_default';
export const allowedStringOperations = ['contains', 'notcontains', 'startswith', 'endswith', '=', '<>'];
export function getCaseSensitiveFilterExpression(cellValue, filterValue, filterOperation) {
    if (typeof cellValue !== 'string')
        return false;
    switch (filterOperation) {
        case 'contains':
            return cellValue.indexOf(filterValue) > -1;
        case 'notcontains':
            return cellValue.indexOf(filterValue) === -1;
        case 'startswith':
            return cellValue.startsWith(filterValue);
        case 'endswith':
            return cellValue.endsWith(filterValue);
        case '=':
            return cellValue === filterValue;
        case '<>':
            return cellValue !== filterValue;
    }
}
export const getFilterRowLocalizationOptions = () => ({
    applyFilterText: getLocalizationById('DashboardWebStringId.Grid.FilterClause.ApplyFilter'),
    betweenEndText: getLocalizationById('DashboardWebStringId.Grid.FilterClause.BetweenEnd'),
    betweenStartText: getLocalizationById('DashboardWebStringId.Grid.FilterClause.BetweenStart'),
    resetOperationText: getLocalizationById('DashboardWebStringId.Grid.FilterClause.ResetOperation'),
    operationDescriptions: {
        between: getLocalizationById('DashboardWebStringId.Grid.FilterClause.Between'),
        contains: getLocalizationById('DashboardWebStringId.Grid.FilterClause.Contains'),
        endsWith: getLocalizationById('DashboardWebStringId.Grid.FilterClause.EndsWith'),
        equal: getLocalizationById('DashboardWebStringId.Grid.FilterClause.Equals'),
        greaterThan: getLocalizationById('DashboardWebStringId.Grid.FilterClause.Greater'),
        greaterThanOrEqual: getLocalizationById('DashboardWebStringId.Grid.FilterClause.GreaterOrEqual'),
        lessThan: getLocalizationById('DashboardWebStringId.Grid.FilterClause.Less'),
        lessThanOrEqual: getLocalizationById('DashboardWebStringId.Grid.FilterClause.LessOrEqual'),
        notContains: getLocalizationById('DashboardWebStringId.Grid.FilterClause.DoesNotContain'),
        notEqual: getLocalizationById('DashboardWebStringId.Grid.FilterClause.DoesNotEqual'),
        startsWith: getLocalizationById('DashboardWebStringId.Grid.FilterClause.StartsWith'),
    }
});
