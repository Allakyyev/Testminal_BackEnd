/**
* DevExpress Dashboard (_widget-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { deepExtend, isVisible } from '../../../data/_jquery-helpers';
import { BaseWidgetItem } from './_base-widget-item';
import { widgetItemFactory } from './_widget-item-factory';
export class WidgetItem extends BaseWidgetItem {
    constructor(itemData, options) {
        super(WidgetItem.ensureOptions(options));
        this._widgetType = String(this._options.widgetType || '').toLowerCase();
        this._itemData = itemData || {};
        this._itemData.encodeHtml = this._options.encodeHtml;
        this._itemData.redrawOnResize = false;
    }
    static ensureOptions(options) {
        options = options || {};
        options.type = 'widgetItem';
        return options;
    }
    dispose() {
        var that = this;
        BaseWidgetItem.prototype.dispose.apply(that, arguments);
        that._itemData = null;
        this._disposeWidget();
    }
    _disposeWidget() {
        if (this._widget) {
            this._widget.dispose();
            this._widget = null;
        }
    }
    _getDefaultOptions() {
        return deepExtend({}, BaseWidgetItem.prototype._getDefaultOptions.apply(this, arguments), {
            style: {
                borderStyle: 'solid',
                borderColor: '#ffffff'
            }
        });
    }
    detachItem() {
        var itemDiv = this._itemDiv;
        if (itemDiv && itemDiv.parentElement) {
            itemDiv.parentElement.removeChild(itemDiv);
        }
    }
    initDraw(width, height, index) {
        this._disposeWidget();
        return super.initDraw(width, height, index);
    }
    draw(width, height, index) {
        super.draw(width, height, index);
        var that = this, itemDiv;
        itemDiv = that._itemDiv;
        itemDiv.style.margin = 'auto';
        this._options.itemWidgetOptionsPrepared(that._itemData);
        that._widget = widgetItemFactory.createWidget(that._widgetType, itemDiv, that._itemData);
        return itemDiv;
    }
    resize(width, height, index) {
        if (!this._itemDiv.childNodes.length) {
            return this.draw(width, height, index);
        }
    }
    rerender(drawOptions) {
        var that = this, options;
        if (that._widget) {
            options = widgetItemFactory.getAdditionalOptions(that._widgetType, that._itemDiv, that._itemData);
            options && deepExtend(that._widget._options, options);
            if (isVisible(that._itemDiv)) {
                that._widget.render(drawOptions);
            }
        }
    }
    getWidget() {
        return this._widget;
    }
}
