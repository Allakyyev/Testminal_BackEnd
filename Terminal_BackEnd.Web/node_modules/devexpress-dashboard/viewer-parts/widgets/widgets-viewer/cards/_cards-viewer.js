/**
* DevExpress Dashboard (_cards-viewer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import dxScrollView from 'devextreme/ui/scroll_view';
import * as $ from 'jquery';
import { $unwrap, $wrap } from '../../../../data/_jquery-helpers';
import { cssClassNames, layoutCardCssClassNames } from '../_css-class-names';
import { WidgetsViewerBase } from '../_widgets-viewer-base';
import { ArrangementStrategy } from './_arrangement-strategy';
import { cardArrangementTableGenerator } from './_card-arrangement-table-generator';
import { CardVirtualizationController } from './_card-virtualization-controller';
import { newCardItem } from './_new-card-item';
var viewerCount = 0;
export class CardsViewer extends WidgetsViewerBase {
    constructor(element, options) {
        super(element, options);
    }
    get _styleSettingsProvider() {
        return this.option('styleSettingsProvider');
    }
    redraw() {
        this._render();
    }
    _getDefaultOptions() {
        return {};
    }
    getSelectedItems() {
        return this.itemsList.filter(item => item.selected());
    }
    clearSelections() {
        this.itemsList.forEach(item => item.clearSelection());
    }
    getSizeParams() {
        return this.virtualizer.getSizeParams();
    }
    clear() {
        this.container.remove();
    }
    dispose() {
        super.dispose();
        (this.itemsList || []).forEach(item => item.dispose());
        this.clear();
    }
    _init() {
        this._viewerID = viewerCount++;
        this.tableStruct = $.fn.constructor('<div>', { 'class': cssClassNames.widgetViewerTable + ' ' + cssClassNames.widgetViewerIdPrefix + this._viewerID });
        this.initContainer();
        this.container.append(this.tableStruct);
        this.container.addClass(cssClassNames.widgetViewerContainer);
        var scrollView = new dxScrollView($unwrap(this.container), {
            direction: 'both',
            showScrollbar: 'onHover'
        });
        this.addDisposable(this.virtualizer = new CardVirtualizationController(this.tableStruct, scrollView));
        this.createItems();
        this.createArranger();
        this._render();
    }
    _update() {
        this.createItems();
        this.createArranger();
        this._render();
    }
    initContainer() {
        this.container = $.fn.constructor('<div>').appendTo($wrap(this.element()));
        this.container.addClass(layoutCardCssClassNames.cardScrollableHolder);
    }
    createItems() {
        var that = this, data = that.option('dataSource');
        var viewer = this.option('viewer');
        var clickHandler = viewer.onclick, hoverHandler = viewer.onhover, controlContainer = viewer.controlContainer;
        that.itemsList = [];
        data.forEach((dataItem, index) => {
            that.itemsList.push(new newCardItem(dataItem, index, { clickHandler, hoverHandler, controlContainer }));
        });
    }
    _render(drawOptions) {
        this.virtualizer.updateScrollableContent(() => {
            this.invalidateContent();
            this.drawCards();
        });
    }
    invalidateContent() {
        this.createItems();
        this.tableStruct.empty();
    }
    drawCards() {
        var parentWidth = this.container.width();
        var parentHeight = this.container.height();
        var layouts = this._option.itemOptions.layouts;
        var ignorePadding = this._option.viewer.ignorePadding;
        var cardArrangements = this.arranger.arrange(parentHeight, parentWidth, this.itemsList.length, layouts, ignorePadding);
        this.tableGenerator = new cardArrangementTableGenerator();
        this.tableGenerator.generateTable(this.tableStruct, cardArrangements);
        this.virtualizer.init(cardArrangements, (startIndex, endIndex) => { this.drawCardsByIndices(startIndex, endIndex); });
    }
    drawCardsByIndices(startIndex, endIndex) {
        this.tableGenerator.drawCellContent(startIndex, endIndex, (container, cardArrangements, index) => {
            return this.itemsList[index].draw(container, cardArrangements, this._styleSettingsProvider);
        });
    }
    createArranger() {
        var viewerOptions = this.option('viewer');
        var method = viewerOptions.method;
        var count = viewerOptions.count;
        if (this.shouldRecreateArranger(method, count))
            this.arranger = ArrangementStrategy.createInstance(method, count);
    }
    shouldRecreateArranger(newArrangement, lineCount) {
        if (this.arranger != null) {
            let currentArrangement = this.arranger.getArrangeMethod();
            if (currentArrangement === 'auto')
                return newArrangement !== 'auto';
            else
                return newArrangement !== currentArrangement || this.arranger.getLineCount() !== lineCount;
        }
        return true;
    }
}
