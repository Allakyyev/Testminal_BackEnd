/**
* DevExpress Dashboard (_new-card-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { cssClassNames } from '../_css-class-names';
import { cardPainter } from './_card-painter';
export let newCardMeasurements = {
    margin: 3,
    padding: 10,
    borderWidth: 1
};
export class newCardItem {
    constructor(properties, cardIndex, viewerOptions) {
        this.properties = properties;
        this.cardPainter = new cardPainter(properties.dataAccessor, viewerOptions.controlContainer);
        this.clickHandler = viewerOptions.clickHandler;
        this.hoverHandler = viewerOptions.hoverHandler;
        this.index = cardIndex;
        this.tag = properties.tag;
    }
    dispose() {
        var _a;
        if (this.itemDiv) {
            this.itemDiv.remove();
            this.itemDiv = null;
        }
        (_a = this.dxElements) === null || _a === void 0 ? void 0 : _a.forEach(x => x === null || x === void 0 ? void 0 : x.dispose());
        this.dxElements = [];
    }
    selected() {
        return this.properties.isSelected;
    }
    setHoverEnabledState(hoverEnabled) {
        this.properties.hoverEnabled = hoverEnabled;
    }
    draw(container, cardArrangements, styleSettingsProvider) {
        if (!this.itemDiv) {
            const { element, disposables } = this.cardPainter.draw(cardArrangements, this.properties.layout, styleSettingsProvider);
            this.itemDiv = element;
            this.dxElements = disposables;
            container.append(element);
            this.afterDraw();
        }
        return this.itemDiv;
    }
    clearSelection() {
        this.properties.isSelected = false;
        if (this.itemDiv) {
            this.itemDiv.removeClass(cssClassNames.selectedItem);
        }
    }
    select() {
        this.properties.isSelected = true;
        if (this.itemDiv) {
            this.itemDiv.addClass(cssClassNames.selectedItem);
        }
    }
    hover(isHover) {
        if (this.properties.hoverEnabled) {
            if (isHover) {
                this.itemDiv.addClass(cssClassNames.hoveredItem);
            }
            else {
                this.itemDiv.removeClass(cssClassNames.hoveredItem);
            }
        }
    }
    setClickHandler() {
        var that = this;
        if (typeof that.clickHandler === 'function' && that.itemDiv) {
            that.itemDiv.off('click.cardItem');
            that.itemDiv.on('click.cardItem', function () {
                that.clickHandler.call(null, { item: that });
            });
        }
    }
    setHoverHandler() {
        var that = this;
        if (that.itemDiv) {
            that.itemDiv.mouseenter(function () {
                that.hover(true);
                if (typeof that.hoverHandler === 'function') {
                    that.hoverHandler.call(null, { item: that, state: true });
                }
            }).mouseleave(function () {
                that.hover(false);
                if (typeof that.hoverHandler === 'function') {
                    that.hoverHandler.call(null, { item: that, state: false });
                }
            });
        }
    }
    afterDraw() {
        this.setClickHandler();
        this.setHoverHandler();
        this.applyExtraStyles();
    }
    applyExtraStyles() {
        this.properties.isSelected ? this.select() : this.clearSelection();
    }
}
