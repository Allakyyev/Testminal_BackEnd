/**
* DevExpress Dashboard (_floating-panel.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import dxOverlay from 'devextreme/ui/overlay/ui.overlay';
import { $unwrap, getOuterWidth } from '../../../data/_jquery-helpers';
import { zIndex } from '../../../data/_z-index';
import { cssClasses } from './_caption-toolbar-css-classes';
export class FloatingPanel {
    constructor(options) {
        this.PREVIEW_TOOLBAR_WIDTH = 15;
        this._maxWidth = undefined;
        let position = options.bottomPosition ? 'bottom right' : 'top right';
        this._container = options.container;
        this._preview = options.preview;
        this._floatingPanelDiv = options.floatingPanelDiv;
        let overlayOptions = {
            shading: false,
            animation: false,
            width: 'auto',
            height: 'auto',
            contentTemplate: (contentElement) => {
                $unwrap(contentElement).appendChild(options.toolbarDiv);
            },
            hideOnOutsideClick: false,
            position: {
                boundary: options.container,
                my: position,
                at: position,
                offset: options.bottomPosition ? '2 2' : '2 -2',
                of: options.container
            },
            onShowing: (e) => {
                var wrapper = $unwrap(e.component._$wrapper);
                var baseZIndex = zIndex.floatingToolbar;
                wrapper.style.zIndex = (options.preview ? baseZIndex : baseZIndex + 1).toString();
                var overlayContent = wrapper.querySelector('.dx-overlay-content');
                if (overlayContent) {
                    overlayContent.style.zIndex = wrapper.style.zIndex + 1;
                }
            },
            wrapperAttr: {
                class: cssClasses.floatingContainer
            }
        };
        overlayOptions = Object.assign(Object.assign({}, overlayOptions), { target: options.container, container: options.container, closeOnSwipe: false, propagateOutsideClick: true });
        this._overlay = new dxOverlay(options.floatingPanelDiv, overlayOptions);
    }
    _getToolbarWidth() {
        return this._preview ? this.PREVIEW_TOOLBAR_WIDTH : this._calculateToolbarWidth();
    }
    _calculateToolbarWidth() {
        if (!this._maxWidth) {
            let toolbarItemGroupsContainer = this._container.querySelector(`.${cssClasses.floatingContainer} .dx-toolbar-items-container`);
            let toolbarItemGroups = toolbarItemGroupsContainer && Array.prototype.slice.call(toolbarItemGroupsContainer.childNodes) || [];
            this._maxWidth = Math.min(getOuterWidth(this._container), toolbarItemGroups
                .filter(child => !!child.innerHTML)
                .reduce((acc, child) => acc + getOuterWidth(child), 0));
        }
        return this._maxWidth;
    }
    show() {
        this._overlay.show();
        this._overlay.option('width', this._getToolbarWidth());
    }
    hide() {
        this._overlay.hide();
    }
    repaint() {
        let newWidth = this._getToolbarWidth();
        if (this._overlay.option('width') === newWidth) {
            this._overlay.repaint();
        }
        else {
            this._overlay.option('width', this._getToolbarWidth());
        }
    }
    isVisible() {
        return this._overlay.option('visible');
    }
    resetSizeCache() {
        this._maxWidth = undefined;
    }
    dispose() {
        this._overlay.dispose();
    }
}
