/**
* DevExpress Dashboard (_floating-toolbar-base.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { arrangeFloatingToolbarItems } from './_caption-toolbar-arranger';
import { DashboardCaptionToolbarBase } from './_caption-toolbar-base';
import { cssClasses } from './_caption-toolbar-css-classes';
import { FloatingPanel } from './_floating-panel';
export class FloatingCaptionToolbarBase extends DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, _isBottomPosition) {
        super(_container, _controlContainer, _popupContainer, encodeHtml);
        this._isBottomPosition = _isBottomPosition;
    }
    set isBottomFloatingTypePosition(isBottom) {
        this._isBottomPosition = isBottom;
    }
    update(options) {
        this._floatingPanel && this._floatingPanel.resetSizeCache();
        return super.update(options);
    }
    calcHeight() {
        return 0;
    }
    onResize() {
        super.onResize();
        if (this._initialized) {
            this._floatingPanel.repaint();
        }
    }
    showFloatingPanel() {
        this._floatingPanel.show();
        this._toolbar.repaint();
    }
    hideFloatingPanel() {
        this._floatingPanel.hide();
        this._toolbar.repaint();
    }
    dispose() {
        super.dispose();
        this._floatingPanel && this._floatingPanel.dispose();
    }
    _appendToContainer(toolbarDiv) {
        let floatingPanelDiv = document.createElement('div');
        floatingPanelDiv.classList.add(cssClasses.floatingContainer);
        this._container.prepend(floatingPanelDiv);
        this._floatingPanel = this._createFloatingPanel(toolbarDiv, floatingPanelDiv, false);
        return floatingPanelDiv;
    }
    _updateToolbar() {
        super._updateToolbar();
        this._repaintFloatingPanel();
    }
    _repaintFloatingPanel() {
        if (this._floatingPanel) {
            this._floatingPanel.repaint();
        }
    }
    _getVisibleItems() {
        return arrangeFloatingToolbarItems(this._options);
    }
    _createInstance() {
        return new FloatingCaptionToolbarBase(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    }
    _getToolbarItems(items) {
        return items.map(item => this._adapter.createToolbarItem(item, this._controlContainer, this._popupContainer, () => this.hideFloatingPanel())).filter(item => item !== undefined);
    }
    _createFloatingPanel(toolbarDiv, floatingPanelDiv, preview) {
        return new FloatingPanel({
            toolbarDiv,
            floatingPanelDiv: floatingPanelDiv,
            preview,
            container: this._container,
            bottomPosition: this._isBottomPosition
        });
    }
}
