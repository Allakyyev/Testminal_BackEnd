/**
* DevExpress Dashboard (_caption-toolbar-base.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { registerBaseBinding } from '@devexpress/analytics-core/analytics-widgets-internal';
import dxToolbar from 'devextreme/ui/toolbar';
import * as $ from 'jquery';
import { $unwrap } from '../../../data/_jquery-helpers';
import { RenderHelper } from '../_render-helper';
import { DashboardCaptionToolbarAdapter } from './_caption-toolbar-adapter';
import { cssClasses } from './_caption-toolbar-css-classes';
import { calcMaxWidth } from './_toolbar-item-size-calculator';
export class DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml = true) {
        this._container = _container;
        this._controlContainer = _controlContainer;
        this._popupContainer = _popupContainer;
        this.encodeHtml = encodeHtml;
        this._className = cssClasses.caption;
        this._disabled = false;
        this._adapter = new DashboardCaptionToolbarAdapter(encodeHtml);
    }
    get _initialized() {
        return this._toolbar !== undefined;
    }
    get _staticItemsClass() {
        return cssClasses.toolbarBefore;
    }
    get element() {
        return this._initialized ? $unwrap(this._toolbar.element()) : undefined;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (this._disabled !== value) {
            this._disabled = value;
            this._updateToolbar();
        }
    }
    update(options) {
        this._options = options;
        let heightChanded = false;
        if (!this._toolbar) {
            this._toolbarDiv = document.createElement('div');
            this._className.split(' ').forEach(className => this._toolbarDiv.classList.add(className));
            if (this._container)
                this._toolbarContainer = this._appendToContainer(this._toolbarDiv);
            this._toolbar = new dxToolbar(this._toolbarDiv, this._getToolbarOptions());
            heightChanded = true;
        }
        else {
            this._updateToolbar();
        }
        return heightChanded;
    }
    calcHeight(options) {
        let toolbar = this._createInstance();
        if (toolbar) {
            this._processToolbarBeforeGettingSize(toolbar);
            toolbar.update(options);
            let height = RenderHelper.getElementBox(toolbar.element).height;
            toolbar.dispose();
            return height;
        }
        return 0;
    }
    calcMinWidth(options) {
        let toolbar = this._createInstance();
        if (toolbar) {
            this._processToolbarBeforeGettingSize(toolbar);
            toolbar.update(options);
            let proccesSize = () => {
                let getWidth = (selector) => {
                    return toolbar.element.querySelector('.' + selector).getBoundingClientRect().width;
                };
                let w = getWidth(cssClasses.toolbarBefore) +
                    getWidth(cssClasses.toolbarCenter) +
                    getWidth(cssClasses.toolbarAfter);
                return w;
            };
            let width = RenderHelper.processElement($.fn.constructor(toolbar.element), proccesSize);
            toolbar.dispose();
            return width;
        }
        return 0;
    }
    onResize() {
        if (this._initialized) {
            this._toolbar.repaint();
            this._resizeStaticToolbarItems();
        }
    }
    dispose() {
        if (this._toolbarContainer) {
            this._toolbarContainer.parentNode && this._toolbarContainer.parentNode.removeChild(this._toolbarContainer);
            this._toolbarContainer = undefined;
        }
        if (this._toolbar) {
            this._toolbar.dispose();
            this._toolbar = undefined;
        }
    }
    _updateToolbar() {
        if (this._toolbar) {
            this._toolbar.option(this._getToolbarOptions());
        }
    }
    _createInstance() {
        return undefined;
    }
    _getToolbarOptions() {
        return {
            items: this._getToolbarItems(this._getVisibleItems()),
            onContentReady: (data) => {
                this._resizeStaticToolbarItems();
            }
        };
    }
    _getVisibleItems() {
        return [];
    }
    _getToolbarItems(items) {
        return items.map(item => this._adapter.createToolbarItem(item, this._controlContainer, this._popupContainer)).filter(item => item !== undefined);
    }
    _appendToContainer(toolbarDiv) {
        $.fn.constructor(this._container).prepend(toolbarDiv);
        return toolbarDiv;
    }
    _resizeStaticToolbarItems(toolbarDiv = this._toolbarDiv) {
        let staticElements = $.fn.constructor(toolbarDiv).find('.' + this._staticItemsClass).find('.' + cssClasses.ellipsisText).toArray();
        let toolbarWidth = $.fn.constructor(toolbarDiv).width();
        if (staticElements.length > 0 && toolbarWidth > 0) {
            let afterSectionWidth = $.fn.constructor(toolbarDiv).find('.' + cssClasses.toolbarAfter).get(0).getBoundingClientRect().width;
            let staticSectionMaxWidth = toolbarWidth - afterSectionWidth;
            let staticSectionWidth = $.fn.constructor(toolbarDiv).find('.' + this._staticItemsClass).get(0).getBoundingClientRect().width;
            let itemsMaxWidth = calcMaxWidth(staticElements.map(item => $.fn.constructor(item).outerWidth()), staticSectionWidth, staticSectionMaxWidth);
            itemsMaxWidth.map((maxWidth, i) => {
                if (maxWidth !== undefined) {
                    $.fn.constructor(staticElements[i]).closest('.' + cssClasses.toolbarItem).css('maxWidth', maxWidth + 'px');
                }
            });
        }
    }
    _processToolbarBeforeGettingSize(toolbar) {
    }
}
registerBaseBinding('dxToolbar', 'options');
