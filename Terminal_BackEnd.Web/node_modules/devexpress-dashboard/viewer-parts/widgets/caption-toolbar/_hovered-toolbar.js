/**
* DevExpress Dashboard (_hovered-toolbar.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as $ from 'jquery';
import { arrangeHoveredToolbarItems } from './_caption-toolbar-arranger';
import { DashboardCaptionToolbarBase } from './_caption-toolbar-base';
import { cssClasses } from './_caption-toolbar-css-classes';
export class HoveredDashboardCaptionToolbar extends DashboardCaptionToolbarBase {
    constructor(_container, _controlContainer, _popupContainer, encodeHtml, _hasBorder) {
        super(_container, _controlContainer, _popupContainer, encodeHtml);
        this._hasBorder = _hasBorder;
        this._containerHovered = false;
    }
    dispose() {
        if (this._popupContainer) {
            $.fn.constructor(this._popupContainer).off('mouseover.captionPanel');
            $.fn.constructor(this._popupContainer).off('mouseleave.captionPanel');
        }
        super.dispose();
    }
    _appendToContainer(toolbarDiv) {
        let toggleHoverState = (hovered) => {
            if (this._containerHovered !== hovered) {
                this._containerHovered = hovered;
                this._updateToolbar();
            }
        };
        $.fn.constructor(this._popupContainer).on('mouseover.captionPanel', () => toggleHoverState(true));
        $.fn.constructor(this._popupContainer).on('mouseleave.captionPanel', () => toggleHoverState(false));
        return super._appendToContainer(toolbarDiv);
    }
    update(options) {
        let heightChanded = super.update(options);
        if (this._hasBorder) {
            this._toolbarDiv.classList.add(cssClasses.captionBorder);
        }
        return heightChanded;
    }
    _getVisibleItems() {
        return arrangeHoveredToolbarItems(this._options, this._containerHovered, this.disabled);
    }
    _createInstance() {
        return new HoveredDashboardCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._hasBorder);
    }
    _processToolbarBeforeGettingSize(toolbar) {
        toolbar.setHoverState(true);
    }
    setHoverState(hovered) {
        this._containerHovered = hovered;
    }
}
