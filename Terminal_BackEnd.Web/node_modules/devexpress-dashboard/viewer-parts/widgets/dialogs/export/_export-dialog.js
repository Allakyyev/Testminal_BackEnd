/**
* DevExpress Dashboard (_export-dialog.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { format as stringFormat } from 'devextreme/core/utils/string';
import { localizationId } from '../../../../data/_localization-ids';
import { localizer } from '../../../../data/_localizer';
import { dashboardExportDocumentScaleMode, dashboardExportExcelFormat, dashboardExportImageFormat, dashboardExportPageLayout, dashboardExportPaperKind, dashboardExportSizeMode, dashboardStateExcelExportPosition, dashboardStateExportPosition, exportFormats, ExportOptions } from '../../../_export-options';
import { types } from '../../../_viewer-item-types';
import { dialogClasses, dialogForm } from '../_dialog-form';
import { dashboardStatePosition, excelDashboardStatePosition, excelFormat, imageFormat, pageLayout, paperKind, scaleMode, sizeMode } from './_export-localization';
import { exportOptionsCache } from './_export-options-cache';
import { boundImageItemOptionsGroup, cardOptionsGroup, chartOptionsGroup, customItemOptionsGroup, dashboardExcelOptionsGroup, dashboardImageOptionsGroup, entireDashboardOptionsGroup, excelOptionsGroup, gaugeOptionsGroup, gridOptionsGroup, groupItemOptionsGroup, imageItemOptionsGroup, imageOptionsGroup, mapOptionsGroup, pieOptionsGroup, pivotOptionsGroup, rangeFilterOptionsGroup, simplyImageOptionsGroup, textItemOptionsGroup, treemapOptionsGroup } from './_export-options-groups';
export class exportDialog {
    constructor(options) {
        this.defaultTitle = ExportOptions.DefaultTitle;
        this.defaultFileName = ExportOptions.DefaultFileName;
        this.options = options;
        this._initialize();
    }
    _initialize() {
        var that = this, options = that.options;
        exportDialog._initializeExportLocalizedStrings();
        that.exportOptionsCache = new exportOptionsCache();
        that.dialogForm = new dialogForm({
            dialogContainer: options.container,
            fullScreenMode: options.fullScreenMode,
            width: 'auto',
            height: 'auto',
            allowScrolling: true,
            deferredRendering: true,
            buttons: [{
                    name: localizer.getString(localizationId.buttonNames.ButtonReset),
                    func: function (type, typeExportEntities) {
                        that.group.set(options.defaultDocumentInfo);
                    },
                    hide: false
                }, {
                    name: localizer.getString(localizationId.buttonNames.ButtonExport),
                    hide: true,
                    func: function () {
                        let defaultDocumentInfo = options.defaultDocumentInfo;
                        var actualDocumentInfo = that.exportOptionsCache.getActualDocumentInfo(that.dashboardItemName, defaultDocumentInfo);
                        that.group.apply(actualDocumentInfo);
                        that.exportOptionsCache.add(that.dashboardItemName, defaultDocumentInfo, actualDocumentInfo);
                        that.exportFunction(actualDocumentInfo);
                    },
                    isDefault: true
                }, {
                    name: localizer.getString(localizationId.buttonNames.ButtonCancel),
                    hide: true,
                    func: function () { }
                }
            ],
            renderContent: function (controlCreationCallbacks) {
                let exportForm = document.createElement('div');
                exportForm.classList.add(dialogClasses.form);
                that._createGroup();
                var editors = that.group.getEditors();
                editors.forEach(editor => {
                    let element = document.createElement('div');
                    element.classList.add(dialogClasses.element);
                    switch (editor.margin) {
                        case 'Large':
                            element.classList.add(dialogClasses.elementLargeMarginTop);
                            break;
                        case 'Small':
                            element.classList.add(dialogClasses.elementSmallMarginTop);
                            break;
                    }
                    exportForm.appendChild(element);
                    element.appendChild(editor.labelDiv);
                    element.appendChild(editor.editorDiv);
                });
                return exportForm;
            },
            disposeContent: () => {
                if (this.group) {
                    let editors = that.group.getEditors();
                    editors.forEach(editor => editor.dispose());
                }
            },
            setActualState: function (width) {
            },
            onShown: options.onShown,
            onShowing: options.onShowing,
            onHidden: options.onHidden
        });
    }
    showDialog(dashboardItemName, dashboardItemType, format, options) {
        this.defaultTitle = options.defaultTitle;
        this.defaultFileName = options.defaultFileName;
        this.dashboardItemName = dashboardItemName;
        this.dashboardItemType = dashboardItemType;
        this.format = format;
        this.dialogForm.popupInstance.option('title', this._getLocalizedTitle(options.defaultFileName, format));
        this.dialogForm.showDialog();
    }
    hideDialog() {
        this.dialogForm.hideDialog();
    }
    dispose() {
        this.dialogForm && this.dialogForm.dispose();
    }
    _getLocalizedTitle(name, format) {
        let exportString;
        switch (format) {
            case exportFormats.pdf:
                exportString = localizer.getString(localizationId.buttonNames.ExportToPdf);
                break;
            case exportFormats.image:
                exportString = localizer.getString(localizationId.buttonNames.ExportToImage);
                break;
            default:
                exportString = localizer.getString(localizationId.buttonNames.ExportToExcel);
                break;
        }
        return !name ? exportString : stringFormat(localizer.getString(localizationId.buttonNames.ExportTemplate), exportString, name);
    }
    setExportFunction(exportFunction) {
        if (exportFunction)
            this.exportFunction = exportFunction;
    }
    _createImageGroup(dashboardItemType, documentInfo) {
        switch (dashboardItemType) {
            case null:
                return new dashboardImageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
            case types.image:
                return new simplyImageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
            default:
                return new imageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
        }
    }
    _createExcelGroup(dashboardItemType, documentInfo) {
        switch (dashboardItemType) {
            case null:
                return new dashboardExcelOptionsGroup(documentInfo.excelExportOptions.Format);
            default:
                return new excelOptionsGroup(documentInfo.excelExportOptions.Format, dashboardItemType !== types.group && dashboardItemType !== types.page && dashboardItemType !== types.tabPage && dashboardItemType !== types.tabContainer);
        }
    }
    _createPdfGroup(dashboardItemType, documentInfo) {
        switch (dashboardItemType) {
            case null:
                return new entireDashboardOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.group:
            case types.page:
                return new groupItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.grid:
                return new gridOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.GridFitToPageWidth, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.chart:
            case types.scatter:
                return new chartOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case types.pie:
                return new pieOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.PieAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.gauge:
                return new gaugeOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.GaugeAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.card:
                return new cardOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.CardAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.pivot:
                return new pivotOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.treemap:
                return new treemapOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case types.choroplethMap:
            case types.geoPointMap:
            case types.bubbleMap:
            case types.pieMap:
                return new mapOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case types.rangeFilter:
                return new rangeFilterOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case types.text:
                return new textItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case types.boundImage:
                return new boundImageItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.image:
                return new imageItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case types.custom:
                return new customItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
        }
    }
    _createGroup() {
        var that = this, documentInfo = that.exportOptionsCache.getActualDocumentInfo(that.dashboardItemName, that.options.defaultDocumentInfo);
        if (that.group) {
            that.group.dispose();
        }
        switch (that.format) {
            case exportFormats.image:
                that.group = that._createImageGroup(that.dashboardItemType, documentInfo);
                break;
            case exportFormats.excel:
                that.group = that._createExcelGroup(that.dashboardItemType, documentInfo);
                break;
            default:
                that.group = that._createPdfGroup(that.dashboardItemType, documentInfo);
                break;
        }
        that.group.createEditors({ popupContainer: this.options.container });
        if (documentInfo.pdfExportOptions && documentInfo.pdfExportOptions.Title === ExportOptions.DefaultTitle)
            documentInfo.pdfExportOptions.Title = this.defaultTitle;
        if (documentInfo.imageExportOptions && documentInfo.imageExportOptions.Title === ExportOptions.DefaultTitle)
            documentInfo.imageExportOptions.Title = this.defaultTitle;
        if (documentInfo.fileName === ExportOptions.DefaultFileName)
            documentInfo.fileName = this.defaultFileName;
        that.group.set(documentInfo);
        var scaleModeGroup = !!that.group['dashboardOptionsGroup'] ? that.group['dashboardOptionsGroup'].scaleModeOptionsGroup : that.group['scaleModeOptionsGroup'];
        if (!!scaleModeGroup) {
            scaleModeGroup.visibilityUpdated.add(() => { this.dialogForm.popupInstance.repaint(); });
        }
    }
    static _initializeExportLocalizedStrings() {
        paperKind.letter = { displayValue: localizer.getString(localizationId.labelName.PaperKindLetter), value: dashboardExportPaperKind.letter };
        paperKind.legal = { displayValue: localizer.getString(localizationId.labelName.PaperKindLegal), value: dashboardExportPaperKind.legal };
        paperKind.executive = { displayValue: localizer.getString(localizationId.labelName.PaperKindExecutive), value: dashboardExportPaperKind.executive };
        paperKind.a5 = { displayValue: localizer.getString(localizationId.labelName.PaperKindA5), value: dashboardExportPaperKind.a5 };
        paperKind.a4 = { displayValue: localizer.getString(localizationId.labelName.PaperKindA4), value: dashboardExportPaperKind.a4 };
        paperKind.a3 = { displayValue: localizer.getString(localizationId.labelName.PaperKindA3), value: dashboardExportPaperKind.a3 };
        pageLayout.auto = { displayValue: localizer.getString(localizationId.labelName.PageLayoutAuto), value: dashboardExportPageLayout.auto };
        pageLayout.portrait = { displayValue: localizer.getString(localizationId.labelName.PageLayoutPortrait), value: dashboardExportPageLayout.portrait };
        pageLayout.landscape = { displayValue: localizer.getString(localizationId.labelName.PageLayoutLandscape), value: dashboardExportPageLayout.landscape };
        scaleMode.none = { displayValue: localizer.getString(localizationId.labelName.ScaleModeNone), value: dashboardExportDocumentScaleMode.none };
        scaleMode.useScaleFactor = { displayValue: localizer.getString(localizationId.labelName.ScaleModeUseScaleFactor), value: dashboardExportDocumentScaleMode.useScaleFactor };
        scaleMode.autoFitToPageWidth = { displayValue: localizer.getString(localizationId.labelName.ScaleModeAutoFitToPagesWidth), value: dashboardExportDocumentScaleMode.autoFitToPagesWidth };
        dashboardStatePosition.below = { displayValue: localizer.getString(localizationId.labelName.FilterStatePresentationAfter), value: dashboardStateExportPosition.below };
        dashboardStatePosition.separatePage = { displayValue: localizer.getString(localizationId.labelName.FilterStatePresentationAfterAndSplitPage), value: dashboardStateExportPosition.separatePage };
        excelDashboardStatePosition.below = { displayValue: localizer.getString(localizationId.labelName.FilterStatePresentationAfter), value: dashboardStateExcelExportPosition.below };
        excelDashboardStatePosition.separateSheet = { displayValue: localizer.getString(localizationId.labelName.FilterStatePresentationSplitSheet), value: dashboardStateExcelExportPosition.separateSheet };
        imageFormat.png = { displayValue: 'PNG', value: dashboardExportImageFormat.png };
        imageFormat.gif = { displayValue: 'GIF', value: dashboardExportImageFormat.gif };
        imageFormat.jpg = { displayValue: 'JPG', value: dashboardExportImageFormat.jpg };
        excelFormat.csv = { displayValue: 'CSV', value: dashboardExportExcelFormat.csv };
        excelFormat.xls = { displayValue: 'XLS', value: dashboardExportExcelFormat.xls };
        excelFormat.xlsx = { displayValue: 'XLSX', value: dashboardExportExcelFormat.xlsx };
        sizeMode.none = { displayValue: localizer.getString(localizationId.labelName.SizeModeNone), value: dashboardExportSizeMode.none };
        sizeMode.stretch = { displayValue: localizer.getString(localizationId.labelName.SizeModeStretch), value: dashboardExportSizeMode.stretch };
        sizeMode.zoom = { displayValue: localizer.getString(localizationId.labelName.SizeModeZoom), value: dashboardExportSizeMode.zoom };
    }
}
