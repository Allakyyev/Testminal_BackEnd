/**
* DevExpress Dashboard (_pivot-item-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { classCaption } from '../../../model/format-rules/metadata/_dashboard-item-format-rule';
import { DataDashboardItem } from '../../../model/items/data-dashboard-item';
import { formatRules } from '../../../model/items/metadata/_data-dashboard-item';
import { autoExpandColumnGroups, autoExpandRowGroups, columnTotalsPosition, layoutType, rowTotalsPosition, showColumnGrandTotals, showColumnTotals, showRowGrandTotals, showRowTotals, valuesPosition } from '../../../model/items/pivot/metadata/_pivot-item';
import { collectionEditor } from '../../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { DashboardItemPropertiesComposer } from './_base-properties-composer';
import { SharedComposers } from './_shared-composers';
export class PivotItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        var result = [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model)),
            new AccordionTab(KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutDataWrapper(model)),
            new AccordionTab(KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.PivotInitialState', this.getInitialStateDataWrapper(model)),
            new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', PivotItemPropertiesComposer.getFormatRulesWrapper(model, args.dataSourceBrowser, this.editRuleHandler))
        ];
        return result;
    }
    static getFormatRulesWrapper(model, dataSourceBrowser, editHandler) {
        const collectionEditorOptions = {
            propertyName: classCaption.propertyName,
            createNewItemHandler: () => DataDashboardItem._createFormatRule(null, { '@ItemType': 'PivotItemFormatRule' }),
            editItemHandler: editHandler
        };
        return new ObjectPropertiesWrapper({
            model: model,
            properties: [Object.assign(Object.assign({}, formatRules), { formAdapterItem: collectionEditor(collectionEditorOptions) })]
        });
    }
    getLayoutDataWrapper(model) {
        var properties = [
            layoutType,
            showColumnTotals,
            showRowTotals,
            showColumnGrandTotals,
            showRowGrandTotals,
            columnTotalsPosition,
            rowTotalsPosition,
            valuesPosition
        ];
        var disabledRules = {};
        disabledRules[rowTotalsPosition.propertyName] = (m) => { return model.layoutType() === 'Compact'; };
        disabledRules[showRowTotals.propertyName] = (m) => { return model.layoutType() === 'Compact'; };
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    }
    getInitialStateDataWrapper(model) {
        var properties = [
            autoExpandColumnGroups,
            autoExpandRowGroups
        ];
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
}
