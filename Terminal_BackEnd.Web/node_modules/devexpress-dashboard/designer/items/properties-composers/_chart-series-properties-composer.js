/**
* DevExpress Dashboard (_chart-series-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { allowedTypesForShowPointMarkers } from '../../../data/data-controllers/_chart-data-controller-proto';
import { RangeSeries, SimpleSeries } from '../../../model/items/chart/chart-series';
import { ChartSeriesCreator } from '../../../model/items/chart/chart-series-creator';
import { ignoreEmptyPoints, plotOnSecondaryAxis, showPointMarkers } from '../../../model/items/chart/metadata/_chart-series';
import { measuresColoringMode } from '../../../model/items/options/metadata/_dashboard-item-coloring-options';
import { name } from '../../../model/metadata/_base-metadata';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs, TypeAccordionTab } from '../../properties-controller/_accordion-tab';
import { getDataItemContainerDisplayName } from '../../_display-name-provider';
import { ContainerTypeSelector } from '../container-type-selector/_container-type-selector';
import { DataItemContainerPropertiesComposer } from './_base-properties-composer';
import { DataItemsPropertiesComposer } from './_data-item-properties-composer';
import { SharedComposers } from './_shared-composers';
export class ChartSeriesPropertiesComposer extends DataItemContainerPropertiesComposer {
    constructor(customizeHandler, _containerTypesMap = ChartSeriesCreator.chartSeriesViewTypesMap, _allowConfigurePointLabels = true, _allowSecondaryAxis = true, _editCFRuleHandler, _createCFRuleDelegate) {
        super(customizeHandler);
        this._containerTypesMap = _containerTypesMap;
        this._allowConfigurePointLabels = _allowConfigurePointLabels;
        this._allowSecondaryAxis = _allowSecondaryAxis;
        this._editCFRuleHandler = _editCFRuleHandler;
        this._createCFRuleDelegate = _createCFRuleDelegate;
    }
    _composeTabsCore(model, args) {
        var typeTab = new TypeAccordionTab(KnownTabs.Type, 'DashboardWebStringId.Type'), commonTab = new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.Options'), pointLabelsTab = new AccordionTab(KnownTabs.PointLabels, 'DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions'), coloringTab = new AccordionTab(KnownTabs.ColoringOptions, 'DashboardWebStringId.ColoringOptions'), conditionalFormattingTab = new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting'), result = [typeTab, commonTab, coloringTab, pointLabelsTab, conditionalFormattingTab];
        this._fillSeriesTypeWrapper(typeTab, model, args.containerType);
        this._fillSeriesGeneralTab(commonTab, model, args.dashboardItem, args.dataSourceBrowser);
        this._fillConditionalFormattingTab(conditionalFormattingTab, model, args.dashboardItem, args.dataSourceBrowser);
        if (model && model[plotOnSecondaryAxis.propertyName]) {
            coloringTab.tabModel(new ObjectPropertiesWrapper({
                model: args.dashboardItem.coloringOptions,
                properties: [measuresColoringMode]
            }));
        }
        if (this._allowConfigurePointLabels) {
            pointLabelsTab.tabModel(SharedComposers.getLabelsWrapper(model));
        }
        return result;
    }
    _fillSeriesTypeWrapper(tab, model, containerType) {
        if (model) {
            var hightlightedTypes = [
                'Bar',
                'StackedBar',
                'Point',
                'Line',
                'Area',
                'RangeArea'
            ];
            tab.tabModel(new ContainerTypeSelector(this._containerTypesMap, containerType, ChartSeriesCreator.chartSeriesGroupLocalization, hightlightedTypes));
        }
    }
    _showPointMarkersVisible(model) {
        return (model instanceof RangeSeries || model instanceof SimpleSeries) && allowedTypesForShowPointMarkers.indexOf(model.seriesType()) !== -1;
    }
    _showIgnoreEmptyPointsVisible(model) {
        var stackedTypes = ['FullStackedLine', 'StackedSplineArea', 'FullStackedSplineArea', 'StackedArea', 'FullStackedArea'];
        if (model instanceof SimpleSeries && stackedTypes.indexOf(model.seriesType()) !== -1)
            return true;
        else
            return this._showPointMarkersVisible(model);
    }
    _fillSeriesGeneralTab(tab, model, dashboardItem, dataSourceBrowser) {
        if (model) {
            var properties = [
                Object.assign({ editorOptions: { placeholder: getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, name),
                plotOnSecondaryAxis,
                ignoreEmptyPoints,
                showPointMarkers
            ];
            var visibilityFilterRules = {};
            visibilityFilterRules[ignoreEmptyPoints.propertyName] = (propertiesWrapper) => this._showIgnoreEmptyPointsVisible(propertiesWrapper.model);
            visibilityFilterRules[showPointMarkers.propertyName] = (propertiesWrapper) => this._showPointMarkersVisible(propertiesWrapper.model);
            visibilityFilterRules[plotOnSecondaryAxis.propertyName] = (propertiesWrapper) => this._allowSecondaryAxis;
            tab.tabModel(new ObjectPropertiesWrapper({
                model: model,
                properties: properties,
                visibilityFilterRules: visibilityFilterRules
            }));
        }
    }
    _fillConditionalFormattingTab(tab, series, dashboardItem, dataSourceBrowser) {
        if (!series._isConditionalFormattingSupported)
            return;
        const cfRuleCreator = () => {
            const cfRule = this._createCFRuleDelegate();
            cfRule.dataItemName(series._getDataId());
            cfRule.dataItemApplyToName(series._getDataId());
            return cfRule;
        };
        const cfRuleFilter = (cfRule) => {
            const seriesDataItemNames = series._measures
                .map(measure => measure.uniqueName())
                .filter(name => !!name);
            return seriesDataItemNames.indexOf(cfRule.dataItemName()) !== -1
                || seriesDataItemNames.indexOf(cfRule.dataItemApplyToName()) !== -1;
        };
        tab.tabModel(DataItemsPropertiesComposer.getFormatRulesWrapper(dashboardItem, cfRuleCreator, cfRuleFilter, this._editCFRuleHandler));
    }
}
