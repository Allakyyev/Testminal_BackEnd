/**
* DevExpress Dashboard (_choropleth-map-element-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { DeltaMap } from '../../../model/items/map/chorolpeth-map';
import { ChoroplethMapItem } from '../../../model/items/map/chorolpeth-map-item';
import { actualValueName, deltaName, valueName } from '../../../model/items/map/metadata/_chorolpeth-map';
import { name } from '../../../model/metadata/_base-metadata';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs, TypeAccordionTab } from '../../properties-controller/_accordion-tab';
import { ContainerTypeSelector } from '../container-type-selector/_container-type-selector';
import { DataItemContainerPropertiesComposer } from './_base-properties-composer';
import { SharedComposers } from './_shared-composers';
export class ChoroplethMapElementPropertiesComposer extends DataItemContainerPropertiesComposer {
    constructor(customizeHandler, editDeltaFormatHandler = (model) => { }) {
        super(customizeHandler);
        this.editDeltaFormatHandler = editDeltaFormatHandler;
    }
    _composeTabsCore(model, args) {
        var typeTab = new TypeAccordionTab(KnownTabs.Type, 'DashboardWebStringId.Map.WeightedLegendType', this.getMapTypeWrapper(model, args.containerType)), commonTab = new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.Options', new ObjectPropertiesWrapper({
            model: model,
            properties: [
                name,
                valueName,
                actualValueName,
                deltaName
            ]
        })), result = [typeTab, commonTab];
        if (model instanceof DeltaMap) {
            result.push(new AccordionTab(KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions', SharedComposers.getDeltaOptionsWrapper(model.deltaOptions)));
            result.push(new AccordionTab(KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions', SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editDeltaFormatHandler)));
        }
        return result;
    }
    getMapTypeWrapper(model, containerType) {
        if (model) {
            return new ContainerTypeSelector(ChoroplethMapItem.choroplethMapTypesMap, containerType);
        }
        return null;
    }
}
