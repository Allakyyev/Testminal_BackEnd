/**
* DevExpress Dashboard (_chart-item-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { getLocalizationById } from '../../../data/localization/_default';
import { DataField } from '../../../model/data-sources/_data-field';
import { chartAlwaysShowZeroLevel } from '../../../model/items/chart/metadata/_chart-axis';
import { chartRotated } from '../../../model/items/chart/metadata/_chart-item';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { getDataItemContainerDisplayName, getDataItemDisplayName } from '../../_display-name-provider';
import { DashboardItemPropertiesComposer } from './_base-properties-composer';
import { ChartIndicatorPropertiesComposer } from './_chart-indicators-properties-composer';
import { DataItemsPropertiesComposer } from './_data-item-properties-composer';
import { SharedComposers } from './_shared-composers';
export class ChartItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(options) {
        super(options.customizeHandler);
        this.options = options;
    }
    _getAxisXTabModel(model, dataSourceBrowser, argumentDataField) {
        var groupInterval = model.arguments()[0] ? model.arguments()[0].dateTimeGroupInterval() : 'None';
        var isOlap = argumentDataField && DataField.isOlap(argumentDataField.dataMember());
        return SharedComposers.getAxisWrapper(model.axisX, ko.pureComputed(() => {
            var argumentsNumber = model.arguments().length;
            if (!argumentsNumber) {
                return '';
            }
            else if (argumentsNumber === 1) {
                return model.arguments()[0] && getDataItemDisplayName(dataSourceBrowser, model, model.arguments()[0]);
            }
            else
                return 'Arguments';
        }), null, DataField.isDateTime(argumentDataField) && !isOlap, DataField.isNumeric(argumentDataField) && !isOlap, groupInterval);
    }
    _composeTabsCore(model, args) {
        let argumentDataField = ko.observable();
        if (model.arguments().length == 1) {
            var dimension = model.arguments()[0];
            args.dataSourceBrowser.findDataField(model.dataSource(), model.dataMember(), dimension.dataMember()).done(dataField => {
                argumentDataField(dataField);
            });
        }
        var result = [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model, [chartRotated])),
        ];
        var axisXTab = new AccordionTab(KnownTabs.AxisX, 'DashboardWebStringId.Chart.AxisX');
        axisXTab.tabModel(this._getAxisXTabModel(model, args.dataSourceBrowser, argumentDataField()));
        argumentDataField.subscribe(dataField => { axisXTab.tabModel(this._getAxisXTabModel(model, args.dataSourceBrowser, dataField)); });
        result.push(axisXTab);
        if (model) {
            model.panes().forEach((pane) => {
                var numberPostfix = model.panes().length === 1 ? '' : ' (' + pane.name() + ')';
                result.push(new AccordionTab(KnownTabs.AxisY + numberPostfix, getLocalizationById('DashboardWebStringId.Chart.AxisY') + numberPostfix, SharedComposers.getAxisWrapper(pane.primaryAxisY, ko.pureComputed(() => {
                    var series = pane.series().filter(s => !s.plotOnSecondaryAxis());
                    if (!series.length) {
                        return '';
                    }
                    var dataItems = series.reduce((array, singleSeries) => {
                        return array.concat(singleSeries
                            ._getBindingModel()
                            .map(b => singleSeries[b.propertyName])
                            .filter(dil => !!dil.dataItem())
                            .map(dil => dil.dataItem()));
                    }, []);
                    if (dataItems.length === 1) {
                        return getDataItemDisplayName(args.dataSourceBrowser, model, dataItems[0]);
                    }
                    else
                        return 'Values';
                }), chartAlwaysShowZeroLevel)));
                if (pane.series().filter(s => s.plotOnSecondaryAxis()).length > 0) {
                    result.push(new AccordionTab(KnownTabs.AxisY + 'secondary' + numberPostfix, getLocalizationById('DashboardWebStringId.Chart.AxisYSecondary') + numberPostfix, SharedComposers.getAxisWrapper(pane.secondaryAxisY, ko.pureComputed(() => {
                        var series = pane.series().filter(s => s.plotOnSecondaryAxis());
                        if (!series.length) {
                            return '';
                        }
                        else if (series.length === 1) {
                            return getDataItemContainerDisplayName(args.dataSourceBrowser, model, series[0]);
                        }
                        else
                            return 'Values';
                    }), chartAlwaysShowZeroLevel)));
                }
            });
        }
        result.push(new AccordionTab(KnownTabs.Legend, 'DashboardWebStringId.AccordionTab.ChartLegend', SharedComposers.getLegendWrapper(model)));
        result.push(new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(model, () => this.options.createCFRuleDelegate(), () => true, this.options.editCFRuleHandler)));
        result.push(new AccordionTab(KnownTabs.Indicators, 'DashboardWebStringId.Chart.Indicators', ChartIndicatorPropertiesComposer.getIndicatorsWrapper(model, () => this.options.createIndicatorDelegate(), this.options.editChartIndicatorHandler)));
        return result;
    }
}
