/**
* DevExpress Dashboard (_card-item-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CardItemDeltaFormatRule } from '../../../model/format-rules/card-item-delta-format-rule';
import { CardItemFormatRule } from '../../../model/format-rules/card-item-format-rule';
import { isDeltaFormatRuleAvaliable } from '../../conditional-formatting/items/properties-composers/_card-item-format-rule-properties-composer';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { DashboardItemPropertiesComposer } from './_base-properties-composer';
import { DataItemsPropertiesComposer } from './_data-item-properties-composer';
import { SharedComposers } from './_shared-composers';
export class CardItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        return [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model)),
            new AccordionTab(KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', SharedComposers.getContentArrangementWrapper(model)),
            new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(model, () => !isDeltaFormatRuleAvaliable(model) ? new CardItemFormatRule() : new CardItemDeltaFormatRule(), () => true, this.editRuleHandler))
        ];
    }
}
