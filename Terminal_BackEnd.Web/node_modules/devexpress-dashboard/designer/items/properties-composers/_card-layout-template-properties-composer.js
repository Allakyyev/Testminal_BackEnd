/**
* DevExpress Dashboard (_card-layout-template-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { localize } from '@devexpress/analytics-core/analytics-internal';
import * as ko from 'knockout';
import { $unwrap } from '../../../data/_jquery-helpers';
import { createSvgIconElement } from '../../../data/_utils';
import { safeSubscribe } from '../../../model/internal/_knockout-utils';
import { wrapWithUndoRedo } from '../../../model/internal/_undo-engine-helper';
import { maxWidth, minWidth } from '../../../model/items/card/metadata/_card-layout';
import { actionButtons, inlineEditCollectionEditor, nullableNumberBoxEditor, numberBoxEditor } from '../../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { CollectionEditorRefreshCallback } from '../../ui-widgets/collection-editor/_collection-editor-viewmodel-base';
export class CardTemplatePropertiesComposer {
    composeTabs(model, args) {
        if (args.applyTemplateToAllCards === undefined)
            args.applyTemplateToAllCards = (template) => { };
        var layoutsTab = new AccordionTab(KnownTabs.CardTemplateSettings, 'DashboardWebStringId.CardLayout.LayoutOptions');
        this.fillLayoutsTab(layoutsTab, model, args.dimensionNames, args.applyTemplateToAllCards);
        return [layoutsTab];
    }
    fillLayoutsTab(tab, template, dimensionNames, applyTemplateToAllCards) {
        const refreshCallback = new CollectionEditorRefreshCallback();
        const propertiesList = template._collectProperties(dimensionNames);
        const subscriptions = propertiesList.map(item => safeSubscribe({ checked: item.checked, selectedItem: item.selectedItem || (() => { }) }, () => refreshCallback.refresh()));
        const collectionEditorOptions = {
            dataFields: ['checked', 'title', 'selectedItem', 'lookupDataSource'],
            isToolbarVisible: false,
            gridColumns: [{
                    dataField: 'checked',
                    dataType: 'boolean',
                    width: 40,
                }, {
                    dataField: 'selectedItem',
                    calculateDisplayValue: (rowData) => rowData.title,
                    lookup: {
                        displayExpr: 'displayText',
                        valueExpr: 'key',
                    },
                }],
            customizeInlineEditor: (e) => {
                e.editorOptions.dataSource = e.row.data.lookupDataSource;
                if (e.dataField === 'selectedItem') {
                    var oldValueChanged = e.editorOptions.onValueChanged;
                    e.editorOptions.onValueChanged = function (ee) {
                        oldValueChanged.call(ee.component, ee);
                        setTimeout(() => e.component.saveEditData());
                    };
                }
            },
            customizeCell: (e) => {
                if (!e.isEditing && e.column.dataField === 'selectedItem' && !!e.data.lookupDataSource) {
                    var icon = createSvgIconElement('dx-dashboard-ce-edit');
                    const div = document.createElement('div');
                    div.appendChild(icon);
                    div.classList.add('custom-edit-icon');
                    div.classList.add('dx-dashboard-editable-cell');
                    $unwrap(e.cellElement).appendChild(div);
                }
            },
            enableEditItem: (selectedItem, e) => {
                if (e.column.dataField === 'selectedItem')
                    return !!e.data.lookupDataSource;
                return true;
            },
            forceRefreshCallback: refreshCallback,
        };
        tab.tabModel(new ObjectPropertiesWrapper({
            model: {
                minWidth: template.minWidth,
                maxWidth: template.maxWidth,
                templateProperties: ko.observableArray(propertiesList),
                buttonsFakeProperty: {},
            },
            properties: [
                Object.assign(Object.assign({}, minWidth), { formAdapterItem: numberBoxEditor({ min: 1, format: '0#' }) }),
                Object.assign(Object.assign({}, maxWidth), { formAdapterItem: nullableNumberBoxEditor({ defaultValue: 200, editorOptions: { min: 1, format: '0#' } }) }),
                {
                    formAdapterItem: inlineEditCollectionEditor(collectionEditorOptions),
                    propertyName: 'templateProperties',
                }, {
                    propertyName: 'buttonsFakeProperty',
                    formAdapterItem: actionButtons([
                        {
                            text: localize('DashboardWebStringId.CardLayout.ResetTemplate'),
                            onClick: () => this.resetTemplate(template),
                            elementAttr: { class: 'dx-dashboard-card-template-reset-button' }
                        },
                        {
                            text: localize('DashboardWebStringId.CardLayout.ApplyToAllCards'),
                            onClick: () => applyTemplateToAllCards(template),
                            elementAttr: { class: 'dx-dashboard-card-template-apply-all-button' }
                        }
                    ]),
                }
            ],
            disposableModelSubscriptions: subscriptions,
        }));
    }
    resetTemplate(template) {
        template._resetToDefaults();
    }
}
__decorate([
    wrapWithUndoRedo
], CardTemplatePropertiesComposer.prototype, "resetTemplate", null);
