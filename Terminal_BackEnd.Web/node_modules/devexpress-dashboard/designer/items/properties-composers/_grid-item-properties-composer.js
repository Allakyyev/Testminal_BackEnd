/**
* DevExpress Dashboard (_grid-item-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { classCaption } from '../../../model/format-rules/metadata/_dashboard-item-format-rule';
import { DataDashboardItem } from '../../../model/items/data-dashboard-item';
import { showFilterRow, updateTotals } from '../../../model/items/grid/metadata/_grid-column-filter-options';
import { columnWidthMode, enableBandedRows, showColumnHeaders, showHorizontalLines, showVerticalLines, wordWrap } from '../../../model/items/grid/metadata/_grid-options';
import { formatRules } from '../../../model/items/metadata/_data-dashboard-item';
import { collectionEditor } from '../../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { DashboardItemPropertiesComposer } from './_base-properties-composer';
import { SharedComposers } from './_shared-composers';
export class GridItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(customizeHandler, editRuleHandler, dataSourceBrowser) {
        super(customizeHandler);
        this.editRuleHandler = editRuleHandler;
        this.dataSourceBrowser = dataSourceBrowser;
    }
    _composeTabsCore(model, args) {
        var result = [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model)),
            new AccordionTab(KnownTabs.Layout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutWrapper(model.gridOptions)),
            new AccordionTab(KnownTabs.GridColumnFilter, 'DashboardWebStringId.Grid.GridColumnFilter', this.getColumnFilterWrapper(model)),
            new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', this.getFormatRulesWrapper(model, args.dataSourceBrowser))
        ];
        return result;
    }
    getColumnFilterWrapper(model) {
        const disabledRules = {};
        const dataSource = this.dataSourceBrowser.findDataSource(model.dataSource());
        const isUpdateTotalsDisabled = () => !dataSource || dataSource.itemType() === 'OLAPDataSource';
        disabledRules[updateTotals.propertyName] = isUpdateTotalsDisabled;
        return new ObjectPropertiesWrapper({
            model: model.columnFilterOptions,
            properties: [
                showFilterRow,
                updateTotals
            ],
            disabledFilterRules: disabledRules
        });
    }
    getLayoutWrapper(model) {
        var properties = [
            showHorizontalLines,
            showVerticalLines,
            enableBandedRows,
            showColumnHeaders,
            wordWrap,
            columnWidthMode
        ];
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
    getFormatRulesWrapper(model, dataSourceBrowser) {
        const collectionEditorOptions = {
            propertyName: classCaption.propertyName,
            createNewItemHandler: () => DataDashboardItem._createFormatRule(null, { '@ItemType': 'GridItemFormatRule' }),
            editItemHandler: this.editRuleHandler
        };
        return new ObjectPropertiesWrapper({
            model: model,
            properties: [Object.assign(Object.assign({}, formatRules), { formAdapterItem: collectionEditor(collectionEditorOptions) })]
        });
    }
}
