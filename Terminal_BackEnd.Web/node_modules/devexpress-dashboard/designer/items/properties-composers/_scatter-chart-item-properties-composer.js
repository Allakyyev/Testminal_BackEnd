/**
* DevExpress Dashboard (_scatter-chart-item-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { alwaysShowZeroLevelScatter } from '../../../model/items/chart/metadata/_chart-axis';
import { chartRotated } from '../../../model/items/chart/metadata/_chart-item';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { getDataItemDisplayName } from '../../_display-name-provider';
import { DashboardItemPropertiesComposer } from './_base-properties-composer';
import { DataItemsPropertiesComposer } from './_data-item-properties-composer';
import { SharedComposers } from './_shared-composers';
export class ScatterChartItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(customizeHandler, editCFRuleHandler, createCFRuleDelegate) {
        super(customizeHandler);
        this.editCFRuleHandler = editCFRuleHandler;
        this.createCFRuleDelegate = createCFRuleDelegate;
    }
    _composeTabsCore(model, args) {
        var result = [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model, [chartRotated])),
            new AccordionTab(KnownTabs.AxisX, 'DashboardWebStringId.Chart.AxisX', SharedComposers.getAxisWrapper(model.axisX, ko.pureComputed(() => {
                return model.axisXMeasure() && getDataItemDisplayName(args.dataSourceBrowser, model, model.axisXMeasure());
            }), null)),
            new AccordionTab(KnownTabs.AxisY, 'DashboardWebStringId.Chart.AxisY', SharedComposers.getAxisWrapper(model.axisY, ko.pureComputed(() => {
                return model.axisYMeasure() && getDataItemDisplayName(args.dataSourceBrowser, model, model.axisYMeasure());
            }), alwaysShowZeroLevelScatter)),
            new AccordionTab(KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', SharedComposers.getLabelsWrapper(model)),
            new AccordionTab(KnownTabs.Legend, 'DashboardWebStringId.AccordionTab.ChartLegend', SharedComposers.getLegendWrapper(model)),
            new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(model, () => this.createCFRuleDelegate(), () => true, this.editCFRuleHandler))
        ];
        return result;
    }
}
