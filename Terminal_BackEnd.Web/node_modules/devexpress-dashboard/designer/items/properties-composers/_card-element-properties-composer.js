/**
* DevExpress Dashboard (_card-element-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import * as ko from 'knockout';
import { getLocalizationById } from '../../../data/localization/_default';
import { CardItemDeltaFormatRule } from '../../../model/format-rules/card-item-delta-format-rule';
import { classCaption } from '../../../model/format-rules/metadata/_dashboard-item-format-rule';
import { wrapWithUndoRedo } from '../../../model/internal/_undo-engine-helper';
import { Card } from '../../../model/items/card/card';
import { CardCenteredLayoutTemplate, CardCompactLayoutTemplate, CardEmptyLayoutTemplate, CardLightweightLayoutTemplate, CardStretchedLayoutTemplate } from '../../../model/items/card/card-layout-template';
import { showSparkline } from '../../../model/items/card/metadata/_card';
import { cardSparklineRowOptions } from '../../../model/items/card/metadata/_card-row';
import { formatRules } from '../../../model/items/metadata/_data-dashboard-item';
import { highlightMinMaxPoints, highlightStartEndPoints, viewType } from '../../../model/items/options/metadata/_sparkline-options';
import { name } from '../../../model/metadata/_base-metadata';
import { collectionEditor, editableListEditor } from '../../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { getDataItemContainerDisplayName } from '../../_display-name-provider';
import { DataItemContainerPropertiesComposer } from './_base-properties-composer';
import { SharedComposers } from './_shared-composers';
export class CardElementPropertiesComposer extends DataItemContainerPropertiesComposer {
    constructor(customizeHandler, editTemplateHandler = (model) => { }, editFormat = (model) => { }, applyTemplateToAllCards = (template) => { }, editRuleHandler = () => { }) {
        super(customizeHandler);
        this.editTemplateHandler = editTemplateHandler;
        this.editFormat = editFormat;
        this.applyTemplateToAllCards = applyTemplateToAllCards;
        this.editRuleHandler = editRuleHandler;
    }
    _composeTabsCore(model, args) {
        var commonTab = new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.Options', this.getCommonWrapper(model, args.dashboardItem, args.dataSourceBrowser)), deltaTab = new AccordionTab(KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions'), sparklineTab = new AccordionTab(KnownTabs.SparklineOptions, 'DashboardWebStringId.Card.SparklineOptions', this.getSparklineWrapper(model)), templatesTab = new AccordionTab(KnownTabs.CardTemplates, 'DashboardWebStringId.CardLayout.Editor.CardLayout'), deltaFormatsTab = new AccordionTab(KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions'), conditionalFormattingTab = new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting'), result = [commonTab, templatesTab, deltaTab, sparklineTab, deltaFormatsTab, conditionalFormattingTab];
        if (model instanceof Card) {
            ko.computed(() => {
                deltaTab.tabModel(SharedComposers.getDeltaOptionsWrapper(model._isTypeEmpty() ? model.deltaOptions : model.cardDeltaOptions));
            });
            conditionalFormattingTab.tabModel(this.getFormatRulesWrapper(model, args.dashboardItem));
            this.fillTemplatesTab(templatesTab, model);
            deltaFormatsTab.tabModel(SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editFormat));
        }
        return result;
    }
    getCommonWrapper(model, dashboardItem, dataSourceBrowser) {
        var properties = [
            Object.assign({ editorOptions: { placeholder: getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, name)
        ];
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: null
        });
    }
    getSparklineWrapper(model) {
        var properties = SharedComposers.getSparklineOptionsProperties();
        var disabledRules = {};
        disabledRules[viewType.propertyName] = [showSparkline.propertyName, '=', false];
        disabledRules[highlightMinMaxPoints.propertyName] = [showSparkline.propertyName, '=', false];
        disabledRules[highlightStartEndPoints.propertyName] = [showSparkline.propertyName, '=', false];
        var visibilityRules = {};
        visibilityRules[showSparkline.propertyName] = () => model._isTypeEmpty();
        return new ObjectPropertiesWrapper({
            model: model,
            properties: [
                showSparkline,
                {
                    container: cardSparklineRowOptions,
                    properties: properties
                }
            ],
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules
        });
    }
    fillTemplatesTab(tab, card) {
        var availableTemplates = ko.computed(() => this.getAvailableTemplates(card));
        var selectedTemplate = ko.computed({
            read: () => {
                return card.layoutTemplate();
            },
            write: (newTemplate) => {
                this.switchTemplate(card, newTemplate);
            }
        });
        const singleChoiceEditorOptions = {
            propertyName: 'title',
            dataSource: availableTemplates(),
            enableEditItem: (item) => !(item instanceof CardEmptyLayoutTemplate),
            editItemHandler: this.editTemplateHandler,
            customToolbarItems: [{
                    name: getLocalizationById('DashboardWebStringId.CardLayout.ApplyToAllCards'),
                    icon: '#dx-dashboard-template-to-all-cards',
                    action: () => { this.applyTemplateToAllCards(selectedTemplate()); }
                }],
        };
        tab.tabModel(new ObjectPropertiesWrapper({
            model: { layoutTemplates: selectedTemplate },
            properties: [{
                    formAdapterItem: editableListEditor(singleChoiceEditorOptions),
                    propertyName: 'layoutTemplates'
                }]
        }));
    }
    switchTemplate(card, newTemplate) {
        var templateChanged = (newTemplate) => {
            return card.layoutTemplate().getType() !== newTemplate.getType();
        };
        if (templateChanged(newTemplate)) {
            card._setTemplateSwitchingOptions(newTemplate);
        }
    }
    getAvailableTemplates(card) {
        var result = [];
        var currentTemplateAdded = false;
        var currentTemplate = card.layoutTemplate();
        var addTemplate = (templateClass) => {
            var templateInstance = new templateClass();
            if (templateInstance.getType() === currentTemplate.getType()) {
                result.push(currentTemplate);
                currentTemplateAdded = true;
            }
            else {
                templateInstance._resetToDefaults();
                result.push(templateInstance);
            }
        };
        addTemplate(CardStretchedLayoutTemplate);
        addTemplate(CardCenteredLayoutTemplate);
        addTemplate(CardCompactLayoutTemplate);
        addTemplate(CardLightweightLayoutTemplate);
        if (!currentTemplateAdded) {
            result.push(currentTemplate);
        }
        return result;
    }
    getFormatRulesWrapper(model, dashboardItem) {
        var collectionEditorOptions = {
            propertyName: classCaption.propertyName,
            createNewItemHandler: () => {
                var rule = new CardItemDeltaFormatRule();
                rule.cardId(model._getDataId());
                return rule;
            },
            editItemHandler: this.editRuleHandler,
            visibleItemsFilter: (rule) => (rule instanceof CardItemDeltaFormatRule) && rule.cardId() === model._getDataId(),
        };
        return new ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [Object.assign(Object.assign({}, formatRules), { formAdapterItem: collectionEditor(collectionEditorOptions) })]
        });
    }
}
__decorate([
    wrapWithUndoRedo
], CardElementPropertiesComposer.prototype, "switchTemplate", null);
