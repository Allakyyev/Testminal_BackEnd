/**
* DevExpress Dashboard (_gauge-element-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { getLocalizationById } from '../../../data/localization/_default';
import { Gauge } from '../../../model/items/gauge/gauge';
import { maximum, minimum } from '../../../model/items/gauge/metadata/_gauge';
import { name } from '../../../model/metadata/_base-metadata';
import { nullableNumberBoxEditor } from '../../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { getDataItemContainerDisplayName } from '../../_display-name-provider';
import { DataItemContainerPropertiesComposer } from './_base-properties-composer';
import { SharedComposers } from './_shared-composers';
export class GaugeElementPropertiesComposer extends DataItemContainerPropertiesComposer {
    constructor(customizeHandler, editFormatHandler = (model) => { }) {
        super(customizeHandler);
        this.editFormatHandler = editFormatHandler;
    }
    _composeTabsCore(model, args) {
        var result = [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.Options', this.getCommonWrapper(model, args.dashboardItem, args.dataSourceBrowser)),
            new AccordionTab(KnownTabs.ScaleOptions, 'DashboardWebStringId.Gauge.ScaleOptions', this.getScaleWrapper(model))
        ];
        if (model instanceof Gauge) {
            result.push(new AccordionTab(KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions', SharedComposers.getDeltaOptionsWrapper(model.deltaOptions)));
            var wrapper = SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editFormatHandler, { title: getLocalizationById('DashboardStringId.GaugeScaleLabelFormatCaption'), numericFormat: model.scaleLabelNumericFormat });
            var formatsTab = new AccordionTab(KnownTabs.NumericFormat, 'DashboardWebStringId.CardLayout.Editor.FormatOptions', wrapper);
            result.push(formatsTab);
        }
        return result;
    }
    getCommonWrapper(model, dashboardItem, dataSourceBrowser) {
        var properties = [
            Object.assign({ editorOptions: { placeholder: getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, name),
        ];
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: null
        });
    }
    getScaleWrapper(model) {
        var disabledRules = {};
        return new ObjectPropertiesWrapper({
            model: model,
            properties: [
                Object.assign(Object.assign({}, minimum), { formAdapterItem: nullableNumberBoxEditor({}) }),
                Object.assign(Object.assign({}, maximum), { formAdapterItem: nullableNumberBoxEditor({}) })
            ],
            disabledFilterRules: disabledRules
        });
    }
}
