/**
* DevExpress Dashboard (_treemap-item-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { groupChildValues } from '../../../model/data-item/metadata/_dimension';
import { groupsLabelContentType, groupsTooltipContentType, layoutAlgorithm, layoutDirection, tilesLabelContentType, tilesTooltipContentType } from '../../../model/items/treemap/metadata/_treemap-item';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { DashboardItemPropertiesComposer } from './_base-properties-composer';
import { SharedComposers } from './_shared-composers';
export class TreemapItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var result = [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model)),
            new AccordionTab(KnownTabs.Layout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutWrapper(model)),
            new AccordionTab(KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', this.getLabelsWrapper(model))
        ];
        return result;
    }
    getLayoutWrapper(model) {
        var properties = [
            layoutAlgorithm,
            layoutDirection
        ];
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
    getLabelsWrapper(model) {
        var properties = [
            tilesLabelContentType,
            tilesTooltipContentType,
            groupsLabelContentType,
            groupsTooltipContentType
        ];
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
    static getTileOptionsTab(model, dataItem) {
        return new AccordionTab(KnownTabs.TileOptions, 'DashboardWebStringId.TileOptions', TreemapItemPropertiesComposer.getTileOptionsWrapper(model, dataItem));
    }
    static getTileOptionsWrapper(model, dataItem) {
        return new ObjectPropertiesWrapper({
            model: dataItem,
            properties: [groupChildValues]
        });
    }
}
