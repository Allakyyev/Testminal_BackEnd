/**
* DevExpress Dashboard (_map-custom-shapefile-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { extend } from '../../../data/_jquery-helpers';
import { customShapefileData, customShapefileUrl } from '../../../model/items/map/metadata/_custom-shape-file';
import { attributeData, shapeData } from '../../../model/items/map/metadata/_custom-shape-file-data';
import { filePickerEditor } from '../../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
export class MapCustomShapefilePropertiesComposer {
    composeTabs(model) {
        var layoutsTab = new AccordionTab(KnownTabs.CustomMapOptions, 'DashboardWebStringId.Map.CustomMapOptions');
        this.fillLayoutsTab(layoutsTab, model);
        return [layoutsTab];
    }
    fillLayoutsTab(tab, model) {
        var switcherInfo = {
            propertyName: 'switcher', displayName: 'DashboardWebStringId.Map.CustomMapOptionsSource', defaultVal: !!model.data.shapeData() ? 'file' : 'url', simpleFormAdapterItem: 'buttonGroupEditor', valuesArray: [
                { value: 'url', displayValue: 'DashboardWebStringId.Map.CustomMapOptionsUrl' },
                { value: 'file', displayValue: 'DashboardWebStringId.Map.CustomMapOptionsFile' }
            ]
        };
        var visibilityRules = {};
        visibilityRules[customShapefileUrl.propertyName] = [switcherInfo.propertyName, '=', 'url'];
        visibilityRules[shapeData.propertyName] = visibilityRules[attributeData.propertyName] = [switcherInfo.propertyName, '=', 'file'];
        var disabilityRules = {};
        disabilityRules[attributeData.propertyName] = [[shapeData.propertyName, '=', shapeData.defaultVal], 'or', [shapeData.propertyName, '=', '']];
        tab.tabModel(new ObjectPropertiesWrapper({
            model: extend(model, {
                switcher: ko.observable(switcherInfo.defaultVal)
            }),
            properties: [
                switcherInfo,
                customShapefileUrl, {
                    container: customShapefileData,
                    properties: [Object.assign(Object.assign({}, shapeData), { formAdapterItem: filePickerEditor({
                                type: 'file',
                                accept: '.shp',
                                placeholderId: 'DashboardWebStringId.Map.ShapeFileLoaded',
                                showClearButton: true,
                                readMode: undefined
                            }) }), Object.assign(Object.assign({}, attributeData), { formAdapterItem: filePickerEditor({
                                type: 'file',
                                accept: '.dbf',
                                placeholderId: 'DashboardWebStringId.Map.AttributeFileLoaded',
                                showClearButton: true,
                                readMode: undefined
                            }) })]
                }
            ],
            visibilityFilterRules: visibilityRules,
            disabledFilterRules: disabilityRules
        }));
    }
}
