/**
* DevExpress Dashboard (_pie-item-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { labelContentType, labelPosition, showPieCaptions, tooltipContentType } from '../../../model/items/pie/metadata/_pie-item';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs, StyleAccordionTab } from '../../properties-controller/_accordion-tab';
import { ContainerTypeSelector } from '../container-type-selector/_container-type-selector';
import { DashboardItemPropertiesComposer } from './_base-properties-composer';
import { SharedComposers } from './_shared-composers';
export class PieItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _composeTabsCore(model) {
        var result = [
            new StyleAccordionTab(KnownTabs.Type, 'DashboardWebStringId.Type', this.getTypeWrapper(model)),
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model, [showPieCaptions])),
            new AccordionTab(KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', SharedComposers.getContentArrangementWrapper(model)),
            new AccordionTab(KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', this.getLabelsWrapper(model))
        ];
        return result;
    }
    getTypeWrapper(model) {
        return new ContainerTypeSelector({
            'Pie': {
                displayName: 'DashboardWebStringId.Pie',
                icon: 'dx-dashboard-pie-pie',
                group: undefined
            },
            'Donut': {
                displayName: 'DashboardWebStringId.Pie.Donut',
                icon: 'dx-dashboard-pie-donut',
                group: undefined
            }
        }, model.pieType);
    }
    getLabelsWrapper(model) {
        var properties = [
            labelContentType,
            tooltipContentType,
            labelPosition,
        ];
        return new ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    }
}
