/**
* DevExpress Dashboard (_data-item-container-collection-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import * as ko from 'knockout';
import { jqueryWhenArray } from '../../../data/_jquery-helpers';
import { DataItemLink } from '../../../model/data-item/data-item';
import { Dimension } from '../../../model/data-item/dimension';
import { DataField, IsOlapHierarchyField } from '../../../model/data-sources/_data-field';
import { wrapWithUndoRedo } from '../../../model/internal/_undo-engine-helper';
import { _areTheSameBindingProviders } from '../../../model/items/_binding-model';
import { getDataItemContainerDisplayName, getDataItemDisplayName } from '../../_display-name-provider';
import { DataItemContainerSeed } from '../binding-details/_data-item-container-seed';
import { DataItemContainerSurface } from '../binding-details/_data-item-container-surface';
export class DataItemContainerCollectionSurface {
    constructor(itemSurface, holder, sectionInfo, warning) {
        this.itemSurface = itemSurface;
        this.holder = holder;
        this.sectionInfo = sectionInfo;
        this.warning = warning;
        this._disposables = [];
        this.supportGroups = true;
        this.addDataItemContainerClick = () => {
            var dataItemContainer = new DataItemContainerSeed(this.itemSurface.dashboardItem, this.sectionInfo.bindingProperty.dataItemType, this.sectionInfo.bindingProperty.fieldConstraint);
            this.selectContainerSample(dataItemContainer);
        };
        this.selectContainerSample = (dataItemContainer) => {
            this.newContainerSample(dataItemContainer);
            var newContainerSurface = new DataItemContainerSurface(dataItemContainer, this.sectionInfo.detailsPropertiesComposer, this.itemSurface, this.removeDataItem);
            newContainerSurface.dataFieldChoosed.add((dataField) => {
                this._chooseDataField(dataField, newContainerSurface);
            });
            this._disposables.push(newContainerSurface.containerType.subscribe(containerType => {
                var newContainer = this.sectionInfo.bindingProperty.creator(containerType);
                this.selectContainerSample(newContainer);
            }));
            this.itemSurface.propertiesController.mainModel({
                data: newContainerSurface,
                containingCollection: this.items
            });
        };
        this.removeDataItem = (container) => {
            this._removeDataItem(container);
        };
        this.dataItemDisplayNameProvider = (dataItem) => {
            return getDataItemDisplayName(this.itemSurface._dataSourceBrowser, this.itemSurface.dashboardItem, dataItem);
        };
        this.getDisplayName = (object) => {
            return getDataItemContainerDisplayName(this.itemSurface._dataSourceBrowser, this.itemSurface.dashboardItem, object);
        };
        this.selectDataItemContainer = (container) => {
            var surface = new DataItemContainerSurface(container, this.sectionInfo.detailsPropertiesComposer, this.itemSurface, this.removeDataItem);
            surface.dataFieldChoosed.add((dataField, link) => {
                if (link) {
                    var newContainer = this.sectionInfo.bindingProperty.creator('', dataField);
                    var binding = newContainer._getBindingModel()[0];
                    newContainer[binding.propertyName].uniqueName(link.uniqueName());
                    var prevContainers = this.items().filter(item => {
                        var bindingProperty = item[binding.propertyName];
                        if (!!bindingProperty) {
                            return bindingProperty.dataItem().groupIndex && bindingProperty.dataItem().groupIndex() === link.dataItem().groupIndex();
                        }
                        return false;
                    });
                    this.items.splice(this.items().indexOf(prevContainers[prevContainers.length - 1]) + 1, 0, newContainer);
                }
            });
            this._disposables.push(surface.containerType.subscribe(containerType => {
                this._processChangeContainerType(containerType, container, surface);
            }));
            this.itemSurface.propertiesController.mainModel({
                data: surface,
                containingCollection: this.items
            });
        };
        this.newContainerSample = ko.observable();
        this.template = 'dx-dashboard-data-item-container-collection';
        this.groups = ko.computed(() => {
            var result = [], position = 0;
            this.items().forEach(dataItemContainer => {
                var dataItem = dataItemContainer[dataItemContainer._getBindingModel()[0].propertyName].dataItem();
                if (dataItem instanceof Dimension && IsOlapHierarchyField(dataItem)) {
                    var dimension = dataItem;
                    var group = result.filter(group => group.groupIndex === dimension.groupIndex())[0];
                    if (!group) {
                        group = {
                            groupIndex: dimension.groupIndex(),
                            items: [],
                            position: position++
                        };
                        result.push(group);
                    }
                    group.items.push(dataItemContainer);
                }
                else {
                    result.push({
                        groupIndex: undefined,
                        items: [dataItemContainer],
                        position: position++
                    });
                }
            });
            return result;
        });
        this._disposables.push(this.groups);
    }
    get items() {
        return this.holder[this.sectionInfo.bindingProperty.propertyName];
    }
    _chooseDataField(dataField, newContainerSurface) {
        var containerModel = [newContainerSurface.model()];
        if (containerModel[0] instanceof DataItemContainerSeed) {
            containerModel = containerModel[0].grow(this.itemSurface.dashboardItem, this.sectionInfo.bindingProperty, dataField);
        }
        this.items.push.apply(this.items, containerModel);
        this.newContainerSample(undefined);
        this.selectDataItemContainer(containerModel[0]);
    }
    _removeDataItem(container) {
        this.groups().forEach(group => {
            if (!!group.items.filter(item => item === container)[0]) {
                group.items.forEach((item) => {
                    this.items.remove(item);
                    item._getBindingModel().forEach(binding => {
                        var dataItem = item[binding.propertyName].dataItem();
                        if (!!dataItem) {
                            this.itemSurface.dashboardItem._removeDataItem(dataItem, true);
                        }
                    });
                });
            }
        });
    }
    _processChangeContainer(newContainer, transfers, container, surface) {
        var position = this.items().indexOf(surface.model());
        transfers.forEach(transfer => {
            let link = newContainer[transfer.newBinding.propertyName];
            this.itemSurface.dashboardItem._updateDataItem(transfer.dataItem, transfer.newBinding, transfer.dataField, link._specifics.acceptableShapingType);
            link.uniqueName(transfer.dataItem.uniqueName());
            this.items.splice(position, 1, newContainer);
            link.dataItem().grabFrom(transfer.dataItem);
        });
        this.selectDataItemContainer(newContainer);
    }
    getCompatibleTransfers(container, newContainer) {
        if (_areTheSameBindingProviders(container, newContainer)) {
            return newContainer
                ._getBindingModel()
                .map(binding => {
                var filledBinding = container._getBindingModel().filter(b => b.propertyName === binding.propertyName)[0];
                if (!filledBinding)
                    return;
                if (!container[filledBinding.propertyName].uniqueName()) {
                    return;
                }
                var dataItem = container[filledBinding.propertyName].dataItem();
                var transferInfo = {
                    filledBinding: filledBinding,
                    dataItem: dataItem,
                    newBinding: binding,
                    dataField: null,
                    promise: this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
                };
                transferInfo.promise.done(field => {
                    transferInfo.dataField = field;
                });
                return transferInfo;
            })
                .filter(t => !!t);
        }
        return [];
    }
    _processChangeContainerType(containerType, container, surface) {
        var newContainer = this.sectionInfo.bindingProperty.creator(containerType);
        if (!!newContainer.grabFrom) {
            newContainer.grabFrom(container);
        }
        var transfers = this.getCompatibleTransfers(container, newContainer);
        if (transfers.length === 0) {
            let filledBinding = container._getBindingModel().filter(b => !!container[b.propertyName].uniqueName())[0];
            let dataItem = container[filledBinding.propertyName].dataItem();
            let binding = newContainer._getBindingModel()[0];
            let transferInfo = {
                filledBinding: filledBinding,
                dataItem: dataItem,
                newBinding: binding,
                dataField: null,
                promise: this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            };
            transferInfo.promise.done(field => {
                transferInfo.dataField = field;
            });
            transfers.push(transferInfo);
        }
        jqueryWhenArray(transfers.map(t => t.promise)).done(() => this._processChangeContainer(newContainer, transfers, container, surface));
    }
    relocateItem(item, placeholderIndex) {
        var dataItem;
        if (item instanceof DataItemLink) {
            dataItem = item.dataItem();
        }
        else if (item['_getBindingModel']) {
            this.items.splice(placeholderIndex, 0, item);
            return;
        }
        this.itemSurface
            ._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            .done((dataField) => {
            let newContainer = this.sectionInfo.bindingProperty.creator(undefined, dataField, dataItem);
            let binding = newContainer._getBindingModel()[0];
            let link = newContainer[binding.propertyName];
            this.itemSurface.dashboardItem._updateDataItem(dataItem, binding, dataField, link._specifics.acceptableShapingType);
            link.uniqueName(dataItem.uniqueName());
            link.dataItem().grabFrom(dataItem);
            this.items.splice(placeholderIndex, 0, newContainer);
        });
    }
    isOlap() {
        var filledLink = this
            .items()
            .reduce((links, container) => links.concat(container._getBindingModel().map(bm => container[bm.propertyName])), [])
            .filter(dil => dil.dataItem())[0];
        return DataField.isOlap(filledLink.dataItem().dataMember());
    }
    errorFactory(container) {
        var errorState = ko.observable(false);
        var fieldPromises = [];
        container
            ._getBindingModel()
            .filter(binding => container[binding.propertyName].dataItem())
            .forEach(binding => {
            fieldPromises.push(this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), container[binding.propertyName].dataItem().dataMember()));
        });
        let isCorruptedDataField = (field) => !field || field.isCorruptedCalcField && field.isCorruptedCalcField();
        jqueryWhenArray(fieldPromises).done((...fields) => {
            errorState(fields.filter(f => isCorruptedDataField(f)).length > 0);
        });
        return errorState;
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
__decorate([
    wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "_chooseDataField", null);
__decorate([
    wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "_removeDataItem", null);
__decorate([
    wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "_processChangeContainer", null);
__decorate([
    wrapWithUndoRedo
], DataItemContainerCollectionSurface.prototype, "relocateItem", null);
