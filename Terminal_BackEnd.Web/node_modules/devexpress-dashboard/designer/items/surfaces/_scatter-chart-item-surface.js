/**
* DevExpress Dashboard (_scatter-chart-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { ScatterChartItemFormatRule } from '../../../model/format-rules/scatter-chart-item-format-rule';
import { FormatRuleSurface } from '../../conditional-formatting/items/surfaces/_format-rule-surface';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { DataItemsPropertiesComposer } from '../properties-composers/_data-item-properties-composer';
import { ScatterChartItemPropertiesComposer } from '../properties-composers/_scatter-chart-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
export class ScatterChartItemSurface extends DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.AxisXMeasure,
            warning: ko.computed(() => !this.dashboardItem.axisXMeasure() && (!!this.dashboardItem.arguments().length || !!this.dashboardItem.weight() || !!this.dashboardItem.axisYMeasure())),
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.AxisYMeasure,
            warning: ko.computed(() => !this.dashboardItem.axisYMeasure() && (!!this.dashboardItem.arguments().length || !!this.dashboardItem.weight() || !!this.dashboardItem.axisXMeasure())),
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.Weight,
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.Arguments, this.addConditionalFormattingOptions.bind(this), ko.computed(() => !!this.dashboardItem.weight() && !this.dashboardItem.arguments().length)));
    }
    getPropertiesComposer() {
        return new ScatterChartItemPropertiesComposer(this._dashboardItemCustomization, this.editCFRuleRuleHandler.bind(this), this.createCFRuleDelegate.bind(this));
    }
    editCFRuleRuleHandler(item, args, container) {
        var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
        surface.startEditing(args);
    }
    createCFRuleDelegate() {
        return new ScatterChartItemFormatRule();
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        const dataItemName = dataItem && dataItem.uniqueName();
        if (!dataItemName)
            return;
        const createRule = () => {
            const cfRule = this.createCFRuleDelegate();
            cfRule.dataItemName(dataItemName);
            return cfRule;
        };
        tabs.push(new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, createRule, (cfRule) => cfRule.dataItemName() === dataItemName, this.editCFRuleRuleHandler.bind(this))));
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
}
surfaceItemsFactory.register('ScatterChart', ScatterChartItemSurface);
