/**
* DevExpress Dashboard (_grid-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Dimension } from '../../../model/data-item/dimension';
import { Measure } from '../../../model/data-item/measure';
import { DataField } from '../../../model/data-sources/_data-field';
import { GridDeltaColumn } from '../../../model/items/grid/grid-columns';
import { GridItem } from '../../../model/items/grid/grid-item';
import { gridColumns } from '../../../model/items/grid/metadata/_grid-item';
import { FormatRuleSurface } from '../../conditional-formatting/items/surfaces/_format-rule-surface';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { CollectionEditorEditItemArguments } from '../../ui-widgets/collection-editor/_collection-editor-viewmodel';
import { DataItemsPropertiesComposer } from '../properties-composers/_data-item-properties-composer';
import { GridColumnPropertiesComposer } from '../properties-composers/_grid-column-properties-composer';
import { GridItemPropertiesComposer } from '../properties-composers/_grid-item-properties-composer';
import { DataItemContainerCollectionSurface } from '../sections/_data-item-container-collection-surface';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
import { DeltaNumericFormatSurface } from './_delta-numeric-format-surface';
export class GridItemSurface extends DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        if (dataItem && dataItem.uniqueName()) {
            var editRuleHandler = (selection, args, container) => {
                var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
                surface.startEditing(args);
            };
            var dataItemApplyTo = dataItem;
            if (dataItemApplyTo instanceof Measure && this.dashboardItem.hiddenMeasures().indexOf(dataItemApplyTo) !== -1) {
                var valueApplyTo = this.dashboardItem.columns().filter(column => !(column instanceof GridDeltaColumn))[0];
                dataItemApplyTo = valueApplyTo && valueApplyTo.actualDataItem;
            }
            tabs.push(new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, DataItemsPropertiesComposer.getCellFormatRuleCreator(dataItem, dataItemApplyTo, 'GridItemFormatRule'), DataItemsPropertiesComposer.getCellFormatRuleFilter(dataItem), editRuleHandler)));
        }
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        var editRuleHandler = (selection, args, container) => {
            var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
            surface.startEditing(args);
        };
        this.editRuleHandler = editRuleHandler;
        var editDeltaFormatHandler = (model) => {
            var surface = new DeltaNumericFormatSurface(model, this.propertiesController);
            surface.startEditing(new CollectionEditorEditItemArguments());
        };
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Columns',
            bindingProperty: {
                propertyName: gridColumns.propertyName,
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddColumn',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureColumn',
                groupName: 'Column',
                creator: (itemType, dataField, existingDataItem) => {
                    if (!itemType) {
                        var dimensionDisplayMode = null;
                        if (existingDataItem) {
                            if (existingDataItem instanceof Dimension) {
                                itemType = 'GridDimensionColumn';
                            }
                            else if (existingDataItem instanceof Measure) {
                                itemType = 'GridMeasureColumn';
                            }
                        }
                        else if (DataField.isMeasure(dataField)) {
                            itemType = 'GridMeasureColumn';
                        }
                        else {
                            itemType = 'GridDimensionColumn';
                            if (dataField.fieldType() === 'Custom') {
                                dimensionDisplayMode = 'Image';
                            }
                        }
                    }
                    var columnJson = { '@ItemType': itemType };
                    if (dimensionDisplayMode) {
                        columnJson['@DisplayMode'] = dimensionDisplayMode;
                    }
                    return this.dashboardItem._createGridColumn(columnJson);
                },
                containersMap: GridItem._gridColumnTypesMap,
                dataItemType: undefined
            },
            detailsPropertiesComposer: new GridColumnPropertiesComposer(this._dataItemContainerCustomization, editRuleHandler, editDeltaFormatHandler)
        };
        this.dataSections.push(new DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => this.dashboardItem.columns().length === 0 && !!this.dashboardItem.sparklineArgument() && !!this.dashboardItem.sparklineArgument().uniqueName())));
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.SparklineArgument,
            warning: ko.computed(() => {
                return !(this.dashboardItem.sparklineArgument() && this.dashboardItem.sparklineArgument().uniqueName())
                    && this.dashboardItem.columns().some((column) => column.itemType() === 'GridSparklineColumn');
            }),
            fieldConstraint: (dataField) => {
                return DataField.isContinous(dataField);
            }
        }));
    }
    getPropertiesComposer() {
        return new GridItemPropertiesComposer(this._dashboardItemCustomization, this.editRuleHandler, this.dataSourceBrowser);
    }
}
surfaceItemsFactory.register('Grid', GridItemSurface);
