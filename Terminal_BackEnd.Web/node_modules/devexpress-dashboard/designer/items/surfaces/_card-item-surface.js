/**
* DevExpress Dashboard (_card-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import * as ko from 'knockout';
import { DataField } from '../../../model/data-sources/_data-field';
import { CardItemFormatRule } from '../../../model/format-rules/card-item-format-rule';
import { wrapWithUndoRedo } from '../../../model/internal/_undo-engine-helper';
import { Card } from '../../../model/items/card/card';
import { CardEmptyLayoutTemplate, CardStretchedLayoutTemplate } from '../../../model/items/card/card-layout-template';
import { LegacySettings } from '../../../viewer-parts/legacy-settings';
import { FormatRuleSurface } from '../../conditional-formatting/items/surfaces/_format-rule-surface';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { CollectionEditorEditItemArguments } from '../../ui-widgets/collection-editor/_collection-editor-viewmodel';
import { getDataItemDisplayName } from '../../_display-name-provider';
import { CardElementPropertiesComposer } from '../properties-composers/_card-element-properties-composer';
import { CardItemPropertiesComposer } from '../properties-composers/_card-item-properties-composer';
import { DataItemsPropertiesComposer } from '../properties-composers/_data-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { DataItemContainerCollectionSurface } from '../sections/_data-item-container-collection-surface';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
import { DeltaNumericFormatSurface } from './_delta-numeric-format-surface';
import { EditCardTemplateSurface } from './_edit-card-template-surface';
export class CardItemSurface extends DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
        this._editRuleHandler = (selection, args, container) => {
            var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
            surface.startEditing(args);
        };
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        if (dataItem && dataItem.uniqueName()) {
            tabs.push(new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, () => {
                let rule = new CardItemFormatRule();
                rule.dataItemName(dataItem.uniqueName());
                return rule;
            }, (rule) => {
                if (rule instanceof CardItemFormatRule) {
                    return rule.dataItemName() === dataItem.uniqueName();
                }
                return false;
            }, this._editRuleHandler)));
        }
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        var applyTemplateToAllCards = (template) => {
            this.applyLayoutTemplateToAllCards(template);
        };
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Cards',
            bindingProperty: {
                propertyName: 'cards',
                groupName: 'Card',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddCard',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureCard',
                creator: (itemType = 'Card') => {
                    var card = new Card(this.dashboardItem, { '@ItemType': itemType });
                    var defaultTemplate;
                    if (LegacySettings._useCardLegacyLayout) {
                        defaultTemplate = new CardEmptyLayoutTemplate();
                    }
                    else {
                        defaultTemplate = new CardStretchedLayoutTemplate();
                        defaultTemplate._resetToDefaults();
                    }
                    card.layoutTemplate(defaultTemplate);
                    return card;
                },
                dataItemType: 'Measure',
                fieldConstraint: (dataField) => !DataField.isMeasure(dataField) || DataField.isNumeric(dataField)
            },
            detailsPropertiesComposer: new CardElementPropertiesComposer(this._dataItemContainerCustomization, (model) => {
                var surface = new EditCardTemplateSurface(model, this.propertiesController, this.dashboardItem.seriesDimensions().map(dim => getDataItemDisplayName(this._dataSourceBrowser, this.dashboardItem, dim)), applyTemplateToAllCards);
                surface.startEditing(new CollectionEditorEditItemArguments());
            }, (model) => {
                var surface = new DeltaNumericFormatSurface(model, this.propertiesController);
                surface.startEditing(new CollectionEditorEditItemArguments());
            }, applyTemplateToAllCards, (selection, args, container) => {
                var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
                surface.startEditing(args);
            })
        };
        this.dataSections.push(new DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.cards().length && (!!this.dashboardItem.seriesDimensions().length || (!!this.dashboardItem.sparklineArgument() && !!this.dashboardItem.sparklineArgument().uniqueName())))));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.SeriesDimension, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.SparklineArgument,
            fieldConstraint: (dataField) => {
                return DataField.isContinous(dataField);
            }
        }));
    }
    getPropertiesComposer() {
        return new CardItemPropertiesComposer(this._dashboardItemCustomization, this._editRuleHandler);
    }
    applyLayoutTemplateToAllCards(template) {
        this.dashboardItem.cards().forEach(card => {
            if (ko.unwrap(card.layoutTemplate) !== ko.unwrap(template)) {
                card.layoutTemplate(template.clone());
            }
        });
    }
}
__decorate([
    wrapWithUndoRedo
], CardItemSurface.prototype, "applyLayoutTemplateToAllCards", null);
surfaceItemsFactory.register('Card', CardItemSurface);
