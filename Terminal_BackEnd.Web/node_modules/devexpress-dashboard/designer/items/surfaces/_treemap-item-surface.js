/**
* DevExpress Dashboard (_treemap-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { TreemapItemPropertiesComposer } from '../properties-composers/_treemap-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
export class TreemapItemSurface extends DataDashboardItemSurface {
    fillSections() {
        var addTileOptions = (tabs, dataItem) => {
            if (dataItem && dataItem.uniqueName()) {
                let argument = this.dashboardItem.arguments().filter(d => d.uniqueName() === dataItem.uniqueName())[0];
                if (this.dashboardItem.arguments().indexOf(argument) !== this.dashboardItem.arguments().length - 1) {
                    tabs.push(TreemapItemPropertiesComposer.getTileOptionsTab(this.dashboardItem, dataItem));
                }
            }
        };
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.Values, undefined, ko.computed(() => !this.dashboardItem.values().length && !!this.dashboardItem.arguments().length)));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.Arguments, addTileOptions));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new TreemapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
surfaceItemsFactory.register('Treemap', TreemapItemSurface);
