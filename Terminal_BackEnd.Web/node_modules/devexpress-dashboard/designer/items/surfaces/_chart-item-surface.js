/**
* DevExpress Dashboard (_chart-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { formatLocalizable, getLocalizationById } from '../../../data/localization/_default';
import { ChartItemFormatRule } from '../../../model/format-rules/chart-item-format-rule';
import { getChartApplyToDataItems } from '../../../model/internal/_chart-utils';
import { NameGenerator } from '../../../model/internal/_helper-classes';
import { ChartIndicator } from '../../../model/items/chart/chart-indicator';
import { ChartPane } from '../../../model/items/chart/chart-pane';
import { ChartSeriesCreator } from '../../../model/items/chart/chart-series-creator';
import { FormatRuleSurface } from '../../conditional-formatting/items/surfaces/_format-rule-surface';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { ChartItemPropertiesComposer } from '../properties-composers/_chart-item-properties-composer';
import { ChartSeriesPropertiesComposer } from '../properties-composers/_chart-series-properties-composer';
import { DataItemsPropertiesComposer } from '../properties-composers/_data-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { DataItemContainerCollectionSurface } from '../sections/_data-item-container-collection-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
import { IndicatorSurface } from './_indicator-item-surface';
export class ChartItemSurface extends DataDashboardItemSurface {
    editCFRuleRuleHandler(item, args, container) {
        var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
        surface.startEditing(args);
    }
    createCFRuleDelegate() {
        return new ChartItemFormatRule();
    }
    editChartIndicatorHandler(item, args, container) {
        var surface = new IndicatorSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
        surface.startEditing(args, this.findExtension);
    }
    createChartIndicatorDelegate() {
        return ChartIndicator._createNew(this.dashboardItem, this._dataSourceBrowser);
    }
    addConditionalFormattingOptions(tabs, dataItem) {
        const dataItemName = dataItem && dataItem.uniqueName();
        if (!dataItemName)
            return;
        const createRule = () => {
            const cfRule = this.createCFRuleDelegate();
            cfRule.dataItemName(dataItemName);
            const dataItemApplyTo = getChartApplyToDataItems(this.dashboardItem, this._dataSourceBrowser)()[0];
            dataItemApplyTo && cfRule.dataItemApplyToName(ko.unwrap(dataItemApplyTo.uniqueName));
            return cfRule;
        };
        tabs.push(new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, createRule, (cfRule) => cfRule.dataItemName() === dataItemName, this.editCFRuleRuleHandler.bind(this))));
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        var createPaneSection = (pane, index) => {
            var numberPostfix = this.dashboardItem.panes().length === 1 ? '' : ' (' + pane.name() + ')', sectionsBeforePanes = 1;
            var sectionInfo = {
                title: formatLocalizable('DashboardWebStringId.Binding.ValuesPattern', numberPostfix),
                bindingProperty: {
                    propertyName: 'series',
                    groupName: 'Series',
                    dataItemType: 'Measure',
                    emptyPlaceholder: 'DashboardWebStringId.Binding.AddValues',
                    selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValues',
                    creator: (itemType = 'Bar') => {
                        return pane.createSeriesByViewType(itemType);
                    },
                    containersMap: ChartSeriesCreator.chartSeriesViewTypesMap
                },
                actions: undefined,
                detailsPropertiesComposer: new ChartSeriesPropertiesComposer(this._dataItemContainerCustomization, ChartSeriesCreator.chartSeriesViewTypesMap, true, true, this.editCFRuleRuleHandler.bind(this), this.createCFRuleDelegate)
            };
            if (index > 0) {
                sectionInfo.actions = [{
                        title: 'DashboardWebStringId.Binding.RemovePane',
                        icon: 'dx-dashboard-remove-small',
                        action: () => {
                            this.dashboardItem.panes.remove(pane);
                            return false;
                        }
                    }];
            }
            this.dataSections.splice(index + sectionsBeforePanes, 0, new DataItemContainerCollectionSurface(this, pane, sectionInfo, ko.computed(() => (this.dashboardItem.arguments().length > 0 || this.dashboardItem.seriesDimensions().length > 0) && this.dashboardItem.panes().every(p => p.series().length === 0))));
        };
        this.dataSections.push({
            template: 'dx-dashboard-add-pane-section',
            addPane: () => {
                var pane = new ChartPane(this.dashboardItem, { '@Name': NameGenerator.generateName(getLocalizationById('DashboardStringId.DefaultNameChartPane') + ' ', this.dashboardItem.panes(), 'name', 1), '@ItemType': 'Pane' });
                this.dashboardItem.panes.push(pane);
            },
            dispose: () => { }
        });
        this._disposables.push(ko.computed(() => {
            var newPanes = this.dashboardItem.panes();
            let lastPaneSectionIndex = 1;
            for (; lastPaneSectionIndex < this.dataSections().length; lastPaneSectionIndex++) {
                if (!(this.dataSections()[lastPaneSectionIndex] instanceof DataItemContainerCollectionSurface)) {
                    break;
                }
            }
            this.dataSections.splice(1, lastPaneSectionIndex - 1);
            this.dashboardItem.panes().forEach((pane, index) => {
                createPaneSection(pane, index);
            });
        }));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.Arguments, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.SeriesDimension, this.addConditionalFormattingOptions.bind(this)));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController, findExtension) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController, findExtension);
    }
    getPropertiesComposer() {
        return new ChartItemPropertiesComposer({
            customizeHandler: this._dashboardItemCustomization,
            editCFRuleHandler: this.editCFRuleRuleHandler.bind(this),
            createCFRuleDelegate: this.createCFRuleDelegate,
            editChartIndicatorHandler: this.editChartIndicatorHandler.bind(this),
            createIndicatorDelegate: this.createChartIndicatorDelegate.bind(this)
        });
    }
}
surfaceItemsFactory.register('Chart', ChartItemSurface);
