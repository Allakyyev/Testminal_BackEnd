/**
* DevExpress Dashboard (_date-filter-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { DataField } from '../../../model/data-sources/_data-field';
import { dateFilterDimension } from '../../../model/items/filter-items/metadata/_date-filter-item';
import { CustomRangePropertiesComposer } from '../properties-composers/_custom-range-properties-composer';
import { DateFilterItemPropertiesComposer } from '../properties-composers/_date-filter-item-properties-composer';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
export class DateFilterItemSurface extends DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: {
                title: 'DashboardStringId.DescriptionItemDimension',
                bindingProperty: {
                    propertyName: dateFilterDimension.propertyName,
                    dataItemType: 'Dimension',
                    emptyPlaceholder: 'DashboardStringId.DescriptionItemDimension',
                    selectedPlaceholder: 'DashboardStringId.DescriptionItemDimension'
                }
            },
            fieldConstraint: (dataField) => DataField.isDateTime(dataField)
        }));
    }
    getPropertiesComposer() {
        return new DateFilterItemPropertiesComposer(this._dashboardItemCustomization, (model) => {
            var composer = new CustomRangePropertiesComposer();
            var tabs = composer.composeTabs(model, {
                argument: this.dashboardItem.dimension(),
                rangeFilterItem: this.dashboardItem
            });
            this.propertiesController.secondaryModel({
                displayText: model.name,
                data: {
                    model: model,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: this.dashboardItem.dateTimePeriods
            });
        });
    }
}
surfaceItemsFactory.register('DateFilter', DateFilterItemSurface);
