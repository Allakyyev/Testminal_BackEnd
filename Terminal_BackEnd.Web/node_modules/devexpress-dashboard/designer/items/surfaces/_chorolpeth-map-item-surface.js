/**
* DevExpress Dashboard (_chorolpeth-map-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { DataField } from '../../../model/data-sources/_data-field';
import { ChoroplethMapItem } from '../../../model/items/map/chorolpeth-map-item';
import { CollectionEditorEditItemArguments } from '../../ui-widgets/collection-editor/_collection-editor-viewmodel';
import { ChoroplethMapElementPropertiesComposer } from '../properties-composers/_choropleth-map-element-properties-composer';
import { ChoroplethMapItemPropertiesComposer } from '../properties-composers/_choropleth-map-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { DataItemContainerCollectionSurface } from '../sections/_data-item-container-collection-surface';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
import { DeltaNumericFormatSurface } from './_delta-numeric-format-surface';
export class ChoroplethMapItemSurface extends DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.AttributeDimension,
            fieldConstraint: (field) => DataField.isNumeric(field) || field.fieldType() === 'Bool' || field.fieldType() === 'Text',
            warning: ko.computed(() => !this.dashboardItem.attributeDimension() && !!(this.dashboardItem.maps().length || this.dashboardItem.tooltipMeasures().length))
        }));
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Maps',
            bindingProperty: {
                propertyName: 'maps',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddMap',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureMap',
                creator: (itemType = 'ValueMap') => {
                    return this.dashboardItem._createMap({ '@ItemType': itemType });
                },
                containersMap: ChoroplethMapItem.choroplethMapTypesMap,
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new ChoroplethMapElementPropertiesComposer(this._dataItemContainerCustomization, (model) => {
                var surface = new DeltaNumericFormatSurface(model, this.propertiesController);
                surface.startEditing(new CollectionEditorEditItemArguments());
            })
        };
        this.dataSections.push(new DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.maps().length && !!(this.dashboardItem.attributeDimension() || this.dashboardItem.tooltipMeasures().length))));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.TooltipMeasures));
    }
    getPropertiesComposer() {
        return new ChoroplethMapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
surfaceItemsFactory.register('ChoroplethMap', ChoroplethMapItemSurface);
