/**
* DevExpress Dashboard (_pivot-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Measure } from '../../../model/data-item/measure';
import { FormatRuleSurface } from '../../conditional-formatting/items/surfaces/_format-rule-surface';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { DataItemsPropertiesComposer } from '../properties-composers/_data-item-properties-composer';
import { PivotItemPropertiesComposer } from '../properties-composers/_pivot-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
export class PivotItemSurface extends DataDashboardItemSurface {
    addConditionalFormattingOptions(tabs, dataItem) {
        if (dataItem && dataItem.uniqueName()) {
            var editRuleHandler = (selection, args, container) => {
                var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
                surface.startEditing(args);
            };
            var dataItemApplyTo = dataItem;
            if (dataItemApplyTo instanceof Measure && this.dashboardItem.hiddenMeasures().indexOf(dataItemApplyTo) !== -1) {
                dataItemApplyTo = this.dashboardItem.values()[0];
            }
            tabs.push(new AccordionTab(KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, DataItemsPropertiesComposer.getCellFormatRuleCreator(dataItem, dataItemApplyTo, 'PivotItemFormatRule'), DataItemsPropertiesComposer.getCellFormatRuleFilter(dataItem), editRuleHandler)));
        }
    }
    extendHiddenMeasuresTabs(tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    }
    fillSections() {
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.Values, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.Columns, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.Rows, this.addConditionalFormattingOptions.bind(this)));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        var editRuleHandler = (selection, args, container) => {
            var surface = new FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
            surface.startEditing(args);
        };
        return new PivotItemPropertiesComposer(this._dashboardItemCustomization, editRuleHandler);
    }
}
surfaceItemsFactory.register('Pivot', PivotItemSurface);
