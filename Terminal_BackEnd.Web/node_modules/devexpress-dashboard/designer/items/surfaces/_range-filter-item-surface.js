/**
* DevExpress Dashboard (_range-filter-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { DataField } from '../../../model/data-sources/_data-field';
import { ChartSeriesCreator } from '../../../model/items/chart/chart-series-creator';
import { RangeFilterItem } from '../../../model/items/range-filter/range-filter-item';
import { CustomRangePropertiesComposer } from '../properties-composers/_custom-range-properties-composer';
import { RangeFilterItemPropertiesComposer } from '../properties-composers/_range-filter-item-properties-composer';
import { RangeSeriesPropertiesComposer } from '../properties-composers/_range-series-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { DataItemContainerCollectionSurface } from '../sections/_data-item-container-collection-surface';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
export class RangeFilterItemSurface extends DataDashboardItemSurface {
    fillSections() {
        var creator = ChartSeriesCreator.getSeriesCreator(this.dashboardItem);
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Values',
            bindingProperty: {
                propertyName: 'series',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddValue',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue',
                creator: (itemType = 'Line') => {
                    return creator(itemType);
                },
                containersMap: RangeFilterItem.rangeSeriesViewTypesMap,
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new RangeSeriesPropertiesComposer(this._dataItemContainerCustomization)
        };
        this.dataSections.push(new DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.series().length && (!!this.dashboardItem.argument() || !!this.dashboardItem.seriesDimensions().length))));
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.SingleArgument,
            fieldConstraint: (dataField) => DataField.isContinous(dataField) && !DataField.isOlapHierarchy(dataField),
            warning: ko.computed(() => (!!this.dashboardItem.series().length || !!this.dashboardItem.seriesDimensions().length) && !this.dashboardItem.argument())
        }));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.SeriesDimension));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new RangeFilterItemPropertiesComposer(this._dashboardItemCustomization, (model) => {
            var composer = new CustomRangePropertiesComposer();
            var tabs = composer.composeTabs(model, {
                argument: this.dashboardItem.argument(),
                rangeFilterItem: this.dashboardItem
            });
            this.propertiesController.secondaryModel({
                displayText: model.name,
                data: {
                    model: model,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: this.dashboardItem.dateTimePeriods
            });
        });
    }
}
surfaceItemsFactory.register('RangeFilter', RangeFilterItemSurface);
