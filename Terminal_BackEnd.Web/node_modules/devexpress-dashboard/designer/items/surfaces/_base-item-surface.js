/**
* DevExpress Dashboard (_base-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { format as stringFormat } from 'devextreme/core/utils/string';
import * as ko from 'knockout';
import { isNonCollectionDataField } from '../../../common/_data-source-browser';
import { getLocalizationById } from '../../../data/localization/_default';
import { createJQueryDeferred } from '../../../data/_jquery-helpers';
import { DisposableObject } from '../../../model/disposable-object';
import { wrapWithUndoRedo } from '../../../model/internal/_undo-engine-helper';
import { _customizeTabs } from '../../accordion-tab-options';
import { ConfirmDialogViewModel } from '../../confirm-dialog/_confirm-dialog';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { SectionDescriptors } from '../_section-descriptors';
export class BaseItemSurface extends DisposableObject {
    constructor() {
        super(...arguments);
        this._dashboardItemCustomization = (tabs, model, args) => {
            if (this.customizeDashboardItemTabs) {
                this.customizeDashboardItemTabs({
                    dashboardItem: model,
                    addSection: (customTabOption) => {
                        _customizeTabs(tabs, customTabOption, model);
                    }
                });
            }
        };
    }
    getPropertiesComposer() {
        throw "'getPropertiesComposer' method is not implemented.";
    }
}
export class DataDashboardItemSurface extends BaseItemSurface {
    constructor(dashboardItem, dashboardModel, _dataSourceBrowser, notificationController, findExtension) {
        super();
        this.dashboardItem = dashboardItem;
        this.dashboardModel = dashboardModel;
        this._dataSourceBrowser = _dataSourceBrowser;
        this.notificationController = notificationController;
        this.findExtension = findExtension;
        this._dataItemContainerCustomization = (tabs, target, args) => {
            if (this.customizeDataItemContainerTabs) {
                this.customizeDataItemContainerTabs({
                    dashboardItem: args.dashboardItem,
                    dataItemContainer: target,
                    addSection: (customTabOption) => {
                        _customizeTabs(tabs, customTabOption, target);
                    }
                });
            }
        };
        this.dataSourceName = ko.observable();
        this.dataMemberName = ko.observable();
        this.dataSourceDisplayText = ko.computed(() => {
            var dsName = this.dashboardItem.dataSource();
            if (!!dsName) {
                var dataSource = this._dataSourceBrowser.findDataSource(dsName);
                if (!!dataSource) {
                    if (dataSource.supportDataMembers && this._dataSourceBrowser.isLoading()) {
                        return 'DashboardStringId.MessageLoading';
                    }
                    return this.dashboardItem.dataMember() ? dataSource.name() + '/' + this.dashboardItem.dataMember() : dataSource.name();
                }
            }
            return 'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton';
        });
        this.needSetDataSource = ko.computed(() => {
            var dsName = this.dashboardItem.dataSource();
            if (!!dsName) {
                var dataSource = this._dataSourceBrowser.findDataSource(dsName);
                if (!!dataSource && dataSource.supportDataMembers) {
                    return !this.dashboardItem.dataMember();
                }
                return !dataSource;
            }
            return true;
        });
        this.changeDataSourcePanelVisible = ko.observable(false);
        this.template = 'dx-dashboard-base-item-surface';
        this.dataSections = ko.observableArray([]);
        this.fillSections();
        if (this.showDefaultSections) {
            this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.HiddenDimensions, this.extendHiddenDimensionsTabs.bind(this)));
            this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.HiddenMeasures, this.extendHiddenMeasuresTabs.bind(this)));
        }
        this.confirmDialogViewModel = new ConfirmDialogViewModel();
        this.toDispose(this.dataSourceDisplayText);
        this.dataSections().forEach(section => this.toDispose(section));
    }
    get showDefaultSections() {
        return true;
    }
    fillSections() {
    }
    extendHiddenDimensionsTabs(tabs, model) {
    }
    extendHiddenMeasuresTabs(tabs, model) {
    }
    changeDataSource() {
        if (!this.changeDataSourcePanelVisible()) {
            this.dataSourceName(this.dashboardItem.dataSource());
            this.dataMemberName(this.dashboardItem.dataMember());
        }
        this.changeDataSourcePanelVisible(!this.changeDataSourcePanelVisible());
    }
    _changeDataSource() {
        this.dashboardItem.dataSource(this.dataSourceName());
        this.dashboardItem.dataMember(this.dataMemberName());
        let newDataSource = this._dataSourceBrowser.findDataSource(this.dataSourceName());
        let notificationStr = stringFormat(getLocalizationById('DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage'), this.dashboardItem.name(), `${newDataSource.name()}${!!this.dataMemberName() ? ` (${this.dataMemberName()})` : ''}`);
        this.notificationController.showSuccess(notificationStr);
    }
    saveDataSourceChanges() {
        if (!!this.propertiesController) {
            this.propertiesController.mainModel(null);
        }
        this._changeDataSource();
        this.changeDataSourcePanelVisible(false);
    }
    get dataSourceBrowser() {
        return {
            getDataFieldsArray: (dataSourceName) => {
                var deferred = createJQueryDeferred();
                if (!dataSourceName) {
                    return deferred.resolve(this.dashboardModel.dataSources().map(ds => {
                        return {
                            dataSourceName: ds.componentName(),
                            dataMemberName: '',
                            dataMember: ds.componentName,
                            name: ds.componentName,
                            displayName: ds.name,
                            fieldType: ko.observable('Unknown'),
                            nodeType: ko.observable('DataSource'),
                            isDataFieldNode: ko.observable(!ds.supportDataMembers)
                        };
                    })).promise();
                }
                this._dataSourceBrowser.getDataFieldsArray(dataSourceName, '', '', isNonCollectionDataField).done(dataMembers => {
                    deferred.resolve(dataMembers.map(dm => {
                        return {
                            dataSourceName: dataSourceName,
                            dataMemberName: dm.dataMember(),
                            dataMember: dm.dataMember,
                            name: dm.name,
                            displayName: dm.displayName,
                            fieldType: dm.fieldType,
                            nodeType: dm.nodeType,
                            isDataFieldNode: ko.observable(true)
                        };
                    }));
                });
                return deferred.promise();
            },
            splitFullPath: (...args) => this._dataSourceBrowser.splitFullPath.apply(this._dataSourceBrowser, args),
            findDataSource: (dataSourceName) => this._dataSourceBrowser.findDataSource(dataSourceName)
        };
    }
}
__decorate([
    wrapWithUndoRedo
], DataDashboardItemSurface.prototype, "_changeDataSource", null);
