/**
* DevExpress Dashboard (_custom-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { format as stringFormat } from 'devextreme/core/utils/string';
import { getLocalizationById } from '../../../data/localization/_default';
import { CustomItem } from '../../../model/items/custom-item/custom-item';
import { _customizeTabs } from '../../accordion-tab-options';
import { ObjectPropertiesWrapper } from '../../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../../properties-controller/_accordion-tab';
import { DashboardItemPropertiesComposer } from '../properties-composers/_base-properties-composer';
import { SharedComposers } from '../properties-composers/_shared-composers';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
import { CustomItemPropertiesComposerHelper } from './_custom-item-properties-composer-helper';
export class CustomItemPropertiesComposer extends DashboardItemPropertiesComposer {
    constructor(customizeHandler) {
        super(customizeHandler);
    }
    _mapLegacyPropertiesToTabs(model) {
        const propertiesByTabs = model.legacyCustomProperties && model.legacyCustomProperties.reduce((acc, property) => {
            const tabName = property.sectionName || KnownTabs.Common;
            acc[tabName] = acc[tabName] || [];
            acc[tabName].push(CustomItemPropertiesComposerHelper.convertToDashboardSerializationInfo(property));
            return acc;
        }, {});
        const specificProperties = propertiesByTabs[KnownTabs.Common] ? [
            {
                container: { propertyName: 'customProperties' },
                properties: propertiesByTabs[KnownTabs.Common] || []
            }
        ] : [];
        return [
            new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model, specificProperties)),
            ...Object.keys(propertiesByTabs)
                .filter(tabName => tabName !== KnownTabs.Common)
                .map(tabName => new AccordionTab(tabName, tabName, new ObjectPropertiesWrapper({
                model: model.customProperties,
                properties: propertiesByTabs[tabName]
            })))
        ];
    }
    _composeTabsCore(model) {
        if (model._optionsPanelSections) {
            return [
                new AccordionTab(KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', SharedComposers.getCommonWrapper(model)),
                ...model._optionsPanelSections.reduce((tabs, section) => {
                    _customizeTabs(tabs, section, model);
                    return tabs;
                }, [])
            ];
        }
        else {
            return this._mapLegacyPropertiesToTabs(model);
        }
    }
}
export class CustomItemSurface extends DataDashboardItemSurface {
    get showDefaultSections() {
        return this.dashboardItem.customBindings.length > 0;
    }
    fillSections() {
        var format = (localizationId, arg1) => stringFormat(getLocalizationById(localizationId), getLocalizationById(arg1));
        this.dashboardItem.customBindings.forEach(binding => {
            var sectionInfo = {
                title: binding.displayName,
                bindingProperty: {
                    propertyName: CustomItem._getBindingLinkName(binding.propertyName),
                    dataItemType: binding.dataItemType,
                    emptyPlaceholder: binding.emptyPlaceholder || format('DashboardWebStringId.Binding.DefaultEmptyPlaceholder', binding.displayName),
                    selectedPlaceholder: binding.selectedPlaceholder || format('DashboardWebStringId.Binding.DefaultSelectedPlaceholder', binding.displayName)
                }
            };
            if (binding.array) {
                this.dataSections.push(new DataItemCollectionSurface(this, sectionInfo));
            }
            else {
                this.dataSections.push(new SingleDataItemSurface({
                    itemSurface: this,
                    sectionInfo: sectionInfo,
                    fieldConstraint: (dataField) => {
                        return !binding.constraints || !binding.constraints.allowedTypes || binding.constraints.allowedTypes.indexOf(dataField.fieldType()) >= 0;
                    }
                }));
            }
        });
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new CustomItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
surfaceItemsFactory.register('CustomItem', CustomItemSurface);
