/**
* DevExpress Dashboard (_gauge-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Gauge } from '../../../model/items/gauge/gauge';
import { CollectionEditorEditItemArguments } from '../../ui-widgets/collection-editor/_collection-editor-viewmodel';
import { GaugeElementPropertiesComposer } from '../properties-composers/_gauge-element-properties-composer';
import { GaugeItemPropertiesComposer } from '../properties-composers/_gauge-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { DataItemContainerCollectionSurface } from '../sections/_data-item-container-collection-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
import { DeltaNumericFormatSurface } from './_delta-numeric-format-surface';
export class GaugeItemSurface extends DataDashboardItemSurface {
    fillSections() {
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Gauges',
            bindingProperty: {
                propertyName: 'gauges',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddGauge',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureGauge',
                creator: (itemType = 'GaugeElement') => {
                    return new Gauge(this.dashboardItem, { '@ItemType': itemType });
                },
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new GaugeElementPropertiesComposer(this._dataItemContainerCustomization, (model) => {
                var surface = new DeltaNumericFormatSurface(model, this.propertiesController);
                surface.startEditing(new CollectionEditorEditItemArguments());
            })
        };
        this.dataSections.push(new DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(() => !this.dashboardItem.gauges().length && !!this.dashboardItem.seriesDimensions().length)));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.SeriesDimension));
    }
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    getPropertiesComposer() {
        return new GaugeItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
surfaceItemsFactory.register('Gauge', GaugeItemSurface);
