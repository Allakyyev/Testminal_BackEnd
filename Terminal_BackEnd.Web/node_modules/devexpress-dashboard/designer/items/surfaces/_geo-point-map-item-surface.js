/**
* DevExpress Dashboard (_geo-point-map-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { DataField } from '../../../model/data-sources/_data-field';
import { GeoPointMapItemPropertiesComposer } from '../properties-composers/_geopoint-map-item-properties-composer';
import { DataItemCollectionSurface } from '../sections/_data-item-collection-surface';
import { SingleDataItemSurface } from '../sections/_single-data-item-surface';
import { SectionDescriptors, surfaceItemsFactory } from '../_section-descriptors';
import { DataDashboardItemSurface } from './_base-item-surface';
export class GeoPointItemSurface extends DataDashboardItemSurface {
    constructor(dashboardItem, dashboardModel, dataSourceBrowser, notificationController) {
        super(dashboardItem, dashboardModel, dataSourceBrowser, notificationController);
    }
    fillSections() {
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.Latitude,
            fieldConstraint: field => DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.latitude() && !!(this.dashboardItem.longitude() || this.dashboardItem.value() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.Longitude,
            fieldConstraint: field => DataField.isNumeric(field),
            warning: ko.computed(() => !this.dashboardItem.longitude() && !!(this.dashboardItem.latitude() || this.dashboardItem.value() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: SectionDescriptors.Value,
            warning: ko.computed(() => !this.dashboardItem.value() && !!(this.dashboardItem.latitude() || this.dashboardItem.longitude() || this.dashboardItem.tooltipDimensions().length || this.dashboardItem.tooltipMeasures().length))
        }));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.TooltipDimensions));
        this.dataSections.push(new DataItemCollectionSurface(this, SectionDescriptors.TooltipMeasures));
    }
    getPropertiesComposer() {
        return new GeoPointMapItemPropertiesComposer(this._dashboardItemCustomization);
    }
}
surfaceItemsFactory.register('GeoPointMap', GeoPointItemSurface);
