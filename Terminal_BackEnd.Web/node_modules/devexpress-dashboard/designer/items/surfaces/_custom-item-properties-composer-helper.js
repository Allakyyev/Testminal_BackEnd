/**
* DevExpress Dashboard (_custom-item-properties-composer-helper.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { koUtils } from '@devexpress/analytics-core/analytics-internal';
import { Editor } from '@devexpress/analytics-core/analytics-widgets';
import { dxFileImagePicker } from '@devexpress/analytics-core/analytics-widgets-internal';
import * as ko from 'knockout';
import { getLocalizationById } from '../../../data/localization/_default';
import { editorTemplates } from '../../../model/metadata/_custom-item-metadata';
import { buttonGroupEditor, checkBoxEditor, dateBoxEditor, getFieldValue, listEditor, numberBoxEditor, selectBoxEditor, textBoxEditor } from '../../form-adapter/_form-adapter-editors';
const imageEditor = () => {
    return {
        template: (args) => {
            var div = document.createElement('div');
            new dxFileImagePicker(div, {
                placeholderId: 'Image',
                accept: 'image/*',
                type: 'img',
                value: getFieldValue(args),
                onValueChanged: (e) => {
                    args.component.updateData(args.dataField, e.value);
                }
            });
            return div;
        }
    };
};
const radioGroupEditor = (values) => ({
    editorType: 'dxRadioGroup',
    editorOptions: {
        dataSource: values,
        valueExpr: 'value',
        displayExpr: 'displayValueId',
    }
});
export class CustomItemPropertiesComposerHelper {
    static _getEditorValues(serializableInfo) {
        if (serializableInfo.values) {
            let values = koUtils.unwrap(serializableInfo.values);
            return Object.keys(values).map(k => ({ value: k, displayValueId: values[k] }));
        }
        else if (serializableInfo.valuesArray)
            return serializableInfo.valuesArray.map((val) => ({ value: val.value, displayValueId: val.displayValue }));
        return undefined;
    }
    static _mapEditor(serializableInfo) {
        if (!serializableInfo.editor) {
            return null;
        }
        switch (serializableInfo.editor) {
            case editorTemplates.date:
                return dateBoxEditor();
            case editorTemplates.numeric:
                return numberBoxEditor();
            case editorTemplates.checkBox:
                return checkBoxEditor({ text: getLocalizationById(serializableInfo.displayName) });
            case editorTemplates.text:
                return textBoxEditor();
            case editorTemplates.combobox:
                return selectBoxEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case editorTemplates.bool:
                return buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonOn' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonOff' }]);
            case editorTemplates.boolYesNo:
                return buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonYes' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonNo' }]);
            case editorTemplates.buttonGroup:
                return buttonGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case editorTemplates.boolVisibleHidden:
                return buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonVisible' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonHidden' }]);
            case editorTemplates.list:
                return listEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case editorTemplates.radioGroup:
                return radioGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case editorTemplates.image:
                return imageEditor();
            default:
                let template = serializableInfo.editor.header || serializableInfo.editor.custom;
                return (context) => ({
                    customEditorType: template,
                    template: (args, itemElement) => {
                        let element = itemElement;
                        let info = serializableInfo;
                        var editor = new Editor(info, 0);
                        editor._set('_model', args.component.option('formData'));
                        ko.applyBindingsToNode(element, { template: { name: template, data: editor } }, context.bindingContext);
                    }
                });
        }
    }
    static convertToDashboardSerializationInfo(property) {
        return {
            propertyName: property.propertyName,
            formAdapterItem: Object.assign(Object.assign({}, CustomItemPropertiesComposerHelper._mapEditor(property)), { label: {
                    text: getLocalizationById(property.displayName),
                    visible: !!property.displayName,
                }, validationRules: property.validationRules || [] }),
            editorOptions: property.editorOptions,
        };
    }
}
