/**
* DevExpress Dashboard (_interactivity-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { BoundImageItem } from '../../model/items/bound-image-item';
import { isMasterFilterCrossDataSource } from '../../model/items/metadata/_data-dashboard-item';
import { commonInteractivityOptions, ignoreMasterFiltersDefaultFalse, isDrillDownEnabled, isMasterFilterDefaultFalse, masterFilterMode, targetDimensions } from '../../model/items/options/metadata/_interactivity-options';
import { PivotItem } from '../../model/items/pivot/pivot-item';
import { TextBoxItem } from '../../model/items/text-box-item';
import { ObjectPropertiesWrapper } from '../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../properties-controller/_accordion-tab';
export class InteractivityPropertiesComposer {
    constructor(propertiesController) {
        this.propertiesController = propertiesController;
    }
    composeTabs(model) {
        var result = [
            new AccordionTab(KnownTabs.Interactivity, 'DashboardWebStringId.InteractivityOptions')
        ];
        var properties = [{
                container: commonInteractivityOptions,
                properties: [
                    isMasterFilterDefaultFalse,
                    masterFilterMode,
                    isDrillDownEnabled,
                    targetDimensions,
                    ignoreMasterFiltersDefaultFalse
                ]
            }];
        if (!((model instanceof PivotItem) || (model instanceof BoundImageItem) || (model instanceof TextBoxItem))) {
            properties.push(isMasterFilterCrossDataSource);
        }
        var disabledRules = {};
        disabledRules[isMasterFilterCrossDataSource.propertyName] = [masterFilterMode.propertyName, '=', 'None'];
        if (model.interactivityOptions.targetDimensions) {
            model.interactivityOptions.targetDimensions.subscribe((newTargetDimension) => {
                if (newTargetDimension === 'Points') {
                    model.interactivityOptions.isDrillDownEnabled(false);
                }
            });
            disabledRules[isDrillDownEnabled.propertyName] = [targetDimensions.propertyName, '=', 'Points'];
        }
        result[0].tabModel(new ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        }));
        return result;
    }
}
