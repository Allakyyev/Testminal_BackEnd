/**
* DevExpress Dashboard (_item-filter-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { getLocalizationById } from '../../data/localization/_default';
import { Dimension, OlapDataSource } from '../../model';
import { safeComputed } from '../../model/internal/_knockout-utils';
import { filterString, visibleDataFilterString } from '../../model/items/metadata/_data-dashboard-item';
import { createItemFilterOptions } from '../filtering/_filter-utils';
import { ItemFilterDisplayNameProvider } from '../filtering/_item-filter-display-name-provider';
import { ItemFilterItemsProvider } from '../filtering/_item-filter-items-provider';
import { filterEditor, simpleFilterEditor } from '../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../properties-controller/_accordion-tab';
export class ItemFilterPropertiesComposer {
    constructor(dataSourceBrowser) {
        this.dataSourceBrowser = dataSourceBrowser;
    }
    composeTabs(item) {
        if (this.dataSourceBrowser.findDataSource(item.dataSource()) instanceof OlapDataSource) {
            var itemFilterTab = new AccordionTab(KnownTabs.ItemFilter, 'DashboardWebStringId.AccordionTab.ItemFilter');
            this._fillSimpleFilterTab(itemFilterTab, item, this.dataSourceBrowser);
            return [itemFilterTab];
        }
        else {
            var itemFilterTab = new AccordionTab(KnownTabs.ItemFilter, 'DashboardWebStringId.AccordionTab.ItemFilter');
            var visibleDataFilterTab = new AccordionTab(KnownTabs.VisibleDataFilter, 'DashboardWebStringId.AccordionTab.VisibleDataFilter');
            this._fillFilterTab(itemFilterTab, item, item.filterString, this.dataSourceBrowser, filterString);
            this._fillFilterTab(visibleDataFilterTab, item, item.visibleDataFilterString, this.dataSourceBrowser, visibleDataFilterString);
            return [itemFilterTab, visibleDataFilterTab];
        }
    }
    _fillFilterTab(tab, dashboardItem, targetObservable, dataSourceBrowser, propertyDescriptor) {
        let wrapper = new ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [
                Object.assign(Object.assign({}, propertyDescriptor), { formAdapterItem: filterEditor({
                        fieldListProvider: ko.observable(new ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, (di) => { return di instanceof Dimension; })),
                        options: createItemFilterOptions(targetObservable, undefined, dataSourceBrowser),
                        displayNameProvider: new ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
                    }) })
            ],
            summary: safeComputed({ filterString: targetObservable }, (args) => { return !!args.filterString ? getLocalizationById('DashboardWebStringId.ButtonOn') : ''; })
        });
        tab.tabModel(wrapper);
    }
    _fillSimpleFilterTab(tab, dashboardItem, dataSourceBrowser) {
        let wrapper = new ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [
                Object.assign(Object.assign({}, filterString), { formAdapterItem: simpleFilterEditor({
                        dashboardItem, dataSourceBrowser
                    }) })
            ],
            summary: safeComputed({ filterString: dashboardItem.filterString }, (args) => { return !!args.filterString ? getLocalizationById('DashboardWebStringId.ButtonOn') : ''; })
        });
        tab.tabModel(wrapper);
    }
}
