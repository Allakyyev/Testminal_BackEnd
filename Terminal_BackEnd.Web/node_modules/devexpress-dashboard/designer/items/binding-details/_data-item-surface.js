/**
* DevExpress Dashboard (_data-item-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import * as ko from 'knockout';
import { isNonCollectionDataField } from '../../../common/_data-source-browser';
import { createJQueryCallbacks } from '../../../data/_jquery-helpers';
import { DataItemLink } from '../../../model/data-item/data-item';
import { Measure } from '../../../model/data-item/measure';
import { DataField, IsOlapHierarchyField } from '../../../model/data-sources/_data-field';
import { wrapWithUndoRedo } from '../../../model/internal/_undo-engine-helper';
import { DataItemsPropertiesComposer } from '../properties-composers/_data-item-properties-composer';
export class DataItemSurface {
    constructor(model, binding, container, dataSourceBrowser, propertiesController, unwrappedDataItem, fieldConstraint, extendTabsHandler) {
        this.model = model;
        this.binding = binding;
        this.propertiesController = propertiesController;
        this.unwrappedDataItem = unwrappedDataItem;
        this.fieldConstraint = fieldConstraint;
        this.extendTabsHandler = extendTabsHandler;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
        this.choosenField = ko.observable();
        this.newItemCreated = createJQueryCallbacks();
        this.itemSelected = createJQueryCallbacks();
        var composer = new DataItemsPropertiesComposer();
        var updatePropertiesTabs = () => {
            var result = composer.composeTabs(this.model, {
                dataDashboardItem: container,
                choosenField: this.choosenField,
                dataSourceBrowser: dataSourceBrowser,
                unwrappedDataItem: this.unwrappedDataItem,
                constraint: this.fullConstraint,
                propertiesController: this.propertiesController
            });
            this.extendTabsHandler && this.extendTabsHandler(result, this.model.dataItem());
            var promise = dataSourceBrowser.getDataFieldsArray(container.dataSource(), container.dataMember(), '', isNonCollectionDataField);
            promise.done(() => {
                let oldTabs = this.propertiesTabs.peek();
                oldTabs && oldTabs.forEach(tab => tab.dispose());
                this.propertiesTabs(result);
            });
        };
        var subscribeToFieldChanges = () => {
            this._disposables.push(this.choosenField.subscribe((newField) => {
                if (model.dataItem() && model.dataItem().dataMember()) {
                    this._changeExistingField(container, model, newField, updatePropertiesTabs);
                }
                else {
                    this._changeNewField(container, newField, updatePropertiesTabs);
                }
            }));
            updatePropertiesTabs();
        };
        if (!!model.dataItem()) {
            dataSourceBrowser
                .findDataField(container.dataSource(), container.dataMember(), model.dataItem().dataMember())
                .done((field) => {
                if (!!field && field !== this.choosenField()) {
                    this.choosenField(field);
                }
                subscribeToFieldChanges();
            });
        }
        else {
            subscribeToFieldChanges();
        }
        this._disposables.push({
            dispose: () => {
                this.newItemCreated.empty();
            }
        });
    }
    _changeNewField(container, newField, additionalFunc) {
        if (this.model.itemType() !== 'Seed') {
            if (!IsOlapHierarchyField(newField)) {
                var dataItem = container._createDataItem(newField, this.binding);
                if (this.model._specifics.isAttribute && dataItem instanceof Measure) {
                    dataItem.summaryType('Min');
                }
                this.model.uniqueName(dataItem.uniqueName());
                this.newItemCreated.fire(this.model, newField);
                this.itemSelected.fire(this.model, newField);
            }
            else {
                var groupIndex = newField.groupIndex();
                newField['groupDataItems'].forEach((groupItem, index) => {
                    var dataItem = container._createDataItem(groupItem, this.binding);
                    dataItem.groupIndex(groupIndex);
                    if (index === 0) {
                        this.model.uniqueName(dataItem.uniqueName());
                        this.newItemCreated.fire(this.model, groupItem);
                    }
                    else {
                        var model = new DataItemLink(container);
                        model.uniqueName(dataItem.uniqueName());
                        this.newItemCreated.fire(model, groupItem);
                    }
                });
                this.itemSelected.fire(this.model, newField['groupDataItems'][0]);
            }
        }
        else {
            this.newItemCreated.fire(this.model, newField);
            this.itemSelected.fire(this.model, newField);
        }
        additionalFunc();
    }
    _changeExistingField(container, model, newField, additionalFunc) {
        if (!IsOlapHierarchyField(newField)) {
            container._updateDataItem(model.dataItem(), this.binding, newField, model._specifics.acceptableShapingType);
        }
        else {
            var groupIndex = newField.groupIndex();
            newField['groupDataItems'].forEach((groupItem, index) => {
                if (index === 0) {
                    container._updateDataItem(model.dataItem(), this.binding, groupItem, model._specifics.acceptableShapingType);
                    model.dataItem().groupIndex(groupIndex);
                }
                else {
                    var dataItem = container._createDataItem(groupItem, this.binding);
                    dataItem.groupIndex(groupIndex);
                    var dataItemLink = new DataItemLink(container);
                    dataItemLink.uniqueName(dataItem.uniqueName());
                    this.newItemCreated.fire(dataItemLink, groupItem);
                }
            });
        }
        additionalFunc();
    }
    get commonDataItemTypeConstraint() {
        if (this.binding.dataItemType === 'Dimension') {
            return (field) => DataField.ifOlapThenOnlyDimension(field) && !(field.isAggregate && field.isAggregate());
        }
        if (this.binding.dataItemType === 'Measure') {
            return (field) => DataField.ifOlapThenOnlyMeasure(field);
        }
        return () => true;
    }
    get fullConstraint() {
        return (field) => {
            if (!this.commonDataItemTypeConstraint(field))
                return false;
            if (field.isDataFieldNode()) {
                return !this.fieldConstraint || this.fieldConstraint(field);
            }
            else {
                return true;
            }
        };
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
__decorate([
    wrapWithUndoRedo
], DataItemSurface.prototype, "_changeNewField", null);
__decorate([
    wrapWithUndoRedo
], DataItemSurface.prototype, "_changeExistingField", null);
