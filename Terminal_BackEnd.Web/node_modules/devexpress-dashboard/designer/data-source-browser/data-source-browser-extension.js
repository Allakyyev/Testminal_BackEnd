/**
* DevExpress Dashboard (data-source-browser-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { defineObsoleteProperty } from '../../model/internal/_obsolete-helper';
import { DashboardMenuItem } from '../toolbox-extension/toolbox-items';
import { DataSourceBrowserViewModel } from './_data-source-browser-viewmodel';
const name = 'dataSourceBrowser';
const nameAlias = 'data-source-browser';
export class DataSourceBrowserExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._perDashboardSubscription = [];
        this._dataSourceBrowserViewModel = ko.observable();
        this._menuItem = new DashboardMenuItem(nameAlias, 'DashboardWebStringId.DashboardMenuDataSources', 210, 65);
        this._menuItem.template = 'dx-dashboard-form-datasource-browser';
        this._menuItem.data = this._dataSourceBrowserViewModel;
        this._menuItem.disabled = ko.computed(() => !this.dashboardControl.dashboard());
        defineObsoleteProperty({
            target: this,
            memberName: 'dataSourceBrowserViewModel',
            oldMemberDisplayName: 'dataSourceBrowserViewModel',
            action: () => this._dataSourceBrowserViewModel
        });
    }
    _disposePerDashboardSubcriptions() {
        this._perDashboardSubscription.forEach(s => s.dispose());
        this._perDashboardSubscription = [];
    }
    _updateExtensionModel(dashboard) {
        this._disposePerDashboardSubcriptions();
        if (!!dashboard) {
            var dataSourceWizardExtension = ko.computed(() => (this.dashboardControl.findExtension('dataSourceWizard')));
            var accessibleDataSourcesExtension = ko.computed(() => (this.dashboardControl.findExtension('availableDataSources')));
            var viewModel = new DataSourceBrowserViewModel(this.dashboardControl._dataSourceBrowser, dataSourceWizardExtension, accessibleDataSourcesExtension, this.dashboardControl._updateHub);
            this._perDashboardSubscription.push(dataSourceWizardExtension);
            this._perDashboardSubscription.push(accessibleDataSourcesExtension);
            this._perDashboardSubscription.push(viewModel);
            this._dataSourceBrowserViewModel(viewModel);
        }
        else {
            this._dataSourceBrowserViewModel(null);
        }
    }
    start() {
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
        this._subscription = this.dashboardControl.dashboard.subscribe(this._updateExtensionModel, this);
        this._updateExtensionModel(this.dashboardControl.dashboard());
    }
    stop() {
        this._disposePerDashboardSubcriptions();
        if (this._subscription) {
            this._subscription.dispose();
            this._subscription = undefined;
        }
        let toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new DataSourceBrowserExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
