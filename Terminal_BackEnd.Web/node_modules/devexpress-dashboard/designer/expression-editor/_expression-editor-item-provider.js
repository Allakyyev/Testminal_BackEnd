/**
* DevExpress Dashboard (_expression-editor-item-provider.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { isNonCollectionDataField, trimLeadingPathElement } from '../../common/_data-source-browser';
import { createJQueryDeferred } from '../../data/_jquery-helpers';
import { getLocalizationById } from '../../data/index.internal';
import { DataItem } from '../../model/data-item/data-item';
import { OlapDataSource } from '../../model/data-sources/olap-data-source';
import { ParameterHelper } from '../../model/parameters/_parameters-helper';
export class ExpressionEditorItemsProvider {
    constructor(dataFieldsProvider, dataSourceProvider, dataItemValuesProvider, parameters, dataSourceName, dataMember, filterPredicate = () => true) {
        this.dataFieldsProvider = dataFieldsProvider;
        this.dataSourceProvider = dataSourceProvider;
        this.dataItemValuesProvider = dataItemValuesProvider;
        this.parameters = parameters;
        this.dataSourceName = dataSourceName;
        this.dataMember = dataMember;
        this.filterPredicate = filterPredicate;
    }
    getValues(pathRequest) {
        const deferred = createJQueryDeferred();
        this.dataFieldsProvider.findDataField(this.dataSourceName(), this.dataMember(), pathRequest.path).done((res) => {
            var _a;
            deferred.resolve((((_a = res['_model']) === null || _a === void 0 ? void 0 : _a.EditorValues) || []).map(x => ({
                value: x,
                display: x
            })));
        });
        return deferred.promise();
    }
    getItems(pathRequest) {
        var items = [], fullPath = pathRequest.fullPath && pathRequest.fullPath.toLowerCase() || '';
        if (fullPath === '') {
            items = [{
                    displayName: getLocalizationById('DashboardWebStringId.DashboardParameters'),
                    name: 'Parameters',
                    isList: true,
                    specifics: 'parameters'
                }];
        }
        else if (fullPath === 'parameters') {
            items = (this.parameters && this.parameters || []).map(parameter => {
                const parameterType = ParameterHelper.typeValues.filter(item => item.value === parameter.type())[0];
                const parameterSpecific = parameterType && parameterType.specifics || 'Default';
                return {
                    displayName: parameter.name(),
                    name: parameter.name(),
                    isList: false,
                    specifics: parameterSpecific
                };
            });
        }
        else {
            var deferred = createJQueryDeferred(), fieldPath = pathRequest.path, dataSource = this.dataSourceProvider.findDataSource(this.dataSourceName());
            if (!!this.dataMember) {
                fieldPath = trimLeadingPathElement(fieldPath, this.dataMember());
            }
            this.dataFieldsProvider.getDataFieldsArray(this.dataSourceName(), this.dataMember(), fieldPath, isNonCollectionDataField)
                .done(dataFields => {
                items = dataFields.filter(this.filterPredicate).map(field => {
                    return {
                        displayName: ko.unwrap(field.displayName),
                        name: dataSource instanceof OlapDataSource ? field.dataMember() : field.name(),
                        field: field,
                        isList: !field.isDataFieldNode(),
                        hasItems: !field.isDataFieldNode(),
                        specifics: field.isDataFieldNode() ? DataItem.typesMap[field.fieldType()] || 'Default' : field.isList && field.isList() ? 'List' : 'Default'
                    };
                });
                deferred.resolve(items);
            });
            return deferred.promise();
        }
        return createJQueryDeferred().resolve(items).promise();
    }
}
