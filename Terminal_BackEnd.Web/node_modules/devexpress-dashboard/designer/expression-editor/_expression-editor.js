/**
* DevExpress Dashboard (_expression-editor.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CriteriaOperatorStateMachine } from '@devexpress/analytics-core/analytics-criteria-utils';
import { ExpressionEditor, getTemplate } from '@devexpress/analytics-core/analytics-widgets';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { createJQueryDeferred } from '../../data/_jquery-helpers';
import { getAceTheme } from '../_dx-designer-integration';
import { getExpressionEditorFunctions } from './_expression-editor-functions';
import { FlatItemProviderWrapper } from './_flat-item-provider-wrapper';
export class DashboardExpressionEditor extends ExpressionEditor {
    constructor(options, fieldListProvider, displayNameProvider, saveHandler, disabled) {
        options.theme = getAceTheme();
        super(options, fieldListProvider, disabled, undefined, displayNameProvider);
        var createCompletersBase = this.languageHelper.createCompleters;
        this.languageHelper.createCompleters = (e, b, v) => {
            var completers = createCompletersBase.call(this.languageHelper, e, b, v);
            completers[0]['_fieldListProvider'] = new FlatItemProviderWrapper(fieldListProvider());
            completers.forEach(completer => this._disposables.push(completer));
            return completers;
        };
        let saveHandlerValue = (callback) => {
            var val = '';
            if (this.aceAvailable) {
                val = this.editorContainer().getSession().getValue();
            }
            else {
                val = this.textAreaValue();
            }
            var toRealExpressionPromise = this.displayExpressionConverter ?
                this.displayExpressionConverter.toRealExpression(options.path(), val) :
                createJQueryDeferred().resolve(val).promise();
            toRealExpressionPromise
                .then((realExpression) => {
                if (!!realExpression) {
                    CriteriaOperatorStateMachine.parse(realExpression);
                    options.value(realExpression);
                    this.isValid(true);
                    options.isValid(true);
                }
                else {
                    this.isValid(false);
                    options.isValid(false);
                }
            })
                .catch((exception) => {
                this.isValid(false);
                options.isValid(false);
            })
                .then(() => {
                if (this.isValid()) {
                    callback();
                }
            });
        };
        saveHandler && saveHandler(saveHandlerValue);
        this._disposables.push(this.displayValue.subscribe(newValue => this.textAreaValue(newValue)));
    }
    focus() {
        this.editorContainer() && this.editorContainer().focus();
    }
}
ko.bindingHandlers['dshdExpressionEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var $element = $.fn.constructor(element);
        $element.children().remove();
        $element.addClass('dx-filtereditor');
        var templateHtml = getTemplate('dx-expressioneditor-main'), $element = $element.append(templateHtml), editorElement = $element.children()[0], values = valueAccessor();
        values.options.functions = getExpressionEditorFunctions();
        var editor = new DashboardExpressionEditor(values.options, ko.observable(values.fieldListProvider), values.displayNameProvider, values.saveHandler, viewModel.disabled);
        editor.popupVisible(true);
        values.onResize && values.onResize(() => editor.resizeAceEditor());
        ko.utils.domNodeDisposal.addDisposeCallback(editorElement, () => {
            editor.dispose();
            values.onResize && values.onResize(null);
        });
        ko.applyBindings(editor, editorElement);
        editor.focus();
        return { controlsDescendantBindings: true };
    }
};
