/**
* DevExpress Dashboard (available-font-families-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common';
import { createJQueryDeferred } from '../../data/_jquery-helpers';
import { getLocalizationById } from '../../data/index.internal';
import { CardItem, DisposableObject, GridItem, PivotItem } from '../../model';
import { subscribeAndPerform, subscribeArrayChange, subscribeToArrayItemProperties } from '../../model/index.internal';
const name = 'availableFontFamilies';
const nameAlias = 'available-font-families';
export class AvailableFontFamiliesExtension extends DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = name;
        this.fontFamilies = ko.observableArray();
        this._disposables = [];
        this._isDataLoadingStarted = false;
    }
    start() {
        this._isDesignModeSubscription = subscribeAndPerform(this.dashboardControl.isDesignMode, (isDesignMode => {
            if (isDesignMode) {
                this._rootSubscription = subscribeAndPerform(this.dashboardControl.dashboard, (dashboard => {
                    this._dispose();
                    if (dashboard) {
                        const addRuleHandler = (rule) => {
                            if (!this._isDataLoadingStarted && !this.fontFamilies.length) {
                                this._isDataLoadingStarted = true;
                                this._loadAvailableFontFamilies().then(fonts => {
                                    this.fontFamilies(fonts);
                                });
                            }
                            const condition = rule.condition();
                            condition._getAvailableFontFamilies = () => this.fontFamilies;
                        };
                        const addItemHandler = (item) => {
                            if (this._isAppearanceItem(item)) {
                                item.formatRules().forEach(rule => {
                                    addRuleHandler(rule);
                                });
                                const subscription = subscribeArrayChange(item.formatRules, { added: addRuleHandler });
                                this._disposables.push(subscription);
                                return subscription;
                            }
                            return ko.computed(() => { });
                        };
                        dashboard.items().forEach(item => {
                            if (this._isAppearanceItem(item)) {
                                addItemHandler(item);
                            }
                        });
                        this._disposables.push(subscribeToArrayItemProperties(dashboard.items, addItemHandler));
                    }
                }));
            }
            else {
                this._dispose();
                this._rootSubscription && this._rootSubscription.dispose();
            }
        }));
    }
    stop() {
        this._dispose();
        this._isDesignModeSubscription.dispose();
        this._rootSubscription.dispose();
    }
    _dispose() {
        this._disposables.forEach(disposable => disposable.dispose());
        this._disposables = [];
    }
    _isAppearanceItem(item) {
        return item instanceof GridItem
            || item instanceof PivotItem
            || item instanceof CardItem;
    }
    _loadAvailableFontFamilies() {
        if (this.dashboardControl._serviceClient()) {
            this._isDataLoadingStarted = true;
            return this.dashboardControl._serviceClient().getAvailableFontFamilies().then(fonts => fonts, error => {
                this.dashboardControl.notificationController.showError(getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies'));
                return [];
            });
        }
        return createJQueryDeferred().reject([]);
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new AvailableFontFamiliesExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
