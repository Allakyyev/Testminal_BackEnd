/**
* DevExpress Dashboard (filter-panel-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { DataDashboardItem } from '../../model';
import { DashboardItemMenu, DashboardItemMenuSizes } from '../items/_dashboard-item-menu';
import { ItemFilterPropertiesComposer } from '../items/_item-filter-properties-composer';
const name = 'itemFilterPanel';
const nameAlias = 'item-filter-panel';
export class FilterPanelExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
    }
    _contextMenuSubscriber(itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item);
        }
    }
    _updateContextMenu(menu, item) {
        if (menu instanceof DashboardItemMenu && item instanceof DataDashboardItem) {
            menu.contextMenuItems.push({
                menuItemId: nameAlias,
                icon: 'dx-dashboard-item-filter',
                title: 'DashboardWebStringId.Filters',
                panelWidth: DashboardItemMenuSizes.OptionsPanelWidth(),
                templateName: 'dx-dashboard-options',
                detailVisible: ko.observable(false),
                showMenu: () => {
                    var composer = new ItemFilterPropertiesComposer(this.dashboardControl._dataSourceBrowser);
                    var tabs = composer.composeTabs(item);
                    menu.propertiesController.mainModel({
                        data: {
                            model: item,
                            propertiesTabs: ko.observableArray(tabs),
                        }
                    });
                },
                customData: {
                    propertiesController: menu.propertiesController,
                },
                index: 150
            });
        }
    }
    start() {
        var contextMenuExtension = this.dashboardControl.findExtension('itemMenu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new FilterPanelExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
