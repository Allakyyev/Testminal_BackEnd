/**
* DevExpress Dashboard (save-dashboard-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { KeyCodes } from '../../common/internal/_interfaces';
import { createJQueryDeferred } from '../../data/_jquery-helpers';
import { getLocalizationById } from '../../data/localization/_default';
import { ConfirmDialogViewModel } from '../confirm-dialog/_confirm-dialog';
import { DashboardMenuItem } from '../toolbox-extension/toolbox-items';
const name = 'saveDashboard';
const nameAlias = 'save-dashboard';
export class SaveDashboardExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._confirmDialogViewModel = new ConfirmDialogViewModel();
        this.canSaveDashboard = ko.computed(() => !!this.dashboardControl.dashboard());
        this._isDashboardDirty = ko.computed(() => this._undoEngineExtension && this._undoEngineExtension.isChanged());
        this._customTemplate = {
            name: 'dx-dashboard-confirm-dialog',
            data: this._confirmDialogViewModel
        };
        this.designerToViewerAction = {
            orderNo: 20,
            action: options => {
                var def = createJQueryDeferred();
                this._ensureDashboardSaved()
                    .then(() => {
                    if (this._isDashboardDirty()) {
                        var container = this.dashboardControl.dashboardContainer();
                        this.dashboardControl.loadDashboard(container.id)
                            .done(() => def.resolve(options));
                    }
                    def.resolve(options);
                }, () => def.reject());
                return def.promise();
            }
        };
        this._menuItem = new DashboardMenuItem('save', 'DashboardWebStringId.DashboardMenuSave', 110, KeyCodes.S, () => { this._toolboxExtension.closeMenu(); this.saveDashboard(); });
        this._menuItem.hasSeparator = true;
        this._menuItem.disabled = ko.computed(() => !this.canSaveDashboard() || !this._isDashboardDirty());
    }
    start() {
        this.dashboardControl.customTemplates.push(this._customTemplate);
        this._toolboxExtension.menuItems.push(this._menuItem);
    }
    stop() {
        this._toolboxExtension.menuItems.remove(this._menuItem);
        this.dashboardControl.customTemplates.remove(this._customTemplate);
    }
    get _toolboxExtension() {
        var extension = this.dashboardControl.findExtension('toolbox');
        if (!extension) {
            throw Error('Open Dashboard Extension requeries Toolbox Extension');
        }
        return extension;
    }
    get _undoEngineExtension() {
        return this.dashboardControl.findExtension('undoRedo');
    }
    performSaveDashboard(dashboardId, dashboardJson) {
        this.dashboardControl.notificationController.showState(getLocalizationById('DashboardWebStringId.Notification.DashboardSaving'));
        return this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dashboardUrls.DashboardAction + '/' + encodeURIComponent(dashboardId), dashboardJson)
            .done((result) => {
            this.dashboardControl.notificationController.showSuccess(getLocalizationById('DashboardWebStringId.Notification.DashboardSaved'));
        }).fail((jqXHR) => {
            this.dashboardControl.notificationController.showError(getLocalizationById('DashboardWebStringId.Notification.DashboardCanNotBeSaved'), jqXHR);
        });
    }
    ensureDashboardSaved(action) {
        this._ensureDashboardSaved().done(action);
    }
    _ensureDashboardSaved() {
        let def = createJQueryDeferred();
        if (this._isDashboardDirty()) {
            this._confirmDialogViewModel
                .confirm(getLocalizationById('DashboardWebStringId.Dialog.ConfirmSaving'), getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage') + '<br/>' + getLocalizationById('DashboardWebStringId.SaveChangesDialogMessage'), getLocalizationById('DashboardWebStringId.Dialog.Save'), getLocalizationById('DashboardWebStringId.Dialog.DoNotSave'))
                .then(result => {
                if (result) {
                    this.saveDashboard()
                        .then(() => def.resolve(), () => def.reject());
                }
                else {
                    def.resolve();
                }
            }, () => def.reject());
        }
        else {
            def.resolve();
        }
        return def.promise();
    }
    saveDashboard() {
        if (this.canSaveDashboard()) {
            var dashboardContainer = this.dashboardControl.dashboardContainer();
            return this.performSaveDashboard(dashboardContainer.id, dashboardContainer.dashboard.getJSON())
                .done(() => this._undoEngineExtension && this._undoEngineExtension.isChanged(false));
        }
        else {
            throw Error(getLocalizationById('DashboardWebStringId.Notification.DashboardSavingIsNotAvailable'));
        }
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new SaveDashboardExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
