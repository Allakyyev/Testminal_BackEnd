/**
* DevExpress Dashboard (binding-panel.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { OptionsManager } from '../../common/internal/_options-manager';
import { DataDashboardItem } from '../../model/items/data-dashboard-item';
import { DashboardItemMenu, DashboardItemMenuSizes } from '../items/_dashboard-item-menu';
import { DataDashboardItemSurface } from '../items/surfaces/_base-item-surface';
const name = 'itemBindingPanel';
const nameAlias = 'item-binding-panel';
export class BindingPanelExtension {
    constructor(dashboardControl, options = {}) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this._optionsManager = new OptionsManager();
        this._optionsManager.initialize({
            extensionName: name,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => null
        });
    }
    _contextMenuSubscriber(dashboardItemMenu) {
        if (!!dashboardItemMenu) {
            if (this.dashboardControl._actualLayoutController().selectedDashboardItem() instanceof DataDashboardItem) {
                this._updateDashboardItemMenu(dashboardItemMenu);
            }
        }
    }
    _updateEmptyItemTemplate(dashboardLayout) {
        if (dashboardLayout && dashboardLayout.emptyItemTemplates) {
            dashboardLayout.emptyItemTemplates.push({
                name: 'dx-dashboard-binding-properties-empty-item',
                data: {
                    isDesignMode: this.dashboardControl.isDesignMode,
                    click: () => {
                        var contextMenuExtension = this.dashboardControl.findExtension('itemMenu');
                        if (contextMenuExtension) {
                            contextMenuExtension.menuItemClick(nameAlias);
                        }
                    }
                }
            });
        }
    }
    _updateDashboardItemMenu(menu) {
        if (menu instanceof DashboardItemMenu && menu.selectedItemSurface instanceof DataDashboardItemSurface) {
            const surface = menu.selectedItemSurface;
            if (surface && surface.dataSections && surface.dataSections().length > 0) {
                surface.customizeDataItemContainerTabs = (args) => {
                    this._optionsManager.raiseEvent('customizeDataItemContainerSections', args);
                };
                menu.contextMenuItems.push({
                    menuItemId: nameAlias,
                    icon: 'dx-dashboard-item-options',
                    hint: 'DashboardWebStringId.Bindings',
                    popoverClass: 'dx-dashboard-binding-panel',
                    panelWidth: DashboardItemMenuSizes.BindingPanelPanelWidth(),
                    templateName: 'dx-dashboard-binding-properties',
                    detailVisible: ko.observable(false),
                    customData: surface,
                    index: 100
                });
            }
        }
    }
    start() {
        this._updateEmptyItemTemplate(this.dashboardControl._actualLayoutController());
        this.dashboardControl._actualLayoutController.subscribe(layoutController => this._updateEmptyItemTemplate(layoutController));
        var contextMenuExtension = this.dashboardControl.findExtension('itemMenu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new BindingPanelExtension(dashboardControl, options);
extensionNameMap[nameAlias] = name;
