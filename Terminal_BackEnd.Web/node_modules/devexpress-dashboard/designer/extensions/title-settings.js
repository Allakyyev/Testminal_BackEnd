/**
* DevExpress Dashboard (title-settings.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { DashboardTitleModel } from '../../common/viewer/title/_dashboard-title-model';
import { getLocalizationById } from '../../data/localization/_default';
import { DisposableObject } from '../../model/disposable-object';
import { url } from '../../model/metadata/_base-metadata';
import { includeMasterFilter, titleAlignment, titleImage64, titleImageType, titleImageUrl, titleText, titleVisible } from '../../model/metadata/_title';
import { titleHeight } from '../../viewer-parts/title/_dashboard-title-view-constants';
import { filePickerEditor } from '../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../form-adapter/_object-properties-wrapper';
import { DashboardMenuItem } from '../toolbox-extension/toolbox-items';
const name = 'dashboardTitleEditor';
const nameAlias = 'dashboard-title-editor';
export class DashboardTitleEditorExtension extends DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._titlePreviewViewModel = ko.observable(null);
        this._titleSettingsViewModel = ko.observable(null);
        this._perDashboardSubscriptions = [];
        this._menuItem = new DashboardMenuItem(nameAlias, 'DashboardStringId.Title', 220, 84);
        this._menuItem.template = 'dx-dashboard-form-title-settings';
        this._menuItem.data = {
            formCaption: getLocalizationById('DashboardWebStringId.Preview'),
            titleSettings: this._titleSettingsViewModel,
            getTitleComponentArgs: $element => ({
                options: this._titlePreviewViewModel,
                height: ko.observable(titleHeight),
                width: ko.observable($element.parentElement.innerWidth),
                encodeHtml: true
            })
        };
        this._menuItem.disabled = ko.computed(() => !dashboardControl.dashboard());
    }
    start() {
        this._updateTitleToolbar();
        this.toDispose(this.dashboardControl.dashboard.subscribe(() => this._updateTitleToolbar()));
        let toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.push(this._menuItem);
        }
    }
    stop() {
        let toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.remove(this._menuItem);
        }
        this.dispose();
    }
    dispose() {
        this._disposePerDashboardSubscriptions();
        super.dispose();
    }
    _disposePerDashboardSubscriptions() {
        this._perDashboardSubscriptions.forEach(disposable => disposable.dispose());
        this._perDashboardSubscriptions = [];
        if (this._titlePreviewViewModel()) {
            this._titleSettingsViewModel().unbindModel();
        }
        this._titlePreviewViewModel(null);
        this._titleSettingsViewModel(null);
    }
    _updateTitleToolbar() {
        this._disposePerDashboardSubscriptions();
        if (this.dashboardControl.dashboard()) {
            let titleModel = new DashboardTitleModel(undefined, this.dashboardControl.dashboard());
            this._titlePreviewViewModel(titleModel.toolbarOptions());
            this._titleSettingsViewModel(this._createTitleSettings(this.dashboardControl.dashboard().title));
            this._perDashboardSubscriptions.push(titleModel, titleModel.toolbarOptions.subscribe(newOptions => {
                this._titlePreviewViewModel(newOptions);
            }));
        }
    }
    _createTitleSettings(titleModel) {
        const visibilityRules = {};
        visibilityRules[titleImage64.propertyName] = () => titleModel.imageType() === 'embedded';
        visibilityRules[url.propertyName] = () => titleModel.imageType() === 'linked';
        return new ObjectPropertiesWrapper({
            model: titleModel,
            properties: [
                titleText,
                titleVisible,
                titleAlignment,
                includeMasterFilter,
                titleImageType,
                Object.assign(Object.assign({}, titleImage64), { formAdapterItem: filePickerEditor({ placeholderId: 'Image', accept: 'image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/tiff', type: 'img' }) }),
                titleImageUrl
            ],
            visibilityFilterRules: visibilityRules,
        });
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new DashboardTitleEditorExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
