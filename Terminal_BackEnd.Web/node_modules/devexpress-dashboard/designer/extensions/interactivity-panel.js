/**
* DevExpress Dashboard (interactivity-panel.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { DashboardItemMenu, DashboardItemMenuSizes } from '../items/_dashboard-item-menu';
import { InteractivityPropertiesComposer } from '../items/_interactivity-properties-composer';
const name = 'itemInteractivityPanel';
const nameAlias = 'item-interactivity-panel';
export class InteractivityPanelExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
    }
    _contextMenuSubscriber(itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item);
        }
    }
    _updateContextMenu(menu, item) {
        if (item._isInteractivityAllowed()) {
            if (menu instanceof DashboardItemMenu) {
                menu.contextMenuItems.push({
                    menuItemId: nameAlias,
                    icon: 'dx-dashboard-interactivity',
                    title: 'DashboardWebStringId.Interactivity',
                    panelWidth: DashboardItemMenuSizes.OptionsPanelWidth(),
                    templateName: 'dx-dashboard-options',
                    detailVisible: ko.observable(false),
                    showMenu: () => {
                        var composer = new InteractivityPropertiesComposer(menu.propertiesController);
                        var tabs = composer.composeTabs(item);
                        menu.propertiesController.mainModel({
                            data: {
                                model: item,
                                propertiesTabs: ko.observableArray(tabs),
                            }
                        });
                    },
                    customData: {
                        propertiesController: menu.propertiesController,
                    },
                    index: 200
                });
            }
        }
    }
    start() {
        var contextMenuExtension = this.dashboardControl.findExtension('itemMenu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new InteractivityPanelExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
