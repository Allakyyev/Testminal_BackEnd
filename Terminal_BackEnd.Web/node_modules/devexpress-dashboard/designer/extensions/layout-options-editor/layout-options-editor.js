/**
* DevExpress Dashboard (layout-options-editor.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { designerExtensions, extensionNameMap } from '../../../common/control-options';
import { getLocalizationById } from '../../../data/localization/_default';
import { DisposableObject } from '../../../model/disposable-object';
import { subscribeAndPerform } from '../../../model/internal/_knockout-utils';
import { getDimensionToolbarItems } from './_layout-options-editor';
const name = 'layoutOptionEditor';
export class LayoutOptionEditorExtension extends DisposableObject {
    constructor(dashboardControl) {
        super();
        this.name = name;
        this._dashboardControl = dashboardControl;
        let widthItems = getDimensionToolbarItems(getLocalizationById('DashboardWebStringId.DesignerToolbar.Width'), 'width');
        let heightItems = getDimensionToolbarItems(getLocalizationById('DashboardWebStringId.DesignerToolbar.Height'), 'height');
        this._predefinedToolbarItems = widthItems.items.concat(heightItems.items);
        this._defaultToolbarItems = this._predefinedToolbarItems.map((item, index) => ({ name: item.name, index: LayoutOptionEditorExtension._toolbarItemsIndex + index }));
        this._refreshItems = (layoutOptions) => {
            widthItems.assignModel(layoutOptions && layoutOptions.width);
            heightItems.assignModel(layoutOptions && layoutOptions.height);
        };
        this._disposeItems = () => {
            widthItems.dispose();
            heightItems.dispose();
        };
    }
    start() {
        this._addToolbarItems(this._dashboardControl.findExtension('designerToolbar'));
        this._extensionsChangeSubscription && this._extensionsChangeSubscription.dispose();
        this._extensionsChangeSubscription = this._dashboardControl.subscribeExtensionsChanged({
            added: (extension) => {
                if (extension.name === 'designerToolbar') {
                    this._addToolbarItems(extension);
                }
            },
            deleted: (extension) => {
                if (extension.name === 'designerToolbar') {
                    this._removeToolbarItems(extension);
                }
            }
        });
        this._dashboardSubscription && this._dashboardSubscription.dispose();
        this._dashboardSubscription = subscribeAndPerform(this._dashboardControl.dashboard, dashboard => this._refreshItems(dashboard && dashboard.layoutOptions));
    }
    stop() {
        this._extensionsChangeSubscription && this._extensionsChangeSubscription.dispose();
        this._dashboardSubscription && this._dashboardSubscription.dispose();
        this._removeToolbarItems(this._dashboardControl.findExtension('designerToolbar'));
    }
    _addToolbarItems(toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._registerDefaultItems(this._defaultToolbarItems);
            toolbar._registerPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    }
    _removeToolbarItems(toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    }
    dispose() {
        this.stop();
        this._disposeItems();
        super.dispose();
    }
}
LayoutOptionEditorExtension._toolbarItemsIndex = 100;
designerExtensions[name] = (dashboardControl, options) => new LayoutOptionEditorExtension(dashboardControl);
extensionNameMap[name] = name;
