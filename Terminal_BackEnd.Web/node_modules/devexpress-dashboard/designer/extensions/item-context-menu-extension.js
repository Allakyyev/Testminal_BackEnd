/**
* DevExpress Dashboard (item-context-menu-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { DockingLayoutController } from '../../common/docking-layout/_docking-layout-controller';
import { KeyCodes } from '../../common/internal/_interfaces';
import { DisposableObject } from '../../model/disposable-object';
import { DashboardItemMenu } from '../items/_dashboard-item-menu';
const name = 'itemMenu';
const nameAlias = 'item-menu';
export class DashboardItemMenuExtension extends DisposableObject {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._itemContextMenu = ko.observable();
    }
    start() {
        this.dashboardControl._actualLayoutController.subscribe(layoutController => this._updateExtension(layoutController));
        this._updateExtension(this.dashboardControl._actualLayoutController());
    }
    stop() {
    }
    processKeyEvent(keyEventType, eventArgs) {
        if (keyEventType === 'keydown' && eventArgs.keyCode === KeyCodes.Esc) {
            let menu = this._itemContextMenu();
            if (menu && menu instanceof DashboardItemMenu) {
                if (menu.isSecondaryPanelVisible()) {
                    menu.hideBindingProperties();
                    return true;
                }
                else if (menu.propertiesController.mainModel()) {
                    menu.hideBindingProperties();
                    return true;
                }
                else if (menu.menuItemDetailVisible()) {
                    menu.hideBindingPanel();
                    return true;
                }
            }
        }
        return false;
    }
    menuItemClick(menuItemId) {
        let menu = this._itemContextMenu();
        if (menu && menu instanceof DashboardItemMenu) {
            var contextMenuItem = menu.contextMenuItems().filter(item => item.menuItemId === menuItemId)[0];
            if (contextMenuItem) {
                menu.menuItemClick(contextMenuItem.menuItemId);
            }
        }
    }
    _updateExtension(layoutController) {
        var that = this;
        if (layoutController != null && layoutController instanceof DockingLayoutController) {
            layoutController.contextMenu = (layoutItem) => {
                return {
                    data: {
                        dockingLayoutController: layoutController,
                        layoutItem: layoutItem,
                        itemMenuViewModelContainer: that._itemContextMenu,
                        notificationController: that.dashboardControl.notificationController
                    },
                    name: 'dx-dashboard-item-menu-holder'
                };
            };
        }
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new DashboardItemMenuExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
