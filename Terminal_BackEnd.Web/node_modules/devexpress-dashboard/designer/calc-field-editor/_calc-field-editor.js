/**
* DevExpress Dashboard (_calc-field-editor.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { patchCalcFieldPath } from '../../common/_data-source-browser';
import { createJQueryDeferred, jqueryWhen } from '../../data/_jquery-helpers';
import { getLocalizationById } from '../../data/localization/_default';
import { CalculatedField } from '../../model/data-sources/calculated-field';
import { EFDataSource } from '../../model/data-sources/ef-data-source';
import { FederationDataSource } from '../../model/data-sources/federation-data-source';
import { calcFieldExpressionEditable, calculatedFieldType } from '../../model/data-sources/metadata/_calculated-field';
import { MongoDBDataSource } from '../../model/data-sources/mongodb-data-source';
import { SqlDataSource } from '../../model/data-sources/sql-data-source';
import { NameGenerator } from '../../model/internal/_helper-classes';
import { name } from '../../model/metadata/_base-metadata';
import { ExpressionEditorDisplayNameProvider } from '../expression-editor/_expression-editor-display-name-provider';
import { ExpressionEditorItemsProvider } from '../expression-editor/_expression-editor-item-provider';
export class CalcFieldEditor {
    constructor(dataSourceBrowser) {
        this.dataSourceBrowser = dataSourceBrowser;
        this.viewModel = ko.observable(null);
    }
    canAddCalculatedField(dataSourceName) {
        var dataSource = this.dataSourceBrowser.findDataSource(dataSourceName);
        if (dataSource && dataSource.hasCalculatedFields) {
            if (dataSource instanceof SqlDataSource) {
                return dataSource.queries().length > 0;
            }
            else if (dataSource instanceof EFDataSource) {
                return dataSource._tables().length > 0;
            }
            else if (dataSource instanceof FederationDataSource) {
                return dataSource.queries().length > 0;
            }
            else if (dataSource instanceof MongoDBDataSource) {
                return dataSource.queries().length > 0;
            }
            return !!dataSource;
        }
        else {
            return false;
        }
    }
    showAddDialog(dataSourceName, dataMemberName) {
        var def = createJQueryDeferred();
        if (this.canAddCalculatedField) {
            var dataSourceInstance = this.dataSourceBrowser.findDataSource(dataSourceName);
            var newCalculatedFieldName = NameGenerator.generateName(getLocalizationById('DashboardStringId.NewCalculatedFieldNamePrefix') + ' ', dataSourceInstance.calculatedFields(), 'name', 1);
            var newCalculatedField = new CalculatedField({ '@Name': newCalculatedFieldName, '@DataMember': dataMemberName, '@DataType': 'Auto' });
            this.show(newCalculatedField, dataSourceName, dataMemberName).then(calcField => def.resolve(calcField), calcField => def.reject(calcField));
        }
        else {
            def.reject();
        }
        return def.promise();
    }
    showEditDialog(calculatedField, dataSourceName, dataMemberName) {
        return this.show(calculatedField, dataSourceName, dataMemberName);
    }
    removeCalcField(calculatedField, dataSourceName) {
        var dataSourceInstance = this.dataSourceBrowser.findDataSource(dataSourceName);
        var dataMemberName = calculatedField.dataMember();
        var pathInCache = [dataSourceName].concat(dataMemberName ? [dataMemberName] : []);
        this.dataSourceBrowser.clearFieldsCache(pathInCache.join('.'));
        dataSourceInstance.calculatedFields.remove(calculatedField);
        return createJQueryDeferred().resolve(calculatedField).promise();
    }
    show(calculatedField, dataSourceName, dataMemberName) {
        var def = createJQueryDeferred();
        var pathInCache = [dataSourceName].concat(dataMemberName ? [dataMemberName] : []);
        this.viewModel(new CalcFieldEditorViewModel(calculatedField, this.dataSourceBrowser, dataSourceName, calcField => {
            let dsi = this.dataSourceBrowser.findDataSource(dataSourceName);
            if (dsi && dsi.calculatedFields.indexOf(calcField) === -1) {
                dsi.calculatedFields.push(calcField);
            }
            def.resolve(calcField);
        }, () => this.dataSourceBrowser.clearFieldsCache(pathInCache.join('.'))));
        return def.promise();
    }
}
export class CalcFieldEditorViewModel {
    constructor(calculatedField, dataSourceBrowser, dataSourceName, onSave, onBeforeSave) {
        this.toolbarItems = [];
        this.isCalcFieldNameValid = ko.observable(true);
        this.popupVisible = ko.observable(true);
        this.onResize = ko.observable();
        var dataSource = dataSourceBrowser.findDataSource(dataSourceName);
        this.getInfo = () => {
            return [name, calculatedFieldType, calcFieldExpressionEditable];
        };
        this.nameValidationRules = [{
                type: 'required'
            }, {
                type: 'custom',
                validationCallback: (params) => {
                    var previousParams = false;
                    let dataSource = dataSourceBrowser.findDataSource(dataSourceName);
                    let dataMembers = [''];
                    if (dataSource instanceof SqlDataSource) {
                        dataMembers = dataSource.queries().map(dm => dm.name());
                    }
                    else if (dataSource instanceof EFDataSource) {
                        dataMembers = dataSource._tables().map(dm => dm.name());
                    }
                    else if (dataSource instanceof FederationDataSource) {
                        dataMembers = dataSource.queries().map(dm => dm.alias());
                    }
                    else if (dataSource instanceof MongoDBDataSource) {
                        dataMembers = dataSource.queries().map(dm => dm._actualName());
                    }
                    let promises = dataMembers.map(dataMember => dataSourceBrowser.findDataField(dataSourceName, dataMember, params.value));
                    jqueryWhen(...promises).done((...fields) => {
                        previousParams = true;
                        params.rule.isValid = fields.reduce((result, curField) => { return result && !curField; }, true);
                        params.validator.validate();
                    });
                    if (previousParams)
                        return params.rule.isValid;
                    return false;
                },
                message: getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.UniqueNameError')
            }];
        this.calculatedField = calculatedField;
        this.dataMember = ko.observable(calculatedField.dataMember());
        this.fieldType = ko.observable(calculatedField.fieldType());
        this.availableTypes = this.getKeyLocalizationPair(calculatedFieldType.values);
        this.name = ko.observable(calculatedField.name());
        this.expression = ko.observable(calculatedField.expression());
        this.expressionEditable = {
            value: this.expression,
            path: ko.observable(calculatedField.dataMember() ? [dataSourceName, calculatedField.dataMember()].join('.') : dataSourceName),
            fieldName: calculatedField.name,
            patchFieldName: (fieldPath) => patchCalcFieldPath(dataSource, calculatedField, fieldPath),
            isValid: ko.observable(true),
            customizeCategories: (sender, categories, dblclick) => {
                var treeList = categories[0].content.data.fields().treeListController;
                var putSelectionHandlerBase = treeList.putSelectionHandler;
                treeList.putSelectionHandler = (data, element) => {
                    if (!data.data.isList) {
                        putSelectionHandlerBase.call(treeList, data, element);
                    }
                };
            }
        };
        this.itemsProvider = new ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), ko.pureComputed(() => dataSourceName), calculatedField.dataMember);
        this.displayNameProvider = ExpressionEditorDisplayNameProvider.create(dataSourceBrowser, dataSourceBrowser, dataSourceName, calculatedField.dataMember());
        this.saveHandler = ko.observable();
        var saveHandler = (sender) => {
            this.saveHandler()(() => {
                onBeforeSave && onBeforeSave();
                calculatedField.expression(this.expression());
                calculatedField.name(this.name());
                calculatedField.fieldType(this.fieldType());
                onSave && onSave(calculatedField);
                this.popupVisible(false);
            });
        };
        this.toolbarItems = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: getLocalizationById('DashboardWebStringId.DashboardMenuSave'),
                    onClick: saveHandler,
                    disabled: ko.computed(() => !this.isCalcFieldNameValid()),
                    type: 'default'
                }
            },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: getLocalizationById('DashboardWebStringId.DataSources.Cancel'), onClick: () => this.popupVisible(false) } }
        ];
        this.popupVisible(true);
    }
    resizeAceEditor() {
        if (this.onResize())
            this.onResize()();
    }
    getKeyLocalizationPair(values) {
        return Object.keys(values).map(key => ({ value: key, displayValue: getLocalizationById(values[key]) }));
    }
}
