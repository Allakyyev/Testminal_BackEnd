/**
* DevExpress Dashboard (_display-name-provider.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { getLocalizationById } from '../data/localization/_default';
import { Dimension } from '../model/data-item/dimension';
import { Measure } from '../model/data-item/measure';
import { dateTimeGroupIntervalsDict } from '../model/data-item/metadata/_dimension';
import { summaryTypeDict } from '../model/data-item/metadata/_measure';
import { DataField, IsDateTime } from '../model/data-sources/_data-field';
export function getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, dataItemContainer) {
    return dashboardItem._getDataItemContainerDisplayName(dataItemContainer, (dataItem) => getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem));
}
export function getDataItemDisplayName(dataFieldProvider, dataDashboardItem, dataItem) {
    let dataSourceName = dataDashboardItem.dataSource.peek(), queryName = dataDashboardItem.dataMember.peek(), dataMember = dataItem.dataMember(), cacheKey = createKey(dataSourceName, queryName, dataMember);
    if (!dataItem[cacheKey]) {
        var dataFieldObservable = ko.observable(null);
        dataFieldProvider
            .findDataField(dataSourceName, queryName, dataMember, true)
            .done((dataField) => {
            if (dataField) {
                dataFieldObservable(dataField);
            }
        });
        dataItem[cacheKey] = ko.computed(() => getDataItemDisplayNameByField(dataDashboardItem, dataItem, dataFieldObservable));
    }
    return dataItem[cacheKey]();
}
function getDataItemDisplayNameByField(dataDashboardItem, dataItem, dataFieldObservable) {
    if (dataItem.name()) {
        return dataItem.name();
    }
    var dataField = dataFieldObservable();
    if (dataField) {
        return computeDataItemDisplayName(dataDashboardItem, dataItem, dataField);
    }
    else {
        return guessDataItemDisplayName(dataDashboardItem, dataItem);
    }
}
function createKey(dataSourceName, queryName, dataMemberName) {
    return '__dx_displayNameCache_' + [dataSourceName, queryName, dataMemberName].join('_');
}
function guessDataItemDisplayName(dataDashboardItem, dataItem) {
    var dataMember = dataItem.dataMember();
    var isOlap = DataField.isOlap(dataMember);
    if (isOlap) {
        var parts = dataMember.split(DataField.olapMarker());
        var length = parts.length - 1;
        return parts[length].substr(0, parts[length].length - 1);
    }
    else if (dataItem instanceof Measure) {
        return _getMeasureDisplayName(dataDashboardItem, dataItem, dataMember);
    }
    else if (dataItem instanceof Dimension) {
        let timeGroupInterval = dataItem.dateTimeGroupInterval();
        let postfix = timeGroupInterval !== 'Year' && timeGroupInterval !== 'None' ?
            ' (' + getLocalizationById(dateTimeGroupIntervalsDict[timeGroupInterval]) + ')' : '';
        return dataMember + postfix;
    }
    else {
        return dataMember;
    }
}
function computeDataItemDisplayName(dataDashboardItem, dataItem, dataField) {
    var displayName = dataField.displayName();
    var isOlap = DataField.isOlap(dataItem.dataMember());
    if (isOlap) {
        return displayName;
    }
    else if (dataItem instanceof Measure) {
        return _getMeasureDisplayName(dataDashboardItem, dataItem, displayName, dataField.isAggregate && dataField.isAggregate() || false);
    }
    else if (dataItem instanceof Dimension) {
        let timeGroupInterval = dataItem.dateTimeGroupInterval();
        if (IsDateTime(dataField.fieldType()) && timeGroupInterval !== 'None') {
            return displayName + ' (' + getLocalizationById(dateTimeGroupIntervalsDict[timeGroupInterval]) + ')';
        }
        else {
            return displayName;
        }
    }
    else {
        return displayName;
    }
}
function _getMeasureDisplayName(dataDashboardItem, measure, dataMemberDisplayName, isAggregate = false) {
    if (dataDashboardItem._isAttribute(measure)) {
        return dataMemberDisplayName;
    }
    if (!!measure.expression()) {
        return getLocalizationById('DashboardWebStringId.Calculations.Expression');
    }
    let prefix = !!measure.calculation.calculation() && getLocalizationById(measure.calculation.calculation().name);
    let postfix = isAggregate ? '' : ' (' + getLocalizationById(summaryTypeDict[measure.summaryType()]) + ')';
    return ((prefix && (prefix + ' ')) || '') + dataMemberDisplayName + postfix;
}
