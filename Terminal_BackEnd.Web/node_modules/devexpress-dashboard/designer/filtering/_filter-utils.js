/**
* DevExpress Dashboard (_filter-utils.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { FilterStringOptions } from '@devexpress/analytics-core/analytics-widgets';
import * as ko from 'knockout';
import { format } from '../../data/_formatter';
import { createJQueryDeferred } from '../../data/_jquery-helpers';
import { DataItem } from '../../model/data-item/data-item';
import { Dimension } from '../../model/data-item/dimension';
import { ParameterHelper } from '../../model/parameters/_parameters-helper';
import { getAceTheme } from '../_dx-designer-integration';
export function formatValue(value, dataItem, fieldTypeName) {
    var getFormatViewModel = (fieldTypeName) => {
        var fieldType = DataItem.typesMap[fieldTypeName];
        switch (fieldType) {
            case DataItem.typesMap.DateTime:
                return dataItem.dateTimeFormat._getViewModel(dataItem instanceof Dimension ? dataItem.dateTimeGroupInterval() : undefined);
            case DataItem.typesMap.Decimal:
            case DataItem.typesMap.Double:
            case DataItem.typesMap.Integer:
                return dataItem.numericFormat._getViewModel();
            default:
                return undefined;
        }
    };
    var formatViewModel = getFormatViewModel(fieldTypeName);
    return !!formatViewModel ? format(value, formatViewModel) : value;
}
export var getValuesList = ({ dataItemValuesProvider, dataSource, dataMember, dataField, dataItem }) => {
    var deferred = createJQueryDeferred();
    dataItemValuesProvider.getDimensionUniqueValues(dataSource, dataMember, dataItem)
        .done(values => {
        deferred.resolve((values || [])
            .filter(value => value !== null)
            .map(value => {
            if (dataField.fieldType() === 'Text') {
                return value;
            }
            else {
                return {
                    value: value,
                    display: formatValue(value, dataItem, dataField.fieldType())
                };
            }
        }));
    });
    return deferred.promise();
};
export var createItemFilterOptions = (expression, item, _dataSourceBrowser, title) => {
    return ko.computed(() => {
        var options = new FilterStringOptions(expression, undefined, undefined, title);
        options.popupContainer = '.dx-dashboard-widget-container';
        options.helper.aceTheme = getAceTheme();
        if (_dataSourceBrowser && _dataSourceBrowser.parameters) {
            options.helper.parameters(_dataSourceBrowser.parameters().map(parameter => {
                var shortTypeName = parameter.type().split(',')[0];
                return { displayName: parameter.name(), name: parameter.name(), specifics: ParameterHelper.typeValues.filter(typeDescription => typeDescription.value === shortTypeName)[0].specifics || 'string' };
            }));
            options.helper.canChoiceParameters = true;
        }
        if (item) {
            options['item'] = item;
        }
        return options;
    });
};
