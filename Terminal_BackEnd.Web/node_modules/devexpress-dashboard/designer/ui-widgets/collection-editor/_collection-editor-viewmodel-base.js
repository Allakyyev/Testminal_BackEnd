/**
* DevExpress Dashboard (_collection-editor-viewmodel-base.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { getLocalizationById } from '../../../data/localization/_default';
import { $unwrap } from '../../../data/_jquery-helpers';
export class CollectionEditorViewModelBase {
    constructor(params) {
        this.noDataText = params.noDataText || 'DashboardWebStringId.CollectionEditor.NoItems';
        this.customToolbarItems = params.customToolbarItems;
        this.isToolbarVisible = true;
        this.allowAddItem = false;
        this.allowEditItem = true;
        this.allowReorderItem = false;
        this.allowRemoveItem = false;
        this.addEnabled = ko.observable(false);
        this.editEnabled = ko.observable(false);
        this.upEnabled = ko.observable(false);
        this.downEnabled = ko.observable(false);
        this.removeEnabled = ko.observable(false);
    }
    getListOptions() {
        return {
            activeStateEnabled: false,
            itemTemplate: (itemData, itemIndex, itemElement) => this._itemTemplate(itemData, itemIndex, $unwrap(itemElement)),
            noDataText: getLocalizationById(this.noDataText),
            encodeNoDataText: true,
            onContentReady: () => this._updateActionsState(),
            onInitialized: (e) => this.listInstance = e.component,
            onItemClick: () => this._itemClickHandler(),
            selectionMode: 'single',
        };
    }
    get selectedValue() {
        return this.listInstance && this.listInstance.option('selectedItems')[0];
    }
    dispose() { }
    _itemTemplate(itemData, itemIndex, itemElement) {
        const div = document.createElement('div');
        div.innerText = this._getDisplayText(itemData);
        div.setAttribute('class', 'dx-list-item-text');
        itemElement.appendChild(div);
    }
    _getDisplayText(itemData) {
        return '';
    }
    _itemClickHandler() {
        if (this._innerSelection !== this.selectedValue) {
            this._onSelectionChanged();
        }
        else {
            if (this.isToolbarVisible && this.allowEditItem && this.editEnabled()) {
                this.edit();
            }
        }
    }
    _listSelectionChanged() { }
    _updateActionsState() { }
    _onSelectionChanged() {
        this._innerSelection = this.selectedValue;
        this._listSelectionChanged();
        this._updateActionsState();
    }
    _setListSelection(selectedItem) {
        this.listInstance.option('selectedItems', selectedItem !== undefined ? [selectedItem] : []);
        this._onSelectionChanged();
    }
}
export class CollectionEditorRefreshCallback {
    constructor() {
        this.callbacks = [];
        this.refresh = () => this.callbacks.forEach(fn => fn());
        this.subscribe = (fn) => this.callbacks.push(fn);
    }
}
