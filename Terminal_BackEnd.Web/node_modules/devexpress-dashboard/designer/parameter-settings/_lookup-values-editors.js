/**
* DevExpress Dashboard (_lookup-values-editors.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import CustomStore from 'devextreme/data/custom_store';
import DataSource from 'devextreme/data/data_source';
import dxTagBox from 'devextreme/ui/tag_box';
import * as ko from 'knockout';
import { $promiseAdapter, createJQueryDeferred } from '../../data/_jquery-helpers';
import { getLocalizationById } from '../../data/localization/_default';
import { ParameterHelper } from '../../model/index.internal';
import { LookUpValue } from '../../model/parameters/look-up-value';
export const singleLookupValueEditor = options => context => {
    return {
        editorType: 'dxSelectBox',
        editorOptions: getLookupValueEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)
    };
};
export const multipleLookupValueEditor = options => context => {
    return {
        template: (args) => {
            var div = document.createElement('div');
            new dxTagBox(div, Object.assign(Object.assign({}, args.editorOptions), getLookupValuesEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)));
            return div;
        }
    };
};
function getLookupValueEditorOptions(parameter, dataSourceBrowser, container) {
    let items = ko.observable([]);
    let dataSource = new DataSource({
        store: getSortableCustomStorage(items, 'DisplayText'),
        paginate: true,
        pageSize: 100
    });
    const subscribeDataSource = (e) => {
        const disposables = e.component.__DX_DASHBOARD_DISPOSABLES = (e.component.__DX_DASHBOARD_DISPOSABLES || []);
        disposables.push(ko.computed(() => {
            if (!!parameter.staticListLookUpSettings()) {
                items(parameter.staticListLookUpSettings().values().filter(lookUpValue => !!lookUpValue.value()).map(lookUpValue => { return { Value: lookUpValue.value(), DisplayText: lookUpValue.value() }; }));
            }
            else if (!!parameter.dynamicListLookUpSettings()) {
                const type = parameter.type();
                const dynamicListLookUpSettings = parameter.dynamicListLookUpSettings();
                const parameterValues = dataSourceBrowser.getParameterValues(type, dynamicListLookUpSettings);
                const values = parameterValues();
                if (values.length === 0) {
                    parameterValues.subscribe(newValues => items(newValues));
                }
                else {
                    const converter = ParameterHelper.getTypeConverter(type);
                    converter && values.forEach(x => {
                        x.Value = converter(x.Value);
                        const valueMemberName = dynamicListLookUpSettings.valueMemberName();
                        const displayMemberName = dynamicListLookUpSettings.displayMemberName();
                        if (valueMemberName === displayMemberName || displayMemberName === null) {
                            x.DisplayText = x.Value;
                        }
                    });
                    items(values);
                }
            }
        }));
        disposables.push(items.subscribe(newItems => {
            dataSource.reload();
        }));
    };
    return {
        dataSource: dataSource,
        searchEnabled: true,
        valueExpr: 'Value',
        searchExpr: ['Value', 'DisplayText'],
        displayExpr: 'DisplayText',
        noDataText: getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
        placeholder: getLocalizationById('DashboardStringId.ParametersSelectorText'),
        encodeNoDataText: true,
        showClearButton: true,
        multiline: false,
        showSelectionControls: true,
        dropDownOptions: {
            container: container
        },
        onInitialized: subscribeDataSource,
        onDisposing: (e) => {
            (e.component.__DX_DASHBOARD_DISPOSABLES || []).forEach(d => d && d.dispose());
            e.component.__DX_DASHBOARD_DISPOSABLES = [];
        }
    };
}
function getLookupValuesEditorOptions(parameter, dataSourceBrowser, container) {
    return Object.assign(Object.assign({}, getLookupValueEditorOptions(parameter, dataSourceBrowser, container)), { value: parameter._valuesOfDefaultValues.peek(), onValueChanged: (e) => {
            parameter.defaultValues((e.value || []).map(val => {
                let lookUpValue = new LookUpValue();
                lookUpValue.value(val);
                return lookUpValue;
            }));
        } });
}
function getSortableCustomStorage(getItems, sortPropertyName) {
    return new CustomStore({
        load: (options) => {
            var result = [].concat(_sortItems(getItems(), sortPropertyName));
            if (options.take)
                result = result.splice(options.skip, options.take);
            return $promiseAdapter(createJQueryDeferred().resolve(result).promise());
        },
        loadMode: 'raw'
    });
}
function _sortItems(items, sortPropertyName) {
    return items.sort((a, b) => {
        var propA = ko.unwrap(a[sortPropertyName]), propB = ko.unwrap(b[sortPropertyName]);
        if (propA && propB) {
            var diff = propA - propB;
            if (!isNaN(diff))
                return diff;
            propA = propA.toLowerCase ? propA.toLowerCase() : propA;
            propB = propB.toLowerCase ? propB.toLowerCase() : propB;
            return (propA < propB) ? -1 : (propA > propB) ? 1 : 0;
        }
    });
}
