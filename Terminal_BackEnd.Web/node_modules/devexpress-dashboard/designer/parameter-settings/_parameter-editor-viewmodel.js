/**
* DevExpress Dashboard (_parameter-editor-viewmodel.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { isNonCollectionDataField } from '../../common/_data-source-browser';
import { $promiseAdapter, $unwrap } from '../../data/_jquery-helpers';
import { getLocalizationById } from '../../data/localization/_default';
import { DisposableObject } from '../../model/disposable-object';
import { safeComputed, safeSubscribe } from '../../model/internal/_knockout-utils';
import { ParameterHelper } from '../../model/parameters/_parameters-helper';
import { LookUpValue } from '../../model/parameters/look-up-value';
import { _dataMemberSerialization, _dataSourceNameSerialization, displayMemberSerialization, sortByMember, sortOrder, valueMemberSerialization } from '../../model/parameters/metadata/_dynamic-list-lookup-settings';
import { allowMultiselect, allowNull, defaultValue, defaultValues, description, lookUpSourceType, parameterName, parameterTypePropertyGrid, parameterVisible, selectAllValues } from '../../model/parameters/metadata/_parameter';
import { lookUpValue, lookUpvalues } from '../../model/parameters/metadata/_static-list-lookup-settings';
import { getFieldValue, inlineEditCollectionEditor, observableSelectBoxEditor } from '../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../form-adapter/_object-properties-wrapper';
import { FieldListPicker } from './_field-picker';
import { multipleLookupValueEditor, singleLookupValueEditor } from './_lookup-values-editors';
export class ParameterEditorViewModel extends DisposableObject {
    constructor(parameter, _dataSourceBrowserGetter, isNameValid) {
        super();
        this.parameter = parameter;
        this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        this.commonParameterSettings = this._getCommonParameterSettingsWrapper(parameter, isNameValid);
        this.lookUpParameterType = new ObjectPropertiesWrapper({
            model: parameter,
            properties: [Object.assign(Object.assign({}, lookUpSourceType), { simpleFormAdapterItem: 'selectBoxEditor' })]
        });
        this.staticListLookUpSettings = safeComputed({ staticListLookUpSettings: parameter.staticListLookUpSettings, type: this.parameter.type }, (args) => {
            if (args.staticListLookUpSettings) {
                return this._getStaticListLookUpSettingsWrapper(args.staticListLookUpSettings, args.type);
            }
            return null;
        });
        this.dynamicListLookUpSettings = safeComputed({ dynamicListLookUpSettings: parameter.dynamicListLookUpSettings }, (args) => {
            if (args.dynamicListLookUpSettings) {
                return this._getDynamicListLookUpSettingsWrapper(args.dynamicListLookUpSettings);
            }
            return null;
        });
    }
    get dataSourceBrowser() {
        return this._dataSourceBrowserGetter ? this._dataSourceBrowserGetter() : undefined;
    }
    _getStaticListLookUpSettingsWrapper(staticListLookUpSettings, parameterType) {
        const editorOptions = {
            dataFields: [lookUpValue.propertyName],
            noDataText: 'DashboardWebStringId.CollectionEditor.Parameters.NoItems',
            gridColumns: [Object.assign({ dataField: lookUpValue.propertyName }, getGridEditorSettings(parameterType))],
            createNewItemHandler: () => {
                var newLookUpValue = new LookUpValue({});
                newLookUpValue.valueType(parameterType);
                return newLookUpValue;
            },
        };
        return new ObjectPropertiesWrapper({
            model: staticListLookUpSettings,
            properties: [Object.assign(Object.assign({}, lookUpvalues), { formAdapterItem: inlineEditCollectionEditor(editorOptions) })]
        });
    }
    _getDynamicListLookUpSettingsWrapper(dynamicListLookUpSettings) {
        var isDataSourceAndDataMemberSet = (model) => {
            if (model) {
                let isDataSourceSet = !!model.dataSource();
                let dataMemberSupported = this.dataSourceBrowser.dataMembersSupported(model);
                let isDataMemberSet = true;
                if (dataMemberSupported) {
                    isDataMemberSet = !!model.dataMember();
                }
                return isDataSourceSet && isDataMemberSet;
            }
            return false;
        };
        return new ObjectPropertiesWrapper({
            model: dynamicListLookUpSettings,
            properties: [
                Object.assign(Object.assign({}, _dataSourceNameSerialization), { formAdapterItem: dataSourceChooserEditor(this.dataSourceBrowser) }),
                Object.assign(Object.assign({}, _dataMemberSerialization), { formAdapterItem: dataMemberChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                Object.assign(Object.assign({}, valueMemberSerialization), { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                Object.assign(Object.assign({}, displayMemberSerialization), { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                Object.assign(Object.assign({}, sortByMember), { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings }) }),
                sortOrder
            ],
            disabledFilterRules: {
                [_dataMemberSerialization.propertyName]: () => !this.dataSourceBrowser.dataMembersSupported(dynamicListLookUpSettings),
                [valueMemberSerialization.propertyName]: () => !isDataSourceAndDataMemberSet(dynamicListLookUpSettings),
                [displayMemberSerialization.propertyName]: () => !isDataSourceAndDataMemberSet(dynamicListLookUpSettings),
                [sortByMember.propertyName]: () => !isDataSourceAndDataMemberSet(dynamicListLookUpSettings)
            }
        });
    }
    _getCommonParameterSettingsWrapper(parameter, isNameValid) {
        var propertyInfos = [
            Object.assign(Object.assign({}, parameterName), { validateBeforeSet: true, validationRules: [
                    {
                        type: 'custom',
                        validationCallback: (options) => { return isNameValid(options.value); },
                        message: getLocalizationById('DashboardWebStringId.Parameters.ParameterNameShouldBeUnique')
                    },
                    ...parameterName.validationRules
                ] }),
            description,
            parameterVisible,
            allowNull,
            allowMultiselect,
            parameterTypePropertyGrid,
            Object.assign(Object.assign({}, defaultValue), { externalUpdateCallback: updateHandler => safeSubscribe({
                    lookupSourceType: parameter.lookUpSourceType,
                    allowMultiselect: parameter.allowMultiselect
                }, () => updateHandler({ forceValidate: false })) }),
            Object.assign(Object.assign({}, defaultValues), { validateBeforeSet: true, formAdapterItem: multipleLookupValueEditor({ parameter, dataSourceBrowser: this.dataSourceBrowser }) }),
            selectAllValues,
            lookUpSourceType
        ];
        return new ObjectPropertiesWrapper({
            model: parameter,
            properties: propertyInfos,
            visibilityFilterRules: {
                [defaultValue.propertyName]: (model) => !model.allowMultiselect(),
                [defaultValues.propertyName]: (model) => !!model.allowMultiselect(),
                [selectAllValues.propertyName]: (model) => !!model.allowMultiselect()
            },
            disabledFilterRules: {
                [allowMultiselect.propertyName]: ['lookUpSourceType', '=', 'None'],
                [defaultValues.propertyName]: (model) => !!model.selectAllValues()
            },
            dynamicEditorRules: {
                [defaultValue.propertyName]: (model) => {
                    if (model.lookUpSourceType() !== 'None') {
                        return { formAdapterItem: singleLookupValueEditor({ parameter, dataSourceBrowser: this.dataSourceBrowser }) };
                    }
                    const { simpleFormAdapterItem, editorOptions } = ParameterHelper.getEditorType(model.type());
                    return {
                        simpleFormAdapterItem,
                        editorOptions,
                    };
                }
            }
        });
    }
}
const dataSourceChooserEditor = dataSourceBrowser => {
    return observableSelectBoxEditor({
        observables: {
            dashboardDataSources: dataSourceBrowser._dataSources
        },
        load: (args) => {
            return args.dashboardDataSources.map(ds => {
                return {
                    value: ds.componentName(),
                    displayValue: ds.name()
                };
            });
        },
        additionalOptions: () => {
            return {
                placeholder: getLocalizationById('DashboardStringId.ParametersSelectorText'),
                noDataText: getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay')
            };
        }
    });
};
const dataMemberChooserEditor = options => {
    return observableSelectBoxEditor({
        observables: {
            dashboardDataSources: options.dataSourceBrowser._dataSources,
            selectedDashboardDataSource: options.dynamicListLookUpSettings.dataSource,
        },
        load: (args) => {
            var dataSource = args.dashboardDataSources.filter(ds => ds.componentName() === args.selectedDashboardDataSource)[0];
            if (dataSource && dataSource.supportDataMembers) {
                return $promiseAdapter(options.dataSourceBrowser.getDataFieldsArray(args.selectedDashboardDataSource, '', '', isNonCollectionDataField)
                    .then((members) => {
                    return members.map(member => { return { value: member.dataMember(), displayValue: member.dataMember() }; });
                }));
            }
            else {
                return [];
            }
        },
        additionalOptions: () => {
            return {
                placeholder: getLocalizationById('DashboardStringId.ParametersSelectorText'),
                noDataText: getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            };
        }
    });
};
const fieldChooserEditor = options => context => {
    return {
        template: (args, itemElement) => {
            const element = $unwrap(itemElement);
            element.classList.add('dx-dashboard-field-picker');
            var value = ko.observable(getFieldValue(args));
            value.subscribe(newValue => {
                args.component.updateData(args.dataField, newValue);
            });
            let model = new FieldListPicker(options.dataSourceBrowser, value, options.dynamicListLookUpSettings, args.editorOptions.disabled);
            ko.applyBindingsToNode(element, { template: { name: 'dx-dashboard-field-picker', data: model } }, context.bindingContext);
        }
    };
};
function getGridEditorSettings(typeString) {
    switch (typeString) {
        case 'System.Guid':
            return {
                dataType: 'string',
                editorOptions: {
                    mask: 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx',
                    maskRules: {
                        'x': /[0-9a-fA-F]/,
                    },
                    useMaskedValue: true,
                },
            };
        case 'System.SByte':
        case 'System.Int64':
        case 'System.Int32':
        case 'System.Int16':
        case 'System.Byte':
        case 'System.UInt16':
        case 'System.UInt32':
        case 'System.UInt64':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                    format: '0#',
                },
            };
        case 'System.Single':
        case 'System.Double':
        case 'System.Decimal':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                },
            };
        case 'System.DateTime':
            return {
                dataType: 'datetime'
            };
        case 'System.Boolean':
            return {
                dataType: 'boolean'
            };
        default:
        case 'System.String':
            return {
                dataType: 'string'
            };
    }
}
