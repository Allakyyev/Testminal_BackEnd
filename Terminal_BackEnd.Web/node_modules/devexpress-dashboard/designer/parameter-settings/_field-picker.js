/**
* DevExpress Dashboard (_field-picker.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { TreeListController } from '@devexpress/analytics-core/analytics-widgets-internal';
import * as ko from 'knockout';
import { ExpressionEditorItemsProvider } from '../expression-editor/_expression-editor-item-provider';
export class FieldListPicker {
    constructor(dataSourceBrowser, _value, model, disabled) {
        this.disabled = disabled;
        var self = this;
        this.treeListController = new DashboardTreeListFieldController(_value);
        this.pathToMembers = ko.computed(() => [model.dataSource(), model.dataMember()].filter(item => !!item).join('.'));
        this.pathToMembers.subscribe(() => _value(null));
        this.displayValue = ko.computed(() => {
            return !!_value() ? _value() : '';
        });
        this.value = ko.computed({
            read: () => {
                return _value();
            },
            write: (val) => {
                if (!val) {
                    _value(null);
                }
            }
        });
        this.itemsProvider = new ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), model.dataSource, model.dataMember);
    }
}
class DashboardTreeListFieldController extends TreeListController {
    constructor(_value) {
        super();
        this._value = _value;
    }
    hasItems(item) {
        return item['hasItems'];
    }
    canSelect(value) {
        return !value.hasItems;
    }
    select(value) {
        this._value(value.data['field'].dataMember());
    }
}
