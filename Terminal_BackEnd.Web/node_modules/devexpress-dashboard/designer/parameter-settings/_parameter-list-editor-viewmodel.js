/**
* DevExpress Dashboard (_parameter-list-editor-viewmodel.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { getLocalizationById } from '../../data/localization/_default';
import { DisposableObject } from '../../model/disposable-object';
import { NameGenerator } from '../../model/internal/_helper-classes';
import { Parameter } from '../../model/parameters/parameter';
import { ParameterEditorViewModel } from './_parameter-editor-viewmodel';
export class ParameterListEditorViewModel extends DisposableObject {
    constructor(dashboard, _dataSourceBrowserGetter) {
        super();
        this.dashboard = dashboard;
        this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        this.selectedParameters = ko.observable([]);
        this.selectedParameter = ko.computed(() => {
            return this.selectedParameters()[0];
        });
        this.parameterEditorViewModel = ko.observable(null);
        this.allowReordering = ko.observable(false);
        this.toggleReordering = () => {
            this.allowReordering(!this.allowReordering());
        };
        this.addParameter = () => {
            var name = NameGenerator.generateName(getLocalizationById('DashboardStringId.NewParameterNamePrefix'), this.dashboard().parameters(), 'name', 1), param = new Parameter({ '@Name': name });
            this.dashboard().parameters.push(param);
            this.selectedParameters([param]);
        };
        this.removeParameter = () => {
            this.dashboard().parameters.remove(this.selectedParameter());
            this.selectedParameters([this.dashboard().parameters()[0]]);
        };
        this.reorderParameters = (e) => {
            let reorder = (array, from, to) => {
                var innerArray = array();
                innerArray.splice(to, 0, innerArray.splice(from, 1)[0]);
                array(innerArray);
            };
            reorder(this.dashboard().parameters, e.fromIndex, e.toIndex);
            this.selectedParameters([this.dashboard().parameters()[e.toIndex]]);
        };
        this.selectedParameter.subscribe((sp) => {
            if (sp) {
                let isNameValid = (name) => {
                    return this.dashboard().parameters().filter(p => p !== sp && p.name() === name).length === 0;
                };
                this.parameterEditorViewModel(new ParameterEditorViewModel(sp, _dataSourceBrowserGetter, isNameValid));
            }
            else {
                this.parameterEditorViewModel(undefined);
            }
        });
        this.toDispose(this.selectedParameter);
    }
    initialize() {
        var setDefaultSelectedParameter = dashboard => {
            if (dashboard && dashboard.parameters.peek().length > 0) {
                this.selectedParameters([dashboard.parameters.peek()[0]]);
            }
            else {
                this.selectedParameters([]);
            }
        };
        this.toDispose(this.dashboard.subscribe(setDefaultSelectedParameter));
        setDefaultSelectedParameter(this.dashboard.peek());
    }
}
