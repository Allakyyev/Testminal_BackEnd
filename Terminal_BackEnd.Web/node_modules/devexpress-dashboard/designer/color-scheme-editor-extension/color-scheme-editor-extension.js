/**
* DevExpress Dashboard (color-scheme-editor-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { getLocalizationById } from '../../data/localization/_default';
import { Color } from '../../model/color';
import { coloringMode } from '../../model/data-item/metadata/_dimension';
import { coloringOptions } from '../../model/items/options/metadata/_coloring-options';
import { measuresColoringMode, useGlobalColors } from '../../model/items/options/metadata/_dashboard-item-coloring-options';
import { getDataItemDisplayName } from '../_display-name-provider';
import { ObjectPropertiesWrapper } from '../form-adapter/_object-properties-wrapper';
import { AccordionTab, KnownTabs } from '../properties-controller/_accordion-tab';
import { DashboardMenuItem } from '../toolbox-extension/toolbox-items';
import { ColorPickerModel } from './internal/_color-picker-model';
import { ColorSchemeModel } from './internal/_color-scheme-model';
import { colorSchemeTreeViewEditor } from './internal/_color-tree-view-model';
import { EntryEditorViewModel } from './internal/_entry-editor-model';
const name = 'dashboardColorSchemeEditor';
const nameAlias = 'dashboard-color-scheme-editor';
export class DashboardColorSchemeEditorExtension {
    constructor(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this.selected = ko.observable(false);
        this._colorSchemeModel = ko.observable();
        this._colorPalette = ko.observableArray();
        this._entryEditorModel = new EntryEditorViewModel(this._colorPalette);
        this._colorPickerModel = ko.computed(() => new ColorPickerModel(this._colorSchemeModel(), this._colorPalette));
        this._selectedEntry = ko.observable();
        this._createNewEntry = () => {
            this._colorSchemeModel().initNewEntry();
            this._entryEditorModel.editEntry(this.dataSourceBrowserExtension._dataSourceBrowserViewModel().dataSourceBrowser, this._colorSchemeModel().newEntry(), this._colorSchemeModel().selectedSignatures()[0].colorByMeasures, this._colorSchemeModel().getAvailableMeasureKeys(), editedEntry => this._colorSchemeModel().updateEntry(undefined, editedEntry), false);
        };
        this._menuItem = new DashboardMenuItem(nameAlias, 'DashboardWebStringId.DashboardMenuColorScheme', 250, 0);
        this._menuItem.template = 'dx-dashboard-form-color-scheme';
        this._menuItem.data = {
            colorSchemeModel: this._colorSchemeModel,
            selectedEntry: this._selectedEntry,
            entryEditorModel: this._entryEditorModel,
            colorPickerModel: this._colorPickerModel,
            createNewEntry: this._createNewEntry,
            colorPalette: this._colorPalette,
            getDataSourceName: (dataSourceId) => {
                if (this.dashboardControl.dashboard() && this.dashboardControl.dashboard().dataSources()) {
                    let dataSource = this.dashboardControl.dashboard().dataSources().filter(dataSource => dataSource.componentName() === dataSourceId)[0];
                    if (dataSource)
                        return dataSource.name();
                }
                return dataSourceId;
            }
        };
        this._menuItem.disabled = ko.computed(() => !dashboardControl.dashboard());
    }
    static _isColoringSupported(item) {
        return !!item['coloringOptions'];
    }
    _updateExtensionModel() {
        if (!!this.dashboardControl.dashboard() && this.dashboardControl.isDesignMode()) {
            !!this.dashboardControl._serviceClient() && this.dashboardControl._serviceClient().getDashboardPalette().done(palette => {
                this._colorPalette(deserializeArray(palette, (colorModel) => new Color(colorModel['#text']))());
            });
            this._colorSchemeModel(new ColorSchemeModel(this.dashboardControl.dashboard(), this.dashboardControl._serviceClient() && this.dashboardControl._serviceClient().getColoringScheme || null, this.dashboardControl._updateHub));
        }
        else {
            this._colorSchemeModel(null);
        }
    }
    start() {
        this._propertiesPanelExtension = this.dashboardControl.findExtension('itemOptionsPanel');
        this.dataSourceBrowserExtension = this.dashboardControl.findExtension('dataSourceBrowser');
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
        this._subscriptions.push(this.dashboardControl.dashboard.subscribe(this._updateExtensionModel, this));
        this._subscriptions.push(this.dashboardControl.isDesignMode.subscribe(this._updateExtensionModel, this));
        this._subscriptions.push(this._selectedEntry.subscribe((entry) => {
            if (entry == null) {
                this._entryEditorModel.close();
            }
            else {
                this._entryEditorModel.editEntry(this.dataSourceBrowserExtension._dataSourceBrowserViewModel().dataSourceBrowser, entry, this._colorSchemeModel().selectedSignatures()[0].colorByMeasures, this._colorSchemeModel().getAvailableMeasureKeys(), editedEntry => this._colorSchemeModel().updateEntry(entry, editedEntry), this._colorSchemeModel().isEntryAutogenerated(entry));
            }
        }));
        ko.computed(() => {
            var model = this._colorSchemeModel();
            if (model) {
                this._subscriptions.push(model.selectedSignatures.subscribe(v => {
                    this._entryEditorModel.close();
                    model.newEntry(null);
                }));
            }
        });
        var oldColoringComputed = null;
        if (!!this._propertiesPanelExtension) {
            this._subscriptions.push(this._propertiesPanelExtension._subscribeTabsChanged(tabs => {
                oldColoringComputed && oldColoringComputed.dispose();
                var item = this.dashboardControl._actualLayoutController() && this.dashboardControl._actualLayoutController().selectedDashboardItem() || null;
                if (item && DashboardColorSchemeEditorExtension._isColoringSupported(item)) {
                    var coloringTab = new AccordionTab(KnownTabs.ColoringOptions, 'DashboardWebStringId.ColoringOptions');
                    tabs.push(coloringTab);
                    oldColoringComputed = ko.computed(() => {
                        coloringTab.tabModel(this._getColoringWrapper(item));
                    });
                    this._subscriptions.push(oldColoringComputed);
                    tabs.push(new AccordionTab(KnownTabs.ColorScheme, 'DashboardWebStringId.DashboardMenuColorScheme', this._getColorSchemeWrapper(item)));
                }
            }));
        }
        this._updateExtensionModel();
    }
    stop() {
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    }
    _getColorSchemeWrapper(model) {
        ko.computed(() => {
            if (!!this._colorSchemeModel())
                this._colorSchemeModel().selectedSignatures([model._getColoringSignatureOnCurrentDrillDownLevel()]);
        });
        var artificialModel = {
            colorSchemeModel: this._colorSchemeModel(),
            coloringOptions: model.coloringOptions
        };
        var properties = [{
                propertyName: 'colorSchemeModel',
                formAdapterItem: colorSchemeTreeViewEditor({
                    dataSource: this._colorSchemeModel().selectedSignatureEntries,
                    editColor: (entry, event) => {
                        this._colorPickerModel().init(entry, event.target);
                    },
                    colorPalette: this._colorPalette,
                    colorPickerModel: this._colorPickerModel,
                }),
            }, {
                container: coloringOptions,
                properties: [useGlobalColors]
            }];
        return new ObjectPropertiesWrapper({
            model: artificialModel,
            properties: properties
        });
    }
    _getColoringWrapper(model) {
        var allColorsModel = {
            measuresColoringMode: model.coloringOptions.measuresColoringMode,
            getInfo: () => []
        };
        var properties = [];
        var addColoringOptions = (item, arr, prefixId) => {
            var prefix = getLocalizationById(prefixId);
            arr.forEach(arg => {
                if (arg.dataItem()) {
                    allColorsModel[arg.uniqueName()] = arg.dataItem().coloringMode;
                    properties.push({
                        propertyName: arg.uniqueName(),
                        displayName: prefix + ' - ' + getDataItemDisplayName(this.dashboardControl._dataSourceBrowser, item, arg.dataItem()),
                        simpleFormAdapterItem: 'buttonGroupEditor',
                        values: coloringMode.values
                    });
                }
            });
        };
        var addItemColoringOptions = (itemsInfo) => {
            itemsInfo.forEach(itemInfo => addColoringOptions(model, itemInfo.items, itemInfo.prefixId));
        };
        addItemColoringOptions(model._getColorizableDataItemsInfo());
        if (model._canColorByMeasures) {
            properties.push(measuresColoringMode);
        }
        return new ObjectPropertiesWrapper({
            model: allColorsModel,
            properties: properties
        });
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new DashboardColorSchemeEditorExtension(dashboardControl);
extensionNameMap[nameAlias] = name;
