/**
* DevExpress Dashboard (_color-picker-model.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { getLocalizationById } from '../../../data/localization/_default';
import { Color } from '../../../model/color';
import { AutoColorSchemeEntry } from '../../../model/colorization/color-scheme-entry';
export class ColorPickerModel {
    constructor(colorSchemeModel, colorPalette) {
        this.colorSchemeModel = colorSchemeModel;
        this.colorPalette = colorPalette;
        this.target = ko.observable();
        this.visible = ko.observable();
        this.colorCss = ko.observable('');
        this.confirm = () => {
            this.entry.paletteIndex(null);
            this.entry.color(Color.fromRgbaString(this.colorCss()));
            if (this.entry instanceof AutoColorSchemeEntry) {
                var newEntry = this.entry.clone();
                this.colorSchemeModel.updateEntry(this.entry, newEntry);
            }
            this.visible(false);
        };
        this.buttonItems = ko.observableArray([
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: getLocalizationById('DashboardWebStringId.ButtonConfirm'), onClick: this.confirm } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: getLocalizationById('DashboardStringId.ButtonCancel'), onClick: () => this.visible(false) } }
        ]);
    }
    init(entry, target) {
        this.entry = entry;
        let color = entry.paletteIndex() === null ? entry.color() : this.colorPalette()[entry.paletteIndex()];
        this.colorCss(color ? color.css : '');
        this.target(target);
        this.visible(true);
    }
}
