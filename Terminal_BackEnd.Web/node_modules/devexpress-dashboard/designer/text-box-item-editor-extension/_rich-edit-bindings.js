/**
* DevExpress Dashboard (_rich-edit-bindings.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { create, createOptions, DocumentFormat, FileTabItemId, InsertTabItemId, MailMergeTabItemId, RibbonMenuItem, RibbonSubMenuItem, RibbonTabType, ViewType } from 'devexpress-richedit';
import * as ko from 'knockout';
import { getLocalizationById } from '../../data/localization/_default';
ko.bindingHandlers['dx-dashboard-rich-edit'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var options = ko.unwrap(valueAccessor());
        const richEditOptions = createOptions();
        richEditOptions.width = '100%';
        richEditOptions.height = '100%';
        richEditOptions.view.viewType = ViewType.Simple;
        richEditOptions.view.simpleViewSettings.paddings = { bottom: 7, left: 7, right: 7, top: 7 };
        if (options.dashboardItemWidth && options.dashboardItemWidth > 0) {
            richEditOptions.view.simpleViewSettings.fixedWidth = options.dashboardItemWidth;
        }
        richEditOptions.events.saving = (s, e) => {
            var document = atob(e.base64);
            options.onSaving(document);
            e.handled = true;
        };
        richEditOptions.events.documentLoaded = (s, e) => {
            var document = s.document;
            document.fields.updateAllFields();
            const charProps = document.getDefaultCharacterProperties();
            charProps.fontName = 'Segoe UI';
            document.setDefaultCharacterProperties(charProps);
            document.modified = false;
        };
        richEditOptions.events.calculateDocumentVariable = function (s, e) {
            var docVariable = options.docVariables.filter(v => v.id === e.variableName)[0];
            if (docVariable) {
                e.value = docVariable.displayName;
            }
        };
        const dashboardCmdPrefix = 'insertDashboardVariable';
        var fileTab = richEditOptions.ribbon.getTab(RibbonTabType.File);
        fileTab.removeItem(FileTabItemId.CreateNewDocument);
        fileTab.removeItem(FileTabItemId.PrintDocument);
        var insertTab = richEditOptions.ribbon.getTab(RibbonTabType.Insert);
        var mailMergeTab = richEditOptions.ribbon.getTab(RibbonTabType.MailMerge);
        [InsertTabItemId.ShowBookmarkDialog, InsertTabItemId.InsertHeader, InsertTabItemId.InsertFooter,
            InsertTabItemId.InsertPageCountField, InsertTabItemId.InsertPageNumberField, InsertTabItemId.InsertFloatingTextBox].forEach(id => insertTab.removeItem(id));
        var dashboardFieldsMenuItems = options.docVariables.length ?
            options.docVariables.map(docVariable => { return new RibbonSubMenuItem(dashboardCmdPrefix + docVariable.id, docVariable.displayName); })
            :
                [new RibbonSubMenuItem('dummyCommand', getLocalizationById('DashboardWebStringId.TextBoxItemEditor.NoFields'))];
        [MailMergeTabItemId.ShowAllFieldCodes, MailMergeTabItemId.ShowAllFieldResults, MailMergeTabItemId.UpdateAllFields]
            .map(id => mailMergeTab.getItem(id))
            .forEach((item, i) => insertTab.insertItem(item, i));
        insertTab.insertItem(new RibbonMenuItem(dashboardCmdPrefix, getLocalizationById('DashboardWebStringId.TextBoxItemEditor.InsertField'), dashboardFieldsMenuItems, {
            icon: 'dxre-icon-InsertDataField',
            showText: true
        }), 0);
        insertTab.getItem(InsertTabItemId.ShowInsertTableDialog).beginGroup = true;
        richEditOptions.ribbon.removeTab(RibbonTabType.PageLayout);
        richEditOptions.ribbon.removeTab(RibbonTabType.References);
        richEditOptions.ribbon.removeTab(RibbonTabType.View);
        richEditOptions.ribbon.removeTab(RibbonTabType.MailMerge);
        richEditOptions.events.customCommandExecuted = (richEdit, e) => {
            var docVariable = options.docVariables.filter(v => (dashboardCmdPrefix + v.id) === e.commandName)[0];
            if (docVariable) {
                var field = richEdit.document.fields.create(richEdit.selection.active, 'docvariable ' + docVariable.id);
                richEdit.document.insertText(field.resultInterval.start, docVariable.displayName);
                field.update();
            }
        };
        var richEdit = create(element, richEditOptions);
        if (options.initialDocument) {
            richEdit.openDocument(btoa(unescape(encodeURIComponent(options.initialDocument))), '', DocumentFormat.Rtf);
        }
        richEdit.documentSaveFormat = DocumentFormat.Rtf;
        options.forceSave = () => {
            richEdit.hasUnsavedChanges = true;
            richEdit.saveDocument(DocumentFormat.Rtf);
        };
        options.documentModified = () => richEdit.document.modified;
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            richEdit.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
