/**
* DevExpress Dashboard (text-box-item-editor-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import dxButton from 'devextreme/ui/button';
import * as ko from 'knockout';
import { extensionNameMap } from '../../common/control-options';
import { SplitterSize } from '../../common/docking-layout/core/_layout-item';
import { getLocalizationById } from '../../data/localization/_default';
import { TextBoxItem } from '../../model';
import { DisposableObject } from '../../model/disposable-object';
import { subscribeAndPerform } from '../../model/internal/_knockout-utils';
import { textBoxText } from '../../model/items/metadata/_text-box-item';
import { getDataItemDisplayName } from '../_display-name-provider';
import { ObjectPropertiesWrapper } from '../form-adapter/_object-properties-wrapper';
import { TextBoxItemSurface } from '../items/surfaces/_textbox-item-surface';
import { ContentInHeaderAccordionTab, KnownTabs } from '../properties-controller/_accordion-tab';
import './_rich-edit-bindings';
import { RichEditExtensionViewModel } from './_text-box-item-editor-view-model';
const name = 'textBoxItemEditor';
const nameAlias = 'text-box-item-editor';
export class TextBoxItemEditorExtension extends DisposableObject {
    constructor(dashboardControl) {
        super();
        this.name = name;
        this._dashboardControl = dashboardControl;
        this._viewModel = new RichEditExtensionViewModel();
        this._customTemplate = {
            name: 'dx-dashboard-text-box-item-editor-extension',
            data: this._viewModel
        };
    }
    start() {
        this._dashboardControl.customTemplates.push(this._customTemplate);
        var contextMenuExtension = this._dashboardControl.findExtension('itemMenu');
        var propertiesPanelExtension = this._dashboardControl.findExtension('itemOptionsPanel');
        if (contextMenuExtension && propertiesPanelExtension) {
            this.toDispose(subscribeAndPerform(contextMenuExtension._itemContextMenu, (menu) => {
                if (menu) {
                    var customData = menu.contextMenuItems()[0].customData;
                    if (customData instanceof TextBoxItemSurface) {
                        customData.extendTabsHandler = (tabs, model, dashboardItem) => {
                            var textBoxTextProperty = Object.assign({}, textBoxText);
                            this._extendTextBoxSerializationInfo(textBoxTextProperty, dashboardItem, this._dashboardControl._dataSourceBrowser);
                            tabs.push(new ContentInHeaderAccordionTab('text-box-item-rich-edit', getLocalizationById('DashboardWebStringId.AccordionTab.Content'), new ObjectPropertiesWrapper({
                                model: dashboardItem,
                                properties: [
                                    textBoxTextProperty
                                ]
                            })));
                        };
                    }
                }
            }));
            this.toDispose(propertiesPanelExtension._subscribeTabsChanged((tabs, item) => {
                var dataSourceBrowser = this._dashboardControl._dataSourceBrowser;
                if (item && item instanceof TextBoxItem) {
                    var textBoxDashoardItem = item;
                    var tab = tabs.filter(tab => tab.name === KnownTabs.Common)[0];
                    var tabModel = tab.tabModel();
                    if (tabModel) {
                        var textProperty = tabModel._serializationInfo.filter(info => info.propertyName === 'text')[0];
                        if (textProperty) {
                            this._extendTextBoxSerializationInfo(textProperty, textBoxDashoardItem, dataSourceBrowser);
                        }
                    }
                }
            }));
        }
    }
    _extendTextBoxSerializationInfo(textProperty, textBoxDashoardItem, dataSourceBrowser) {
        textProperty.displayName = getLocalizationById('DashboardWebStringId.AccordionTab.Content');
        textProperty.formAdapterItem = {
            template: (args) => {
                var div = document.createElement('div');
                new dxButton(div, {
                    text: getLocalizationById('DashboardWebStringId.TextBoxItemEditor.EditTextButton'),
                    width: '100%',
                    onClick: () => {
                        var docVariables = textBoxDashoardItem.dataItems().map(dataItem => {
                            return {
                                id: dataItem.uniqueName(),
                                displayName: getDataItemDisplayName(dataSourceBrowser, textBoxDashoardItem, dataItem)
                            };
                        });
                        this._viewModel.show({
                            getValue: () => ko.unwrap(args.component.option('formData')[args.dataField]),
                            setValue: (v) => args.component.updateData(args.dataField, v)
                        }, docVariables, this._getDashboardItemWidth());
                    }
                });
                return div;
            }
        };
    }
    _getDashboardItemWidth() {
        var layoutController = this._dashboardControl._actualLayoutController();
        if (layoutController && layoutController.selectedLayoutItem()) {
            return layoutController.selectedLayoutItem().getWidth() - SplitterSize;
        }
        return null;
    }
    stop() {
        this._dashboardControl.customTemplates.remove(this._customTemplate);
        this.dispose();
    }
}
extensionNameMap[nameAlias] = name;
