/**
* DevExpress Dashboard (choose-data-source-type-page.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { SvgTemplatesEngine } from '@devexpress/analytics-core/analytics-widgets-internal';
import { DataSourceWizardPageId as AnalyticDataSourceWizardPageId, ChooseDataSourceTypePage, DataSourceType, TypeItem, _registerChooseDataSourceTypePage as _registerAnalyticChooseDataSourceTypePage } from '@devexpress/analytics-core/analytics-wizard';
import { createJQueryDeferred } from '../../../data/_jquery-helpers';
import { getLocalizationById } from '../../../data/localization/_default';
import { ConfirmDialogViewModel } from '../../confirm-dialog/_confirm-dialog';
import { ToDataSourceTypeNumber } from '../models/data-source-wizard-model';
import { DataSourceWizardPageId } from './page-id';
const _OlapSvgIconTemplate = {
    'dx-dashboard-svg-wizard-OlapDataSource': '<svg version="1.1" data-bind="svgAttrs" x="0px" y="0px" viewBox="0 0 96 96" xml:space="preserve"><g id="Layer_1"><g class="dxrd-svg-st1">	<ellipse class="dxrd-svg-black" cx="44" cy="19.5" rx="26" ry="7.5"/></g><g class="dxrd-svg-st2"><path class="dxrd-svg-black" d="M46,52.7v-0.2L70,40V21.4c0,4.2-11.6,7.6-26,7.6s-26-3.4-26-7.6v45c0,4.2,11.6,7.6,26,7.6c0.7,0,1.3,0,2,0 V52.7z"/></g><g class="dxrd-svg-st0"><polygon class="dxrd-svg-blue" points="48,56 69,67 69,91 48,80"/></g><polygon class="dxrd-svg-blue" points="92,56 71,67 71,91 92,80"/><g class="dxrd-svg-st2"><polygon class="dxrd-svg-blue" points="70,42.2 48,53.7 70,65.3 92,53.7"/></g></g><g id="Layer_2"></g></svg>'
};
SvgTemplatesEngine.addTemplates(_OlapSvgIconTemplate);
export class DashboardChooseDataSourceTypePage extends ChooseDataSourceTypePage {
    constructor(wizardOptions, customTemplates) {
        super(wizardOptions);
        this._confirmDialogViewModel = new ConfirmDialogViewModel();
        this._confirmDialogCustomTemplate = {
            name: 'dx-dashboard-confirm-dialog',
            data: this._confirmDialogViewModel
        };
        this.connectionStrings = wizardOptions.connectionStrings;
        this._dataSources = wizardOptions.dataSources && wizardOptions.dataSources() || [];
        this._customTemplates = customTemplates;
        customTemplates.push(this._confirmDialogCustomTemplate);
    }
    _createTypeItems() {
        let typeItems = [];
        let wizardSettings = this._dataSourceTypeOptions.wizardSettings;
        if (wizardSettings.enableSqlDataSource) {
            typeItems.push(new TypeItem('Database', 'DataAccessUIStringId.DSTypeSql', 'sqldatasource', 'dxrd-svg-wizard-SqlDataSource', ToDataSourceTypeNumber('Sql')));
        }
        if (wizardSettings.enableJsonDataSource) {
            typeItems.push(new TypeItem('JSON', 'DataAccessUIStringId.DSTypeJson', 'jsondatasource', 'dxrd-svg-wizard-JsonDataSource', ToDataSourceTypeNumber('Json')));
        }
        if (wizardSettings.enableOlapDataSource) {
            typeItems.push(new TypeItem('OLAP Data Source', 'DashboardStringId.DefaultOlapDataSourceName', 'olapdatasource', 'dx-dashboard-svg-wizard-OlapDataSource', ToDataSourceTypeNumber('Olap')));
        }
        if (wizardSettings.enableFederationDataSource) {
            typeItems.push(new TypeItem('Data Federation', 'DataAccessUIStringId.DSTypeFederation', 'federationdatasource', 'dxrd-svg-wizard-FederationDataSource', ToDataSourceTypeNumber('Federation')));
        }
        return typeItems;
    }
    commit() {
        if (this.selectedItem().type === DataSourceType.Federation) {
            if (!this._dataSources || this._dataSources.length === 0) {
                let def = createJQueryDeferred();
                this._confirmDialogViewModel.confirm(getLocalizationById('DashboardWebStringId.DataSources.DashboardDataSourceWizard'), getLocalizationById('DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage'), getLocalizationById('DashboardStringId.ButtonOK')).always(() => def.reject());
                return def.promise();
            }
        }
        return super.commit();
    }
    dispose() {
        this._customTemplates.remove(this._confirmDialogCustomTemplate);
        super.dispose();
    }
}
export function _registerChooseDataSourceTypePage(factory, wizardOptions, customTemplates) {
    let chooseDataSourceTypePageMeta = factory.getMetadata(AnalyticDataSourceWizardPageId.ChooseDataSourceTypePage);
    if (!chooseDataSourceTypePageMeta) {
        _registerAnalyticChooseDataSourceTypePage(factory, wizardOptions);
        chooseDataSourceTypePageMeta = factory.getMetadata(AnalyticDataSourceWizardPageId.ChooseDataSourceTypePage);
        factory.unregisterMetadata(AnalyticDataSourceWizardPageId.ChooseDataSourceTypePage);
    }
    factory.registerMetadata(DataSourceWizardPageId.ChooseDataSourceTypePage, {
        setState: (data, state) => {
            state.dataSourceType = data.dataSourceType;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.dataSourceType = defaultState.dataSourceType;
        },
        create: () => new DashboardChooseDataSourceTypePage(wizardOptions, customTemplates),
        description: chooseDataSourceTypePageMeta.description,
        template: chooseDataSourceTypePageMeta.template
    });
}
