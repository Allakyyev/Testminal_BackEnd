/**
* DevExpress Dashboard (_helpers.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { FederationDataSource as AnalyticsFederationDataSource, FederationSource } from '@devexpress/analytics-core/analytics-data';
import { FieldListProvider } from '@devexpress/analytics-core/analytics-internal';
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { _restoreFederationDataSourceFromState } from '@devexpress/analytics-core/analytics-wizard';
import { FederationDataSourceItemsExtender } from '@devexpress/analytics-core/analytics-wizard-internal';
import { FederationQueryType } from '@devexpress/analytics-core/query-builder/dataSource/utils';
import * as ko from 'knockout';
import { getLocalizationById } from '../../data/localization/_default';
import { type } from '../../data/_utils';
import { DataDashboardItem, FederationDataSource, ObjectDataSource, QueryNode, Source, SqlDataSource } from '../../model';
import { JsonDataSource } from '../../model/data-sources/json-data-source';
import { Guard } from '../../model/internal/_helper-classes';
import { FlatteningDataFieldsProviderWrapper, getFieldList } from './pages/_field-list-provider';
export function getDataSourceInfo(dataSource) {
    let dataSourceInfo = {
        name: dataSource.name(),
        data: null,
        id: dataSource.componentName(),
        isSqlDataSource: dataSource instanceof SqlDataSource,
        isJsonDataSource: dataSource instanceof JsonDataSource,
        isObjectDataSource: dataSource instanceof ObjectDataSource,
        isFederationDataSource: dataSource instanceof FederationDataSource,
        isListType: !dataSource.supportDataMembers,
        isSupportQueries: dataSource.supportDataMembers
    };
    return Object.assign(Object.assign({}, dataSourceInfo), { componentName: dataSource.componentName() });
}
export function createNewFederationDataSource(federationWizardModel, usedDataSources) {
    let analyticsDataSource = _restoreFederationDataSourceFromState(federationWizardModel, usedDataSources);
    let federationDataSource = toFederationDataSource(analyticsDataSource, usedDataSources());
    federationDataSource.name(getLocalizationById('DashboardStringId.DefaultFederationDataSourceName'));
    return federationDataSource;
}
export function toFederationDataSource(analyticsDataSource, usedDataSources) {
    let federationDataSource = new FederationDataSource({ '@ItemType': 'FederationDataSource' }, new ModelSerializer());
    analyticsDataSource.sources().forEach(analyticsSource => {
        let source = toFederationSource(analyticsSource, usedDataSources);
        federationDataSource.sources.push(source);
    });
    analyticsDataSource.queries().forEach(analyticsQuery => {
        let query = toSameSourcesFederationQuery(analyticsQuery);
        federationDataSource.queries.push(query);
    });
    return federationDataSource;
}
function toFederationSource(analyticsSource, usedDataSources) {
    let source = new Source({ '@ItemType': 'Source' });
    source.name(analyticsSource.sourceName());
    source.dataMember(analyticsSource.dataMember() || '');
    let dataSourceInfoName = getDataSourceName(analyticsSource.sourceName(), analyticsSource.dataMember());
    let dataSourceInfo = usedDataSources.find(dsInfo => dsInfo.name === dataSourceInfoName);
    if (!dataSourceInfo)
        throw new Error(`The dashboard DataSource for SourceName '${analyticsSource.sourceName()}' is not found.`);
    source.dataSource(dataSourceInfo.componentName);
    return source;
}
function getDataSourceName(analyticsSourceName, analyticsDataMember) {
    return analyticsSourceName && analyticsDataMember ? analyticsSourceName.slice(0, -(analyticsDataMember.length + 1)) : analyticsSourceName;
}
export function addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, usedDataSources) {
    let existingSource = dashboardFederationDataSource.sources().find(s => s.name() === analyticsSource.sourceName());
    if (existingSource === undefined) {
        let newSource = toFederationSource(analyticsSource, usedDataSources);
        dashboardFederationDataSource.sources.push(newSource);
    }
}
export function toSameSourcesFederationQuery(analyticsQuery) {
    let analyticsQueryJson = new ModelSerializer().serialize(analyticsQuery);
    return new QueryNode(analyticsQueryJson);
}
export function toAnalyticsFederationDataSource(federationDataSource, usedDataSources, dataSourceBrowser) {
    let observableDataSourceInfos = ko.observableArray(usedDataSources);
    let fieldListProvider = new FieldListProvider(pathRequest => getFederationFieldList(pathRequest, dataSourceBrowser), observableDataSourceInfos, [new FederationDataSourceItemsExtender(observableDataSourceInfos)], true);
    let analyticsFederationDataSource = new FederationDataSourceAnalyticsWrapper(federationDataSource.sources(), observableDataSourceInfos, fieldListProvider);
    analyticsFederationDataSource.name(federationDataSource.name());
    federationDataSource.sources().forEach(source => {
        let analyticsSource = toAnalyticsFederationSource(source);
        analyticsFederationDataSource.sources.push(analyticsSource);
    });
    federationDataSource.queries().forEach(query => {
        let analyticsQuery = toSameSourcesAnalyticsFederationQuery(query, analyticsFederationDataSource);
        analyticsFederationDataSource.queries.push(analyticsQuery);
    });
    return analyticsFederationDataSource;
}
function toAnalyticsFederationSource(source) {
    let analyticsSource = new FederationSource({});
    analyticsSource.dataMember(source.dataMember());
    analyticsSource.sourceName(source.name());
    return analyticsSource;
}
export let initialQueryAliasSymbol = '__initialQuery';
function toSameSourcesAnalyticsFederationQuery(query, analyticsFederationDataSource) {
    let queryJson = new ModelSerializer().serialize(query);
    let analyticsQuery = analyticsFederationDataSource.createQuery(queryJson);
    analyticsQuery[initialQueryAliasSymbol] = query.alias();
    return analyticsQuery;
}
export function addOrUpdateQuery(dashboard, federationDataSource, index, newQuery) {
    Guard.isNotFalsy(newQuery, "'newQuery'");
    Guard.requires(!federationDataSource.queries().some((q, i) => i !== index && q === newQuery));
    let oldQuery = federationDataSource.queries()[index];
    if (oldQuery === newQuery)
        return;
    if (oldQuery)
        federationDataSource.queries.splice(index, 1, newQuery);
    else
        federationDataSource.queries.push(newQuery);
    let nameIndex = 1;
    let baseAlias = newQuery.alias();
    let newQueryAlias = baseAlias;
    while (federationDataSource.queries().find((q, i) => i !== index && q.alias() === newQueryAlias) !== undefined) {
        newQueryAlias = baseAlias + ' ' + nameIndex++;
    }
    newQuery.alias(newQueryAlias);
    if (oldQuery && newQuery.alias() !== oldQuery.alias()) {
        renameDataMember(dashboard, federationDataSource, oldQuery.alias(), newQuery.alias());
    }
}
export function createDataSourceInfos(dashboardDataSources) {
    let dataSourceInfos = dashboardDataSources.map(ds => getDataSourceInfo(ds));
    let dataSourceInfosByName = new Map();
    for (let info of dataSourceInfos) {
        let inDict = dataSourceInfosByName.get(info.name);
        if (inDict !== undefined)
            inDict.push(info);
        else
            dataSourceInfosByName.set(info.name, [info]);
    }
    dataSourceInfosByName.forEach((infos, name) => {
        for (let i = 1; i < infos.length; i++)
            infos[i].name = name + ' ' + i;
    });
    return dataSourceInfos.map(info => {
        return Object.assign(Object.assign({}, info), { id: info.componentName });
    });
}
export function createWizardSettings(publicSettings) {
    return {
        enableSqlDataSource: publicSettings && type.isDefined(publicSettings.enableSqlDataSource) ? publicSettings.enableSqlDataSource : true,
        enableJsonDataSource: publicSettings && type.isDefined(publicSettings.enableJsonDataSource) ? publicSettings.enableJsonDataSource : true,
        enableObjectDataSource: false,
        enableFederationDataSource: publicSettings && type.isDefined(publicSettings.enableFederationDataSource) ? publicSettings.enableFederationDataSource : true,
        enableOlapDataSource: publicSettings && type.isDefined(publicSettings.enableOlapDataSource) ? publicSettings.enableOlapDataSource : true,
    };
}
export function getFederationFieldList(pathRequest, dataSourceBrowser) {
    return getFieldList(pathRequest, new FlatteningDataFieldsProviderWrapper(dataSourceBrowser, field => field && (field.isDataTableNode && field.isDataTableNode() || field.isExpressionsNode && field.isExpressionsNode())), new FederationDataSourceProviderWrapper(dataSourceBrowser), field => field && field.nodeType() !== 'CalculatedDataField');
}
export class FederationDataSourceProviderWrapper {
    constructor(basic) {
        this._basic = basic;
    }
    findDataSource(name) {
        let basicDataSource = this._basic.findDataSource(name);
        return basicDataSource && basicDataSource._isFederationDataProvider ? basicDataSource : undefined;
    }
}
export class FederationDataSourceAnalyticsWrapper extends AnalyticsFederationDataSource {
    constructor(sources, dataSources, fieldListProvider) {
        super({}, dataSources, fieldListProvider, new ModelSerializer());
        this._sources = sources;
        this._dataSources = dataSources();
    }
    getQueryNameFromPath(path) {
        if (!path)
            return '';
        let pathParts = path.split('.');
        Guard.requires(!!pathParts && !!pathParts.length);
        let dataSourceInfo = this._dataSources.find(x => x.ref == pathParts[0] || x.id == pathParts[0]);
        if (dataSourceInfo === undefined)
            throw new Error(`The dataSource for path '${path}' cannot be found.`);
        let sameDataSourceSources = this._sources.filter(s => s.dataSource() === dataSourceInfo.componentName);
        if (!sameDataSourceSources || sameDataSourceSources.length === 0)
            return super.getQueryNameFromPath(path);
        if (sameDataSourceSources.length === 1) {
            return sameDataSourceSources[0].name();
        }
        else {
            let dataMember = pathParts.slice(1).join('.');
            let source = sameDataSourceSources.find(s => s.dataMember() === dataMember);
            if (source === undefined)
                return super.getQueryNameFromPath(path);
            return source.name();
        }
    }
    getPathFromQueryName(sourceName) {
        let source = this._sources.find(s => s.name() === sourceName);
        if (source === undefined)
            return super.getPathFromQueryName(sourceName);
        return getPath(source);
    }
    createQuery(queryJson) {
        let query = super.createQuery(queryJson);
        if (query.queryType() === FederationQueryType[FederationQueryType.UnionNode]) {
            query.getQueryNameFromPath = (path) => this.getQueryNameFromPath(path);
            query.getPathFromQueryName = (sourceName) => this.getPathFromQueryName(sourceName);
        }
        return query;
    }
}
function getPath(source) {
    Guard.isNotFalsy(source, 'source');
    return !!source.dataMember() ? source.dataSource() + '.' + source.dataMember() : source.dataSource();
}
export function renameDataMember(dashboard, dataSource, oldDataMember, newDataMember) {
    dashboard.items()
        .filter(item => item instanceof DataDashboardItem
        && item.dataSource() === dataSource.componentName()
        && item.dataMember() === oldDataMember)
        .forEach((item) => {
        item.dataMember(newDataMember);
    });
    dataSource.calculatedFields()
        .filter(calcField => calcField.dataMember() === oldDataMember)
        .forEach(calcField => calcField.dataMember(newDataMember));
    dashboard.parameters()
        .map(parameter => parameter.dynamicListLookUpSettings())
        .filter(lookUpSettings => !!lookUpSettings
        && lookUpSettings.dataSource() === dataSource.componentName()
        && lookUpSettings.dataMember() === oldDataMember)
        .forEach(lookUpSettings => lookUpSettings.dataMember(newDataMember));
    dashboard.colorScheme()
        .filter(entry => entry.dataMember() === oldDataMember)
        .forEach(entry => entry.dataMember(newDataMember));
    dashboard.items()
        .filter(item => item instanceof DataDashboardItem)
        .map((item) => item.colorScheme())
        .forEach(colorScheme => colorScheme
        .filter(entry => entry.dataMember() === oldDataMember)
        .forEach(entry => entry.dataMember(newDataMember)));
}
