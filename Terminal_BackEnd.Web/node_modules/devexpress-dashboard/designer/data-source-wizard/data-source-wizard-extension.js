/**
* DevExpress Dashboard (data-source-wizard-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { SqlDataSource as AnalyticSqlDataSource } from '@devexpress/analytics-core/analytics-data';
import { appendStaticContextToRootViewModel, DragDropHandler } from '@devexpress/analytics-core/analytics-internal';
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { _restoreJsonDataSourceFromState, _restoreSqlDataSourceFromState } from '@devexpress/analytics-core/analytics-wizard';
import { FederationSelectQueryBuilderPopup, FederationTransformQueryBuilderPopup, FederationUnionQueryBuilderPopup } from '@devexpress/analytics-core/analytics-wizard-internal';
import { ManageFederatedQueriesEditor } from '@devexpress/analytics-core/queryBuilder-widgets-internal';
import { format } from 'devextreme/core/utils/string';
import * as ko from 'knockout';
import { designerExtensions, extensionNameMap } from '../../common/control-options';
import { OptionsManager } from '../../common/internal/_options-manager';
import { getLocalizationById } from '../../data/localization/_default';
import { createJQueryDeferred } from '../../data/_jquery-helpers';
import { Dashboard } from '../../model/dashboard';
import { JsonDataSource } from '../../model/data-sources/json-data-source';
import { defineObsoleteMethod } from '../../model/internal/_obsolete-helper';
import { DashboardRequestWrapper } from './models/_data-source-wizard-model';
import { ParametersItemProvider } from './pages/_parameters-item-provider';
import { createDashboardDataSourceWizard, CreateNewDataSourceWizardIterator, DashboardDataSourceWizardState, EditQueryWizardIterator } from './wizards/_data-source-wizard';
import { createEditJsonDataSourceWizard, EditJsonDataSourceWizardIterator } from './wizards/_edit-json-data-source-wizard';
import { createDashboardMultiQueryWizard, DashboardMultiQueryWizardIterator } from './wizards/_multi-query-data-source-wizard';
import { addOrUpdateQuery, addSourceIfNotExists, createDataSourceInfos, createNewFederationDataSource, initialQueryAliasSymbol, renameDataMember, toAnalyticsFederationDataSource, toSameSourcesFederationQuery } from './_helpers';
const name = 'dataSourceWizard';
const nameAlias = 'data-source-wizard';
export class DataSourceWizardExtension {
    constructor(dashboardControl, options = {}) {
        this.dashboardControl = dashboardControl;
        this._subscriptions = [];
        this._loadingPanelVisible = ko.observable(false);
        this._wizardElement = ko.observable();
        this._optionsManager = new OptionsManager();
        this._customTemplate = {
            name: 'dx-dashboard-data-source-wizard',
            data: {
                loadingPanelVisible: this._loadingPanelVisible,
                wizardElement: this._wizardElement
            }
        };
        this.name = name;
        let defaultOptions = {
            enableCustomSql: false,
            allowCreateNewJsonConnection: false,
            wizardSettings: {
                enableSqlDataSource: true,
                enableOlapDataSource: true,
                enableJsonDataSource: true,
                enableFederationDataSource: true
            }
        };
        this._optionsManager.initialize({
            extensionName: name,
            dashboardControl: dashboardControl,
            defaultOptions: defaultOptions,
            eventsHolder: this,
            initOptions: options,
            optionChanged: (args) => this._optionChanged(args)
        });
        this._requestWrapper = new DashboardRequestWrapper(dashboardControl);
        this._dashboardParameters = ko.computed(() => dashboardControl.dashboard() && dashboardControl.dashboard().parameters() || []);
        this._getConnectionStringsCallback = () => {
            return this.dashboardControl.remoteService.getFromServer(dashboardControl._endpointCollection.dataSourceWizardUrls.GetConnectionStringsAction)
                .fail(request => {
                this.dashboardControl.notificationController.showError(getLocalizationById('DashboardWebStringId.Notification.AttemptToConnectionStrings'), request);
            });
        };
        defineObsoleteMethod({
            target: this,
            memberName: 'createDataSource',
            oldMemberDisplayName: 'DataSourceWizardExtension.createDataSource',
            newMemberDisplayName: 'DataSourceWizardExtension.showDataSourceCreatingDialog',
            action: (dataSources) => {
                this.showDataSourceCreatingDialog().done((dataSource) => {
                    dataSources.push(dataSource);
                });
            }
        });
        defineObsoleteMethod({
            target: this,
            memberName: 'editSqlQuery',
            oldMemberDisplayName: 'DataSourceWizardExtension.editSqlQuery',
            newMemberDisplayName: 'DataSourceWizardExtension.showSqlQueryEditingDialog',
            action: (dashboardSqlDataSource, queryName) => {
                this.showSqlQueryEditingDialog(dashboardSqlDataSource, queryName);
            }
        });
    }
    static _convertDataSource(dashboardSqlDataSource, requestWrapper) {
        var serializer = new ModelSerializer({ useRefs: false });
        return dashboardSqlDataSource ?
            new AnalyticSqlDataSource(serializer.serialize(dashboardSqlDataSource), serializer, requestWrapper) :
            new AnalyticSqlDataSource({}, serializer, requestWrapper);
    }
    get isCustomSqlEnabled() { return this._optionsManager.get('enableCustomSql'); }
    get _dataSourceBrowser() { return this.dashboardControl._dataSourceBrowser; }
    start() {
        this.dashboardControl.customTemplates.push(this._customTemplate);
    }
    stop() {
        this.dashboardControl.customTemplates.remove(this._customTemplate);
        this._subscriptions.forEach(s => s.dispose());
        this._subscriptions = [];
    }
    showDataSourceCreatingDialog() {
        return this._showDataSourceCreatingDialog(this._getFederationDataProviders());
    }
    _getDashboardDataSources() {
        return this.dashboardControl.dashboard() && this.dashboardControl.dashboard().dataSources() || [];
    }
    _getFederationDataProviders(editedFederationDataSource) {
        return this._getDashboardDataSources().filter(ds => ds._isFederationDataProvider && ds !== editedFederationDataSource);
    }
    _showDataSourceCreatingDialog(federationDataProviders) {
        let deferred = createJQueryDeferred();
        let loadingConnectionsStrings = true;
        this._loadingPanelVisible(true);
        let stopLoading = () => {
            loadingPanelSubscription.dispose();
            loadingConnectionsStrings = false;
        };
        let loadingPanelSubscription = this._loadingPanelVisible.subscribe(newValue => {
            if (!newValue && loadingConnectionsStrings) {
                stopLoading();
                deferred.reject();
            }
        });
        let dashboardConnectionStrings = {
            sql: ko.observableArray()
        };
        this._getConnectionStringsCallback()
            .done((connectionStrings) => {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                dashboardConnectionStrings = {
                    sql: ko.observableArray(connectionStrings.filter(c => c.connectionType === 'Sql')),
                    json: ko.observableArray(connectionStrings.filter(c => c.connectionType === 'Json')),
                    olap: connectionStrings.filter(c => c.connectionType === 'Olap'),
                };
            }
        })
            .always(() => {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                let wizardFederationSources = createDataSourceInfos(federationDataProviders);
                let dataSourceWizard = this.createDataSourceWizard(dashboardConnectionStrings, wizardFederationSources);
                this._initializeDataSourceWizard(dataSourceWizard, deferred);
                this._renderAndStartWizard(dataSourceWizard);
                this._loadingPanelVisible(false);
            }
        });
        return deferred.promise();
    }
    showSqlQueryEditingDialog(dashboardSqlDataSource, queryName) {
        if (queryName && dashboardSqlDataSource.queries().filter(q => q.name() === queryName).length === 0)
            throw new Error(format(getLocalizationById('DashboardWebStringId.Notification.QueryDoesNotExist'), queryName));
        var dataSource = DataSourceWizardExtension._convertDataSource(dashboardSqlDataSource, this._requestWrapper);
        let singleDataSourceWizard = this._createEditQueryWizard();
        singleDataSourceWizard.initialize({
            sqlDataSourceWizard: {
                sqlDataSourceJSON: JSON.stringify(new ModelSerializer().serialize(dataSource)),
                queryName: queryName
            }
        }, (factory, stateManager) => new EditQueryWizardIterator(factory, stateManager));
        singleDataSourceWizard['_finishCallback'] = (state) => {
            var model = _restoreSqlDataSourceFromState(state.sqlDataSourceWizard);
            var queryIndex = model['_queryIndex'];
            var query = model.sqlQuery;
            if (queryIndex === dashboardSqlDataSource.queries().length) {
                dashboardSqlDataSource.queries.push(query);
            }
            else {
                let oldQuery = dashboardSqlDataSource.queries()[queryIndex];
                dashboardSqlDataSource.queries.splice(queryIndex, 1, query);
                if (oldQuery.name() !== query.name()) {
                    renameDataMember(this.dashboardControl.dashboard(), dashboardSqlDataSource, oldQuery.name(), query.name());
                }
            }
            var def = createJQueryDeferred();
            def.resolve();
            return def.promise();
        };
        this._renderAndStartWizard(singleDataSourceWizard);
    }
    showFederationQueryEditingDialog(dashboardFederationDataSource, queryName) {
        let element = this._wizardElement();
        if (element) {
            let queryIndex = dashboardFederationDataSource.queries().findIndex(q => q.alias() === queryName);
            if (queryIndex === -1)
                throw new Error(format(getLocalizationById('DashboardWebStringId.Notification.QueryDoesNotExist'), queryName));
            let query = dashboardFederationDataSource.queries()[queryIndex];
            let federationDataProviders = this._getFederationDataProviders(dashboardFederationDataSource);
            let dataSourceInfos = createDataSourceInfos(federationDataProviders);
            let analyticsDataSource = toAnalyticsFederationDataSource(dashboardFederationDataSource, dataSourceInfos, this._dataSourceBrowser);
            let analyticsQuery = analyticsDataSource.queries().find(q => q.alias && q.alias() === queryName);
            let setQuery = (analyticsQuery) => {
                analyticsQuery.sources()
                    .forEach(analyticsSource => addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, dataSourceInfos));
                let newQuery = toSameSourcesFederationQuery(analyticsQuery);
                addOrUpdateQuery(this.dashboardControl.dashboard(), dashboardFederationDataSource, queryIndex, newQuery);
            };
            let popup;
            switch (query.queryType) {
                case 'SelectNode':
                    popup = new FederationSelectQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                case 'UnionNode':
                    popup = new FederationUnionQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                case 'TransformationNode':
                    popup = new FederationTransformQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                default:
                    throw new Error(`The query of '${query.queryType}' type cannot be edited. `);
            }
            ko.cleanNode(element);
            appendStaticContextToRootViewModel(popup);
            ko.applyBindingsToNode(element, { template: 'dxrd-querybuilder-federation-popup' }, popup);
            let visibleSubscription = popup.popupVisible.subscribe(visible => {
                if (!visible) {
                    visibleSubscription.dispose();
                    popup.dispose();
                    ko.cleanNode(element);
                }
            });
            popup.show(analyticsQuery);
        }
    }
    showManageFederationQueriesDialog(dashboardFederationDataSource) {
        let element = this._wizardElement();
        if (element) {
            let federationDataProviders = this._getFederationDataProviders(dashboardFederationDataSource);
            let federationDataProvidersInfos = createDataSourceInfos(federationDataProviders);
            let analyticsFederationDataSource = toAnalyticsFederationDataSource(dashboardFederationDataSource, federationDataProvidersInfos, this._dataSourceBrowser);
            let editor = new ManageFederatedQueriesEditor(analyticsFederationDataSource, () => {
                analyticsFederationDataSource.sources()
                    .forEach(analyticsSource => addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, federationDataProvidersInfos));
                let removedQueries = dashboardFederationDataSource.queries().filter(dashboardQuery => !analyticsFederationDataSource.queries().some(analyticsQuery => analyticsQuery[initialQueryAliasSymbol] === dashboardQuery.alias()));
                removedQueries.forEach(q => dashboardFederationDataSource.queries.remove(q));
                analyticsFederationDataSource.queries().forEach((analyticsQuery, i) => {
                    let newQuery = toSameSourcesFederationQuery(analyticsQuery);
                    let initialQuery = dashboardFederationDataSource.queries().find(q => q.alias() === analyticsQuery[initialQueryAliasSymbol]);
                    let queryIndex = !!initialQuery ? dashboardFederationDataSource.queries().indexOf(initialQuery) : dashboardFederationDataSource.queries().length;
                    addOrUpdateQuery(this.dashboardControl.dashboard(), dashboardFederationDataSource, queryIndex, newQuery);
                });
            });
            ko.cleanNode(element);
            appendStaticContextToRootViewModel(editor);
            ko.applyBindingsToNode(element, { template: 'dxrd-federated-manageQueries-editor' }, editor);
            let visibleSubscription = editor.popupVisible.subscribe(visible => {
                if (!visible) {
                    visibleSubscription.dispose();
                    editor.dispose();
                    analyticsFederationDataSource.dispose();
                }
            });
            editor.popupVisible(true);
        }
    }
    _createEditQueryWizard() {
        let wizard = createDashboardDataSourceWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, false, { enableOlapDataSource: false, enableSqlDataSource: false, enableJsonDataSource: false, enableObjectDataSource: false, enableFederationDataSource: false }, { sql: ko.observableArray() }, [], this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('EditQueryWizard', wizard);
        return wizard;
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'allowCreateNewJsonConnection':
            case 'enableCustomSql':
            case 'wizardSettings':
                return null;
            default:
                return null;
        }
    }
    createDataSourceWizard(connectionStrings, federationSources) {
        let wizard = createDashboardDataSourceWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.get('allowCreateNewJsonConnection') || this._optionsManager.getInitialOptions()['canCreateNewJsonDataSource'], this._optionsManager.get('wizardSettings'), connectionStrings, federationSources, this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('DataSourceWizard', wizard);
        return wizard;
    }
    _createEditJsonDataSourceWizard() {
        let wizard = createEditJsonDataSourceWizard(this._requestWrapper, this._dashboardParameters);
        this._customizeDataSourceWizard('EditJsonDataSourceWizard', wizard);
        return wizard;
    }
    _customizeDataSourceWizard(customizationType, wizard) {
        this._optionsManager.raiseEvent('customizeDataSourceWizard', { type: customizationType, wizard: wizard });
    }
    _createNewDataSourceWizardIterator(factory, stateManager) {
        return new CreateNewDataSourceWizardIterator(factory, stateManager);
    }
    _initializeDataSourceWizard(wizard, deferred) {
        let initialState = new DashboardDataSourceWizardState();
        wizard.initialize(initialState, (factory, stateManager) => this._createNewDataSourceWizardIterator(factory, stateManager));
        wizard['_finishCallback'] = (state) => {
            let sqlModel = state.sqlDataSourceWizard;
            let olapModel = state.olapDataSourceWizard;
            let jsonModel = state.jsonDataSourceWizard;
            let federationModel = state.federationDataSourceWizard;
            if (sqlModel && state.dashboardDataSourceType === 'Sql') {
                let sqlDataSource = Dashboard._createDataSource({ '@ItemType': 'SqlDataSource' }, new ModelSerializer());
                let dataSourceWrapper = _restoreSqlDataSourceFromState(sqlModel);
                sqlDataSource.connection.name(dataSourceWrapper.sqlDataSource.connection.name());
                sqlDataSource.connection.fromAppConfig(true);
                dataSourceWrapper.sqlDataSource.queries().forEach(query => {
                    sqlDataSource.queries.push(query);
                    sqlDataSource.name(sqlDataSource.queries()[0].name());
                });
                deferred.resolve(sqlDataSource);
                return createJQueryDeferred().resolve().promise();
            }
            else if (olapModel && state.dashboardDataSourceType === 'Olap') {
                let olapDataSource = Dashboard._createDataSource({ '@ItemType': 'OLAPDataSource' }, new ModelSerializer());
                olapDataSource.connectionName(olapModel.connectionName);
                olapDataSource.name(getLocalizationById('DashboardStringId.DefaultOlapDataSourceName'));
                deferred.resolve(olapDataSource);
                return createJQueryDeferred().resolve().promise();
            }
            else if (jsonModel && state.dashboardDataSourceType === 'Json') {
                let jsonDeferred = createJQueryDeferred();
                let analyticsDataSourceDeferred = createJQueryDeferred();
                let analyticsDataSource = _restoreJsonDataSourceFromState(jsonModel);
                if (jsonModel.newConnectionName) {
                    var jsonSource = analyticsDataSource.source;
                    var jsonSourceJSON = JSON.stringify(jsonSource.serialize(true));
                    var requestString = JSON.stringify({
                        connectionName: jsonModel.newConnectionName,
                        customJson: jsonSource.json(),
                        uriJsonSourceJSON: jsonSourceJSON
                    });
                    this._requestWrapper
                        .sendRequest('saveJsonSource', encodeURIComponent(requestString))
                        .done(() => {
                        analyticsDataSource.connectionName(jsonModel.newConnectionName);
                        analyticsDataSource.source = null;
                        analyticsDataSourceDeferred.resolve(analyticsDataSource);
                    })
                        .fail(() => analyticsDataSourceDeferred.reject());
                }
                else {
                    analyticsDataSourceDeferred.resolve(analyticsDataSource);
                }
                analyticsDataSourceDeferred
                    .done((repDataSource) => {
                    var serializer = new ModelSerializer();
                    var analyticsJsonDataSourceJson = serializer.serialize(repDataSource);
                    var dataSource = new JsonDataSource(analyticsJsonDataSourceJson);
                    dataSource.name(getLocalizationById('DashboardStringId.DefaultJsonDataSourceName'));
                    deferred.resolve(dataSource);
                    jsonDeferred.resolve();
                })
                    .fail(() => {
                    deferred.reject();
                    jsonDeferred.reject();
                });
                return jsonDeferred.promise();
            }
            else if (federationModel && state.dashboardDataSourceType === 'Federation') {
                deferred.resolve(createNewFederationDataSource(federationModel, wizard.options.dataSources));
                return createJQueryDeferred().resolve().promise();
            }
            else {
                deferred.reject();
                throw Error(getLocalizationById('DashboardWebStringId.Notification.UnsupportedDataSourceType'));
            }
        };
    }
    _showEditJsonDataSourceDialog(jsonDataSource) {
        var serializer = new ModelSerializer();
        var dashboardJsonDataSourceJson = serializer.serialize(jsonDataSource);
        let editJsonDataSourceWizard = this._createEditJsonDataSourceWizard();
        editJsonDataSourceWizard.initialize({
            jsonDataSourceWizard: {
                jsonScheme: JSON.stringify(dashboardJsonDataSourceJson.Schema),
                rootElement: jsonDataSource.rootElement()
            }
        }, (factory, stateManager) => new EditJsonDataSourceWizardIterator(factory, stateManager));
        editJsonDataSourceWizard['_finishCallback'] = (state) => {
            var jsonModel = state.jsonDataSourceWizard;
            if (jsonModel) {
                var modifiedReportsDataSource = _restoreJsonDataSourceFromState(jsonModel);
                jsonDataSource.schema(modifiedReportsDataSource.schema);
                jsonDataSource.rootElement(modifiedReportsDataSource.rootElement());
            }
            return createJQueryDeferred().resolve().promise();
        };
        this._renderAndStartWizard(editJsonDataSourceWizard);
    }
    _renderAndStartWizard(wizardModel) {
        var element = this._wizardElement();
        if (element) {
            ko.cleanNode(element);
            var viewModel = {
                wizardModel: wizardModel,
                dataBindingsProvider: new ParametersItemProvider(this._dashboardParameters()),
                resizeHandler: {
                    starting: () => { },
                    stopped: () => { },
                    disabled: DragDropHandler.started
                }
            };
            appendStaticContextToRootViewModel(viewModel);
            ko.applyBindingsToNode(element, { template: 'dx-dashboard-data-source-wizard-binding' }, viewModel);
            wizardModel.isVisible.subscribe(visible => {
                if (!visible) {
                    wizardModel.dispose();
                    ko.cleanNode(element);
                }
            });
        }
        wizardModel.start();
    }
}
export class MultiQueryDataSourceWizardExtension extends DataSourceWizardExtension {
    constructor(dashboardControl, options) {
        super(dashboardControl, options);
    }
    _createNewDataSourceWizardIterator(factory, stateManager) {
        return new DashboardMultiQueryWizardIterator(factory, stateManager);
    }
    createDataSourceWizard(connectionStrings, federationSources) {
        let wizard = createDashboardMultiQueryWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.get('allowCreateNewJsonConnection') || this._optionsManager.getInitialOptions()['canCreateNewJsonDataSource'], this._optionsManager.get('wizardSettings'), connectionStrings, federationSources, this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('MultiQueryDataSourceWizard', wizard);
        return wizard;
    }
}
designerExtensions[nameAlias] = (dashboardControl, options) => new DataSourceWizardExtension(dashboardControl, options);
extensionNameMap[nameAlias] = name;
ko.virtualElements.allowedBindings['dx-dashboard-element-accessor-binding'] = true;
ko.bindingHandlers['dx-dashboard-element-accessor-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var params = ko.unwrap(valueAccessor());
        params.element(element);
        return { controlsDescendantBindings: true };
    }
};
