/**
* DevExpress Dashboard (_data-source-wizard-page-iterator.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { FederationDataSourceWizardPageId, JsonDataSourceWizardPageId, ObjectDataSourceWizardPageId, PageIterator, SqlDataSourceWizardPageId } from '@devexpress/analytics-core/analytics-wizard';
import { DataSourceWizardPageId, OlapDataSourceWizardPageId } from '../pages/page-id';
export class DataSourceWizardPageIteratorBase extends PageIterator {
    getInitialPage() {
        return DataSourceWizardPageId.ChooseDataSourceTypePage;
    }
    getNextPageId(pageId) {
        if (!pageId) {
            return this.getInitialPage();
        }
        else {
            let currentState = this._getCurrentState();
            switch (pageId) {
                case DataSourceWizardPageId.ChooseDataSourceTypePage:
                    switch (currentState.dashboardDataSourceType) {
                        case 'Sql':
                            return SqlDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Olap':
                            return OlapDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Json':
                            return JsonDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Federation':
                            return FederationDataSourceWizardPageId.FederatedQueryConfigurePage;
                        default:
                            throw new Error('Unknown datasource type.');
                    }
                case SqlDataSourceWizardPageId.ChooseConnectionPage:
                    return this.getConfigureQueryPage();
                case ObjectDataSourceWizardPageId.ChooseTypesPage:
                    return ObjectDataSourceWizardPageId.ChooseDataMembersPage;
                case ObjectDataSourceWizardPageId.ChooseDataMembersPage:
                    return ObjectDataSourceWizardPageId.ConfigureParametersPage;
                case this.getConfigureQueryPage():
                    return this.getConfigureSqlParametersPage();
                case JsonDataSourceWizardPageId.ChooseConnectionPage:
                    if (currentState.jsonDataSourceWizard.connectionName) {
                        return JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
                    }
                    else {
                        return JsonDataSourceWizardPageId.ChooseJsonSourcePage;
                    }
                case JsonDataSourceWizardPageId.ChooseJsonSourcePage:
                    return JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
            }
        }
    }
    getConfigureQueryPage() {
        return SqlDataSourceWizardPageId.ConfigureQueryPage;
    }
    getConfigureSqlParametersPage() {
        return SqlDataSourceWizardPageId.ConfigureParametersPage;
    }
    getConfigureObjectParametersPage() {
        return ObjectDataSourceWizardPageId.ConfigureParametersPage;
    }
}
