/**
* DevExpress Dashboard (_data-source-wizard.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { PageFactory, PopupWizard, SqlDataSourceWizardPageId, _registerChooseJsonConnectionPage as _registerAnalyticChooseJsonConnectionPage, _registerChooseJsonSourcePage as _registerAnalyticChooseJsonSourcePage, _registerChooseSqlConnectionPage as _registerAnalyticChooseSqlConnectionPage, _registerConfigureParametersPage as _registerAnalyticConfigureParametersPage, _registerConfigureQueryPage as _registerAnalyticConfigureQueryPage } from '@devexpress/analytics-core/analytics-wizard';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { getLocalizationById } from '../../../data/localization/_default';
import { ToDashboardDataSourceType, ToDataSourceTypeNumber } from '../models/data-source-wizard-model';
import { DashboardDataSourceWizardOptions } from '../models/_data-source-wizard-model';
import { _registerChooseDataSourceTypePage } from '../pages/choose-data-source-type-page';
import { _registerOlapConnectionStringsPage } from '../pages/choose-olap-connection-string-page';
import { _registerFederatedQueryConfigurePage } from '../pages/federated-query-configure-page';
import { _registerChooseJsonSchemaPage } from '../pages/_choose-json-schema-page';
import { createQueryPageCallback } from '../pages/_create-query-page';
import { ParametersItemProvider } from '../pages/_parameters-item-provider';
import { createWizardSettings } from '../_helpers';
import { DataSourceWizardPageIteratorBase } from './_data-source-wizard-page-iterator';
export class CreateNewDataSourceWizardIterator extends DataSourceWizardPageIteratorBase {
    constructor(factory, stateManager) {
        super(factory, stateManager);
    }
}
export class EditQueryWizardIterator extends DataSourceWizardPageIteratorBase {
    constructor(factory, stateManager) {
        super(factory, stateManager);
    }
    getInitialPage() {
        return SqlDataSourceWizardPageId.ConfigureQueryPage;
    }
}
export class DashboardDataSourceWizardBase extends PopupWizard {
    constructor(factory) {
        super(factory);
    }
}
export class DashboardDataSourceWizard extends DashboardDataSourceWizardBase {
    constructor(factory, options) {
        super(factory);
        this.title = getLocalizationById('DashboardWebStringId.DataSources.DashboardDataSourceWizard');
        this._container = (element) => $.fn.constructor(element).closest('.dx-dashboard-widget-container');
        this._extendCssClass = 'dxrd-sqldatasource-wizard';
        this._options = options;
    }
    get options() {
        return this._options;
    }
}
export class DashboardDataSourceWizardState {
    constructor() {
        this.sqlDataSourceWizard = {};
        this.jsonDataSourceWizard = {};
        this.olapDataSourceWizard = {};
        this.objectDataSourceWizard = {};
        this.federationDataSourceWizard = {};
    }
    get dashboardDataSourceType() {
        return this.dataSourceType && ToDashboardDataSourceType(this.dataSourceType) || undefined;
    }
    set dashboardDataSourceType(value) {
        this.dataSourceType = ToDataSourceTypeNumber(value);
    }
}
export function createDashboardDataSourceWizard(requestWrapper, parameters, disableCustomSql, allowCreateNewJsonConnection, wizardSettings, dashboardConnectionStrings, dataSources, dataSourceBrowser, customTemplates) {
    var factory = new PageFactory();
    var wizardOptions = new DashboardDataSourceWizardOptions();
    wizardOptions.callbacks = createQueryPageCallback(requestWrapper, parameters, dataSourceBrowser);
    wizardOptions.disableCustomSql = disableCustomSql;
    wizardOptions.requestWrapper = requestWrapper;
    wizardOptions.wizardSettings = createWizardSettings(wizardSettings);
    wizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection || false;
    wizardOptions.connectionStrings = dashboardConnectionStrings;
    wizardOptions.dataSources = ko.pureComputed(() => dataSources);
    _registerChooseDataSourceTypePage(factory, wizardOptions, customTemplates);
    _registerAnalyticChooseSqlConnectionPage(factory, dashboardConnectionStrings.sql);
    _registerOlapConnectionStringsPage(factory, dashboardConnectionStrings.olap);
    _registerAnalyticChooseJsonConnectionPage(factory, wizardOptions);
    _registerAnalyticConfigureQueryPage(factory, wizardOptions);
    _registerAnalyticConfigureParametersPage(factory, requestWrapper);
    _registerAnalyticChooseJsonSourcePage(factory, requestWrapper, () => new ParametersItemProvider(parameters()));
    _registerChooseJsonSchemaPage(factory, requestWrapper, parameters);
    _registerFederatedQueryConfigurePage(factory, wizardOptions);
    return new DashboardDataSourceWizard(factory, wizardOptions);
}
