/**
* DevExpress Dashboard (_multi-query-data-source-wizard.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { PageFactory, SqlDataSourceWizardPageId, _registerChooseJsonConnectionPage as _registerAnalyticChooseJsonConnectionPage, _registerChooseJsonSourcePage as _registerAnalyticChooseJsonSourcePage, _registerChooseSqlConnectionPage as _registerAnalyticChooseSqlConnectionPage, _registerFederatedQueryConfigurePage as _registerAnalyticFederatedQueryConfigurePage, _registerMultiQueryConfigurePage as _registerAnalyticMultiQueryConfigurePage, _registerMultiQueryConfigureParametersPage as _registerAnalyticMultiQueryConfigureParametersPage } from '@devexpress/analytics-core/analytics-wizard';
import * as ko from 'knockout';
import { DashboardMultiQueryDataSourceWizardOptions } from '../models/_data-source-wizard-model';
import { _registerChooseDataSourceTypePage } from '../pages/choose-data-source-type-page';
import { _registerOlapConnectionStringsPage } from '../pages/choose-olap-connection-string-page';
import { _registerChooseJsonSchemaPage } from '../pages/_choose-json-schema-page';
import { createQueryPageCallback } from '../pages/_create-query-page';
import { ParametersItemProvider } from '../pages/_parameters-item-provider';
import { createWizardSettings } from '../_helpers';
import { DashboardDataSourceWizardBase } from './_data-source-wizard';
import { DataSourceWizardPageIteratorBase } from './_data-source-wizard-page-iterator';
export class DashboardMultiQueryWizardIterator extends DataSourceWizardPageIteratorBase {
    getInitialPage() {
        return super.getInitialPage();
    }
    getConfigureQueryPage() {
        return SqlDataSourceWizardPageId.MultiQueryConfigurePage;
    }
    getConfigureSqlParametersPage() {
        return SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage;
    }
}
export class DashboardMultiQueryDataSourceWizard extends DashboardDataSourceWizardBase {
    constructor(pageFactory, options) {
        super(pageFactory);
        this._extendCssClass = 'dxrd-multiqueries-sqldatasource-wizard';
        this.height(443);
        this._options = options;
    }
    get options() {
        return this._options;
    }
}
export function createDashboardMultiQueryWizard(requestWrapper, parameters, disableCustomSql, allowCreateNewJsonConnection, wizardSettings, dashboardConnectionStrings, dataSources, dataSourceBrowser, customTemplates) {
    var factory = new PageFactory();
    var wizardOptions = new DashboardMultiQueryDataSourceWizardOptions();
    wizardOptions.callbacks = createQueryPageCallback(requestWrapper, parameters, dataSourceBrowser, DashboardMultiQueryDataSourceWizard.customQueriesPreset);
    wizardOptions.disableCustomSql = disableCustomSql;
    wizardOptions.requestWrapper = requestWrapper;
    wizardOptions.wizardSettings = createWizardSettings(wizardSettings);
    wizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection || false;
    wizardOptions.connectionStrings = dashboardConnectionStrings;
    wizardOptions.dataSources = ko.pureComputed(() => dataSources);
    _registerChooseDataSourceTypePage(factory, wizardOptions, customTemplates);
    _registerAnalyticChooseSqlConnectionPage(factory, dashboardConnectionStrings.sql);
    _registerOlapConnectionStringsPage(factory, dashboardConnectionStrings.olap);
    _registerAnalyticMultiQueryConfigurePage(factory, wizardOptions);
    _registerAnalyticMultiQueryConfigureParametersPage(factory, requestWrapper);
    _registerAnalyticChooseJsonConnectionPage(factory, wizardOptions);
    _registerAnalyticChooseJsonSourcePage(factory, requestWrapper, () => new ParametersItemProvider(parameters()));
    _registerChooseJsonSchemaPage(factory, requestWrapper, parameters);
    _registerAnalyticFederatedQueryConfigurePage(factory, wizardOptions);
    var multiQueryConfigurePageMeta = factory.getMetadata(SqlDataSourceWizardPageId.MultiQueryConfigurePage);
    multiQueryConfigurePageMeta.canNext = (page) => page._hasParametersToEdit();
    return new DashboardMultiQueryDataSourceWizard(factory, wizardOptions);
}
