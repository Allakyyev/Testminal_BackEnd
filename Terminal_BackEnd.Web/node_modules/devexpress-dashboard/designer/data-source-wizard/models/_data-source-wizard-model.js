/**
* DevExpress Dashboard (_data-source-wizard-model.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { _DataSourceWizardOptions, _MultiQueryDataSourceWizardOptions } from '@devexpress/analytics-core/analytics-wizard';
import { RequestWrapper } from '@devexpress/analytics-core/queryBuilder-utils';
import { getLocalizationById } from '../../../data/localization/_default';
import { createJQueryDeferred } from '../../../data/_jquery-helpers';
export class DashboardRequestWrapper extends RequestWrapper {
    constructor(dashboardControl) {
        super();
        this.dashboardControl = dashboardControl;
    }
    _sendRequest(settings) {
        return this.sendRequest(settings.action, settings.arg);
    }
    sendRequest(action, arg) {
        var def = createJQueryDeferred();
        this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dataSourceWizardUrls.DataSourceWizardAction, {
            actionKey: action,
            arg: arg
        }).done(data => {
            if (data.success) {
                def.resolve(data.result);
            }
            else {
                let errorText = data.error;
                this.dashboardControl.notificationController.showError(getLocalizationById('DashboardWebStringId.Notification.ErrorHasOccuredOn'), errorText);
                def.reject(errorText);
            }
        }).fail(request => {
            this.dashboardControl.notificationController.showError(getLocalizationById('DashboardWebStringId.Notification.ErrorHasOccuredOn'), request);
            def.reject();
        });
        return def.promise();
    }
}
export class DashboardDataSourceWizardOptions extends _DataSourceWizardOptions {
    constructor() {
        super();
        this.connectionStrings = Object.assign(Object.assign({}, this.connectionStrings), { olap: [] });
        this.wizardSettings = Object.assign(Object.assign({}, this.wizardSettings), { enableOlapDataSource: false });
    }
}
export class DashboardMultiQueryDataSourceWizardOptions extends _MultiQueryDataSourceWizardOptions {
    constructor() {
        super();
        this.connectionStrings = Object.assign(Object.assign({}, this.connectionStrings), { olap: [] });
        this.wizardSettings = Object.assign(Object.assign({}, this.wizardSettings), { enableOlapDataSource: false });
    }
}
