/**
* DevExpress Dashboard (_window-definition-editor.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import * as ko from 'knockout';
import { $unwrap } from '../../data/_jquery-helpers';
import { DataItemLink } from '../../model/data-item/data-item';
import { SpecificWindowDefinition } from '../../model/data-item/window-definition/specific-calc-window-definition';
import { wrapWithUndoRedo } from '../../model/internal/_undo-engine-helper';
import { inlineEditCollectionEditor } from '../form-adapter/_form-adapter-editors';
import { ObjectPropertiesWrapper } from '../form-adapter/_object-properties-wrapper';
import { getDataItemDisplayName } from '../_display-name-provider';
export var WindowDefinitionMode;
(function (WindowDefinitionMode) {
    WindowDefinitionMode[WindowDefinitionMode["Predefined"] = 0] = "Predefined";
    WindowDefinitionMode[WindowDefinitionMode["Specific"] = 1] = "Specific";
})(WindowDefinitionMode || (WindowDefinitionMode = {}));
export class WindowDefinitionEditor {
    constructor(windowDefinition, _params) {
        this._params = _params;
        this.mode = ko.observable(null);
        this.value = windowDefinition.windowDefinition;
        if (this.value() instanceof SpecificWindowDefinition) {
            this.mode(WindowDefinitionMode.Specific);
            let definition = this.value();
            definition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(definition, _params.dataDashboardItem, _params.dataSourceBrowser);
        }
        else {
            this.mode(WindowDefinitionMode.Predefined);
        }
        this.mode.subscribe(this.setValue, this);
        this.formAdapterWrapper = ko.pureComputed(() => {
            if (this.value()) {
                return new ObjectPropertiesWrapper({ model: this.value(),
                    properties: this.value().getInfo() });
            }
        });
    }
    get dataSource() {
        return [
            { value: WindowDefinitionMode.Predefined, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModePredefined' },
            { value: WindowDefinitionMode.Specific, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific' }
        ];
    }
    setValue(newMode) {
        if (newMode === WindowDefinitionMode.Predefined) {
            this.value(this._params.dataDashboardItem._getDefaultCalculationWindowDefinition());
        }
        else {
            var windowDefinition = new SpecificWindowDefinition();
            windowDefinition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(windowDefinition, this._params.dataDashboardItem, this._params.dataSourceBrowser);
            this.value(windowDefinition);
        }
    }
}
WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo = (definition, dataDashboardItem, dataSourceBrowser) => (propertyInfo) => {
    var lookupValueFromDimension = (d) => {
        return {
            value: d.uniqueName(),
            displayValue: getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, d)
        };
    };
    var allDimensions = dataDashboardItem._dimensions.map(lookupValueFromDimension);
    var getAvailableDimensions = () => {
        return dataDashboardItem._dimensions
            .filter(d => !definition.dimensions().some(wd => wd.uniqueName() === d.uniqueName()))
            .map(lookupValueFromDimension);
    };
    const editorOptions = {
        dataFields: ['uniqueName'],
        gridColumns: [{
                dataField: 'uniqueName',
                lookup: {
                    displayExpr: 'displayValue',
                    valueExpr: 'value',
                },
                calculateDisplayValue: (gridRow) => {
                    const dimension = allDimensions.filter(d => d.value === gridRow.uniqueName)[0];
                    return dimension && dimension.displayValue || gridRow.uniqueName;
                }
            }],
        enableAddItem: () => !!getAvailableDimensions().length,
        noDataText: 'DashboardWebStringId.CollectionEditor.NoItems',
        createNewItemHandler: () => {
            if (getAvailableDimensions().length > 0) {
                return new DataItemLink(dataDashboardItem, { '@DefaultId': getAvailableDimensions()[0].value });
            }
        },
        customizeInlineEditor: (e) => {
            const uniqueName = e.row && e.row.data && e.row.data.uniqueName;
            const availableDimensions = getAvailableDimensions();
            if (availableDimensions.filter(d => d.value === uniqueName).length) {
                e.editorOptions.dataSource = availableDimensions;
            }
            else {
                e.editorOptions.dataSource = allDimensions
                    .filter(d => d.value === uniqueName)
                    .concat(availableDimensions);
            }
        },
    };
    return Object.assign(Object.assign({}, propertyInfo), { formAdapterItem: inlineEditCollectionEditor(editorOptions) });
};
__decorate([
    wrapWithUndoRedo
], WindowDefinitionEditor.prototype, "setValue", null);
export const windowDefinitionEditor = params => context => {
    return {
        template: (args, itemElement) => {
            const windowDefinition = args.component.option('formData')[args.dataField];
            var viewModel = new WindowDefinitionEditor(windowDefinition, params);
            ko.applyBindingsToNode($unwrap(itemElement), { template: { name: 'dx-dashboard-window-definition-editor', data: viewModel } }, context.bindingContext);
        }
    };
};
