/**
* DevExpress Dashboard (_condition-type-editor.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { $unwrap } from '../../data/_jquery-helpers';
import { getLocalizationById } from '../../data/index.internal';
import { IsDateTime, IsNumeric, IsTextual } from '../../model/data-sources/_data-field';
import { averageType } from '../../model/format-rules/conditions/metadata/_format-condition-average';
import { topBottom } from '../../model/format-rules/conditions/metadata/_format-condition-top-bottom';
import { conditionInCondition } from '../../model/format-rules/conditions/metadata/_format-condition-value';
import { FormatConditionConverter, FormatConditionRangeGradientPredefinedType, FormatConditionRangeSetPredefinedType } from '../../model/format-rules/conditions/range/range-converter';
import { FormatConditionRangeGenerator } from '../../model/format-rules/conditions/range/range-generator';
import { conditionTypes as conditionTypesMeta } from '../../model/format-rules/metadata/_dashboard-item-format-rule';
import { appearanceSettingsProvider } from '../../viewer-parts/conditional-formatting/_appearance-settings-provider';
import { styleSettingsProvider } from '../../viewer-parts/conditional-formatting/_style-settings-provider';
import { convertCssPropertyWrappersToObject } from '../../viewer-parts/viewer/_cssHelper';
function getConditionTypes(dataType, filters = {}) {
    var filterGradient = (array) => array.filter(displayValue => filters.rangeGradientPredefinedTypeFilter ? filters.rangeGradientPredefinedTypeFilter(displayValue.value) : true);
    var filterRangeSet = (array) => array.filter(displayValue => filters.rangeSetPredefinedTypeFilter ? filters.rangeSetPredefinedTypeFilter(displayValue.value) : true);
    var conditionTypeFilter = filters.conditionTypeFilter || (() => true);
    return [{
            propertyName: 'conditionValue',
            constraint: (dataType) => dataType !== 'Enum',
            specificTypes: Object
                .keys(conditionInCondition.values)
                .map(key => {
                return {
                    value: key,
                    displayText: conditionInCondition.values[key],
                    constraint: ['Equal', 'NotEqual', 'ContainsText'].indexOf(key) !== -1 ? () => true : (dataType => dataType !== 'Text')
                };
            })
        }, {
            propertyName: 'conditionTopBottom',
            constraint: (dataType) => IsNumeric(dataType),
            specificTypes: Object
                .keys(topBottom.values)
                .map(key => { return { value: key, displayText: topBottom.values[key] }; })
        }, {
            propertyName: 'conditionAverage',
            displayText: 'DashboardStringId.CommandFormatRuleAboveBelowAverage',
            constraint: (dataType) => IsNumeric(dataType),
            specificTypes: Object
                .keys(averageType.values)
                .map(key => { return { value: key, displayText: averageType.values[key] }; })
        }, {
            propertyName: 'conditionDateOccuring',
            constraint: (dataType) => IsDateTime(dataType)
        }, {
            propertyName: 'conditionExpression',
            constraint: (dataType) => dataType !== 'Enum'
        }, {
            propertyName: 'conditionRangeSet',
            displayText: 'DashboardStringId.CommandFormatRuleRangeIcons',
            rangeStyleType: 'Icon',
            constraint: (dataType) => !IsTextual(dataType),
            subtype: 'icons',
            specificTypes: [{
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges2'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.Arrows2, displayText: 'Arrows 2' },
                        { value: FormatConditionRangeSetPredefinedType.ArrowsGray2, displayText: 'Arrows Gray 2' },
                        { value: FormatConditionRangeSetPredefinedType.Circles2, displayText: 'Circles 2' },
                        { value: FormatConditionRangeSetPredefinedType.Symbols2, displayText: 'Symbols 2' },
                        { value: FormatConditionRangeSetPredefinedType.SymbolsCircled2, displayText: 'Symbols Circled 2' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges3'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.Arrows3, displayText: 'Arrows 3' },
                        { value: FormatConditionRangeSetPredefinedType.ArrowsGray3, displayText: 'Arrows Gray 3' },
                        { value: FormatConditionRangeSetPredefinedType.PositiveNegative3, displayText: 'Positive Negative 3' },
                        { value: FormatConditionRangeSetPredefinedType.Circles3, displayText: 'Circles 3' },
                        { value: FormatConditionRangeSetPredefinedType.TrafficLights3, displayText: 'Traffic Lights 3' },
                        { value: FormatConditionRangeSetPredefinedType.Signs3, displayText: 'Signs 3' },
                        { value: FormatConditionRangeSetPredefinedType.Symbols3, displayText: 'Symbols 3' },
                        { value: FormatConditionRangeSetPredefinedType.SymbolsCircled3, displayText: 'Symbols Circled 3' },
                        { value: FormatConditionRangeSetPredefinedType.Stars3, displayText: 'Stars 3' },
                        { value: FormatConditionRangeSetPredefinedType.Flags3, displayText: 'Flags 3' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges4'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.Arrows4, displayText: 'Arrows 4' },
                        { value: FormatConditionRangeSetPredefinedType.ArrowsGray4, displayText: 'Arrows Gray 4' },
                        { value: FormatConditionRangeSetPredefinedType.Circles4, displayText: 'Circles 4' },
                        { value: FormatConditionRangeSetPredefinedType.CirclesRedToBlack4, displayText: 'Circles Red To Black 4' },
                        { value: FormatConditionRangeSetPredefinedType.Bars4, displayText: 'Bars 4' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges5'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.Arrows5, displayText: 'Arrows 5' },
                        { value: FormatConditionRangeSetPredefinedType.ArrowsGray5, displayText: 'Arrows Gray 5' },
                        { value: FormatConditionRangeSetPredefinedType.Quarters5, displayText: 'Quarters 5' },
                        { value: FormatConditionRangeSetPredefinedType.Bars5, displayText: 'Bars 5' },
                        { value: FormatConditionRangeSetPredefinedType.Boxes5, displayText: 'Boxes 5' }
                    ])
                }]
        }, {
            propertyName: 'conditionRangeSet',
            rangeStyleType: 'Color',
            constraint: (dataType) => !IsTextual(dataType),
            subtype: 'colors',
            specificTypes: [{
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges2'),
                    displayText: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges2'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges3'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges4'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges5'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }
                    ])
                }]
        }, {
            propertyName: 'conditionRangeGradient',
            rangeStyleType: 'Gradient',
            constraint: (dataType) => !IsTextual(dataType),
            specificTypes: [{
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges'),
                    items: filterGradient([
                        { value: FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },
                        { value: FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },
                        { value: FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },
                        { value: FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },
                        { value: FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },
                        { value: FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },
                        { value: FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },
                        { value: FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges'),
                    items: filterGradient([
                        { value: FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }
                    ])
                }]
        }, {
            propertyName: 'conditionBar',
            constraint: (dataType) => !IsTextual(dataType)
        }, {
            propertyName: 'conditionColorRangeBar',
            displayText: 'DashboardStringId.CommandFormatRuleColorRangeBar',
            rangeStyleType: 'ColorBar',
            constraint: (dataType) => !IsTextual(dataType),
            specificTypes: [{
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges2'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges3'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges4'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSetRanges5'),
                    items: filterRangeSet([
                        { value: FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },
                        { value: FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }
                    ])
                }]
        }, {
            propertyName: 'conditionGradientRangeBar',
            displayText: 'DashboardStringId.CommandFormatRuleGradientRangeBar',
            rangeStyleType: 'GradientBar',
            constraint: (dataType) => !IsTextual(dataType),
            specificTypes: [{
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges'),
                    items: filterGradient([
                        { value: FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },
                        { value: FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },
                        { value: FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },
                        { value: FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },
                        { value: FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },
                        { value: FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },
                        { value: FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },
                        { value: FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }
                    ])
                }, {
                    key: getLocalizationById('DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges'),
                    items: filterGradient([
                        { value: FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },
                        { value: FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },
                        { value: FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }
                    ])
                }]
        },
    ]
        .map(typeDescr => {
        typeDescr['displayText'] = typeDescr['displayText'] || conditionTypesMeta.filter(t => t.propertyName === typeDescr.propertyName)[0].displayName;
        return typeDescr;
    })
        .filter(ct => conditionTypeFilter(ct.propertyName, ct.subtype))
        .filter(ct => ct.constraint(dataType));
}
function getConditionSpecificTypes(conditionType, dataType, filters) {
    var conditionTypeDesciptor = getConditionTypes(dataType, filters).filter(ct => !!ct.subtype
        ? ct.propertyName + '_' + ct.subtype === conditionType
        : ct.propertyName === conditionType)[0];
    if (conditionTypeDesciptor && conditionTypeDesciptor.specificTypes) {
        let types = conditionTypeDesciptor.specificTypes
            .filter(st => !st.constraint || st.constraint(dataType));
        types['rangeStyleType'] = conditionTypeDesciptor.rangeStyleType || 'None';
        return types;
    }
    else {
        let types = [{ value: conditionType, displayText: '-' }];
        types['rangeStyleType'] = 'None';
        return types;
    }
}
export class FormatConditionTypeEditorSurface {
    constructor(options) {
        this.displayMode = ko.observable();
        this.ancestors = ko.observable([]);
        this.backClick = () => {
            this.displayMode('conditionTypes');
        };
        this.updateItemAppearance = (e) => {
            let element = $unwrap(e.itemElement);
            e.itemData.hasSpecificTypes ? element.classList.add('dx-dashboard-has-children') : element.classList.remove('dx-dashboard-has-children');
        };
        this.dataType = options.dataType;
        this.conditionType = options.conditionType;
        this.specificType = options.specificType;
        this.displayMode.subscribe(mode => {
            if (mode === 'conditionTypes') {
                this.ancestors(['…']);
            }
            else {
                this.ancestors(['…', this.availableConditionTypes().filter(t => t.value === this.conditionType())[0].displayText]);
            }
        });
        this.availableConditionTypes = ko.computed(() => {
            if (!this.dataType())
                return;
            var types = getConditionTypes(this.dataType(), options.filters)
                .map(ct => ({
                value: ct.propertyName + (ct.subtype ? '_' + ct.subtype : ''),
                displayText: ct.displayText,
                hasSpecificTypes: !!ct.specificTypes
            }));
            return types;
        });
        this.availableConditionTypes.subscribe((types) => {
            if (!types.filter(t => t.value === this.conditionType.peek())[0]) {
                this.conditionType(null);
            }
        });
        this.availableSpecificTypes = ko.computed(() => {
            let conditionType = this.conditionType();
            let dataType = this.dataType();
            let types = dataType && conditionType ? getConditionSpecificTypes(conditionType, dataType, options.filters) : [];
            if (types && (types.length > 1)) {
                this.displayMode('specificTypes');
            }
            else {
                this.displayMode('conditionTypes');
            }
            return types;
        });
        this.availableSpecificTypes.subscribe(types => {
            if (types.length === 1)
                this.specificType(types[0].value);
        });
        this.selectedSpecificTypes = ko.computed(() => {
            if (this.availableSpecificTypes()['rangeStyleType'] === 'None') {
                return this.availableSpecificTypes() && this.availableSpecificTypes().filter((value) => value.value === this.specificType()) || [];
            }
            else {
                var selection = null, key = null;
                this.availableSpecificTypes().forEach((group) => {
                    group.items.forEach(item => {
                        if (item.value === this.specificType()) {
                            key = group.key;
                            selection = item;
                            return false;
                        }
                    });
                    if (selection)
                        return false;
                });
                return selection && [{ key: key, items: [selection] }] || [];
            }
        });
    }
    getStyleList(rangeStyleType) {
        const styleList = FormatConditionConverter.getStyleList(rangeStyleType).list.reverse();
        return styleList.map(styleType => {
            if (this.availableSpecificTypes()['rangeStyleType'] === 'Icon') {
                return styleSettingsProvider.toIconCssClass(styleType);
            }
            return convertCssPropertyWrappersToObject(appearanceSettingsProvider.toCssProperties(styleType));
        });
    }
    getGradientColorsList(type) {
        return FormatConditionRangeGenerator.generateGradientColors(type, 6).reverse();
    }
}
