/**
* DevExpress Dashboard (_scatter-chart-item-format-rule-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { dataItemName } from '../../../../model/format-rules/metadata/_chart-item-format-rule-base';
import { dynamicSelectBoxEditor } from '../../../form-adapter/_form-adapter-editors';
import { getDataItemDisplayName } from '../../../_display-name-provider';
import { chartFormatRuleConditionFilters, getChartFormatRuleLegendSettingsTab } from './_chart-item-format-rule-properties-composer';
import { createDataTypeObservable, FormatRulePropertiesComposer } from './_shared-format-rule-properties-composer';
export function createScatterChartItemFormatRulePropertiesComposer() {
    const opts = {
        conditionTypeFilter: chartFormatRuleConditionFilters,
        createDataTypeObservable: createDataTypeObservable,
        getCommonFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => getCommonScatterChartFormatRuleProperties(formatRule, getDataItems(dashboardItem, dataSourceBrowser)),
        getConditionFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => ({ properties: [] }),
        getMiscFormatRuleProperties: () => ({ properties: [] }),
        getAdditionalTabs: (formatRule) => getChartFormatRuleLegendSettingsTab(formatRule),
    };
    return new FormatRulePropertiesComposer(opts);
}
function getCommonScatterChartFormatRuleProperties(formatRule, getDataItems) {
    const dataItems = ko.pureComputed(() => getDataItems().map((m) => ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) })));
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    return {
        properties: [Object.assign(Object.assign({}, dataItemName), { formAdapterItem: dynamicSelectBoxEditor({ values: dataItems }) })]
    };
}
function getDataItems(dashboardItem, dataSourceBrowser) {
    return () => [
        dashboardItem.axisXMeasure(),
        dashboardItem.axisYMeasure(),
        dashboardItem.weight(),
        ...dashboardItem.arguments(),
        ...dashboardItem.hiddenMeasures(),
    ]
        .filter(dataItem => !!dataItem)
        .map(dataItem => ({
        uniqueName: dataItem.uniqueName(),
        displayName: getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
    }));
}
