/**
* DevExpress Dashboard (_grid-item-format-rule-properties-composer.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { getLocalizationById } from '../../../../data/localization/_default';
import { applyToRow } from '../../../../model/format-rules/metadata/_cells-item-format-rule';
import { GridDeltaColumn, GridSparklineColumn } from '../../../../model/items/grid/grid-columns';
import { SectionDescriptors } from '../../../items/_section-descriptors';
import { getDataItemContainerDisplayName, getDataItemDisplayName } from '../../../_display-name-provider';
import { createDataTypeObservable, FormatRulePropertiesComposer, getCommonCellsFormatRuleProperties } from './_shared-format-rule-properties-composer';
export function createGridItemFormatRulePropertiesComposer() {
    return new FormatRulePropertiesComposer({
        createDataTypeObservable: createDataTypeObservable,
        getCommonFormatRuleProperties: (formatRule, dashboardItem, dataSourceBrowser) => {
            return getCommonCellsFormatRuleProperties(formatRule, grabDataItems(dashboardItem, dataSourceBrowser), grapApplyToItems(dashboardItem, dataSourceBrowser));
        },
        getConditionFormatRuleProperties: () => ({ properties: [] }),
        getMiscFormatRuleProperties: getMiscFormatRuleProperties
    });
}
function getMiscFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser) {
    let visibilityRules = {};
    visibilityRules[applyToRow.propertyName] = m => !formatRule.condition()._isApplyToRowColumnRestricted;
    return {
        properties: [applyToRow],
        visibilityFilterRules: visibilityRules
    };
}
function grabDataItems(dashboardItem, dataSourceBrowser) {
    return () => dashboardItem
        .columns()
        .filter(c => !(c instanceof GridDeltaColumn) && !(c instanceof GridSparklineColumn))
        .map(c => ({
        uniqueName: c.actualDataItem.uniqueName(),
        displayName: getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, c)
    }))
        .concat(dashboardItem
        .hiddenMeasures()
        .map(m => ({
        uniqueName: m.uniqueName(),
        displayName: getLocalizationById(SectionDescriptors.HiddenMeasures.title) + ' - ' + getDataItemDisplayName(dataSourceBrowser, dashboardItem, m)
    })));
}
function grapApplyToItems(dashboardItem, dataSourceBrowser) {
    return () => dashboardItem
        .columns()
        .filter(c => !(c instanceof GridDeltaColumn))
        .map(c => {
        return {
            uniqueName: c.actualDataItem.uniqueName,
            displayName: getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, c)
        };
    });
}
