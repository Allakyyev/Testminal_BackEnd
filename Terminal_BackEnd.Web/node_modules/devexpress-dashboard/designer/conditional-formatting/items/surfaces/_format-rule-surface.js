/**
* DevExpress Dashboard (_format-rule-surface.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { CardItemDeltaFormatRule } from '../../../../model/format-rules/card-item-delta-format-rule';
import { CardItemFormatRule } from '../../../../model/format-rules/card-item-format-rule';
import { ChartItemFormatRule } from '../../../../model/format-rules/chart-item-format-rule';
import { GridItemFormatRule } from '../../../../model/format-rules/grid-item-format-rule';
import { PivotItemFormatRule } from '../../../../model/format-rules/pivot-item-format-rule';
import { ScatterChartItemFormatRule } from '../../../../model/format-rules/scatter-chart-item-format-rule';
import { createCardItemDeltaFormatRulePropertiesComposer, createCardItemFormatRulePropertiesComposer } from '../properties-composers/_card-item-format-rule-properties-composer';
import { createChartItemFormatRulePropertiesComposer } from '../properties-composers/_chart-item-format-rule-properties-composer';
import { createGridItemFormatRulePropertiesComposer } from '../properties-composers/_grid-item-format-rule-properties-composer';
import { createPivotItemFormatRulePropertiesComposer } from '../properties-composers/_pivot-item-format-rule-properties-composer';
import { createScatterChartItemFormatRulePropertiesComposer } from '../properties-composers/_scatter-chart-item-format-rule-properties-composer';
export class FormatRuleSurface {
    constructor(model, dashboardItem, dataSourceBrowser, propertiesController) {
        this.model = model;
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this.propertiesController = propertiesController;
        this._disposables = [];
    }
    updatePropertiesTabs(requestRecalculation) {
        var composer = null;
        if (this.model() instanceof CardItemDeltaFormatRule) {
            composer = createCardItemDeltaFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof CardItemFormatRule) {
            composer = createCardItemFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof GridItemFormatRule) {
            composer = createGridItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof PivotItemFormatRule) {
            composer = createPivotItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof ChartItemFormatRule) {
            composer = createChartItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof ScatterChartItemFormatRule) {
            composer = createScatterChartItemFormatRulePropertiesComposer();
        }
        var propertiesTabs = composer.composeTabs(this.model(), {
            dashboardItem: this.dashboardItem,
            dataSourceBrowser: this.dataSourceBrowser,
            requestRecalculation,
            specificTypeChanged: () => {
                this.propertiesController.secondarySelectedIndex(1);
            }
        });
        this.propertiesController.secondaryModel({
            displayText: this.model()._classCaption,
            data: {
                model: this.model(),
                propertiesTabs: ko.observableArray(propertiesTabs)
            },
            containingCollection: this.dashboardItem.formatRules
        });
        if (this.model().condition()) {
            this.propertiesController.secondarySelectedIndex(1);
        }
    }
    startEditing(args) {
        args.createImmediately = false;
        this.updatePropertiesTabs(args.requestRecalculation);
        args.requestRecalculation.add(() => this.updatePropertiesTabs(args.requestRecalculation));
        this.model.subscribe(() => this.updatePropertiesTabs(args.requestRecalculation));
    }
    dispose() {
        this._disposables.forEach((d) => {
            d.dispose();
        });
    }
}
