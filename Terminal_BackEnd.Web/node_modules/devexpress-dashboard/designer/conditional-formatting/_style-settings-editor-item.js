/**
* DevExpress Dashboard (_style-settings-editor-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { AppearanceSettings, ColorStyleSettings } from '../../model';
import { emptyStyleType } from '../../model/index.metadata';
import { callFuncWithUndoRedo } from '../../model/internal/_undo-engine-helper';
import { CustomAppearanceDialog } from './custom-style-settings/_custom-appearance-dialog';
import { PopoverColorPicker } from './custom-style-settings/_popover-color-picker';
import { styleSettingsAdapter } from './_style-settings-adapters';
export class StyleSettingsEditorItem {
    constructor(args) {
        this._item = args.item;
        this._itemAdapter = styleSettingsAdapter(this._item);
        this._editorClickHandler = args.clickHandler;
        this._isSelected = args.isSelected;
        this._initialize({ isEmptyAllowed: args.isEmptyAllowed, isRange: args.isRange, isGradient: args.isGradient, restrictToColor: args.restrictToColor });
        this.colorPicker = new PopoverColorPicker((style) => {
            if (style) {
                this._itemAdapter.setCustomColor(style);
                this._editorClickHandler('SaveColor');
            }
        });
        if (!args.getAvailableFontFamilies) {
            args.getAvailableFontFamilies = () => ko.computed(() => []);
        }
        this.customizeAppearanceDialog = new CustomAppearanceDialog((style) => {
            if (style) {
                callFuncWithUndoRedo(() => {
                    this._itemAdapter.setCustomAppearance(style);
                    this._editorClickHandler('SaveAppearance');
                });
            }
        }, args.getAvailableFontFamilies());
    }
    clickHandlerCore(isRestrictToColor) {
        if (this._itemAdapter.hasCustomStyle() && (this._itemAdapter.isEmptyCustomStyle() || this._isSelected())) {
            this._showCustomStyleEditor(isRestrictToColor);
        }
        else {
            this._editorClickHandler('None');
        }
    }
    _showCustomStyleEditor(isRestrictToColor) {
        if (isRestrictToColor) {
            const color = this._itemAdapter.getCustomColor();
            this.colorPicker.show(color ? color : 'rgba(255,255,255,1)');
        }
        else {
            const appearance = this._itemAdapter.getCustomAppearance();
            this.customizeAppearanceDialog.show(appearance);
        }
        return {};
    }
    _initialize({ isEmptyAllowed, isRange, isGradient, restrictToColor }) {
        this.title = ko.pureComputed(() => this._itemAdapter.getLocalizedCaption());
        this.cssStyles = ko.pureComputed(() => this._itemAdapter.getCssStyles());
        this.cssClasses = ko.pureComputed(() => {
            const classes = this._itemAdapter.getCssClasses(isEmptyAllowed, isRange, isGradient);
            if (this._isSelected() && !isRange)
                classes.push('dx-state-selected');
            return classes.join(' ');
        });
        this.dataLabel = ko.pureComputed(() => {
            const isColor = this._item instanceof ColorStyleSettings || this._item instanceof AppearanceSettings && restrictToColor;
            const isColorNone = this._item instanceof ColorStyleSettings && this._item.predefinedColor() === emptyStyleType
                || this._item instanceof AppearanceSettings && this._item.appearanceType() === emptyStyleType;
            if (isColorNone || !isColor) {
                return this._itemAdapter.getLabelText(isRange, isGradient, restrictToColor);
            }
            return '';
        });
        this.isRangeStop = ko.pureComputed(() => isRange && isGradient && this._itemAdapter.getPredefinedStyle() !== emptyStyleType);
        this.clickHandler = isRange ? undefined : () => this.clickHandlerCore(restrictToColor);
    }
}
ko.components.register('dx-dashboard-style-settings-editor-item', {
    viewModel: {
        createViewModel: ({ args }) => {
            return new StyleSettingsEditorItem(ko.unwrap(args));
        }
    },
    template: { element: 'dx-dashboard-style-settings-editor-item' }
});
