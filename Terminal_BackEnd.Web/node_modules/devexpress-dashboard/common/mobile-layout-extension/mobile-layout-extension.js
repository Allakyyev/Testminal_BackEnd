/**
* DevExpress Dashboard (mobile-layout-extension.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import devices from 'devextreme/core/devices';
import { confirm } from 'devextreme/ui/dialog';
import * as ko from 'knockout';
import { getLocalizationById } from '../../data/localization/_default';
import { safeComputed } from '../../model/internal/_knockout-utils';
import { defaultExtensions, extensionNameMap } from '../control-options';
import { OptionsManager } from '../internal/_options-manager';
import { DashboardMobileLayoutController } from './_mobile-layout';
const name = 'mobileLayout';
const nameAlias = 'mobile-layout';
export class MobileLayoutExtension {
    constructor(dashboardControl, options) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._disposables = [];
        this._optionsManager = new OptionsManager();
        this._mobileLayoutEnabledOption = ko.observable();
        this._defaultOptions = {
            mobileLayoutEnabled: 'Auto'
        };
        this._mobileLayoutTemplateName = 'dx-dashboard-mobile-layout';
        this._dashboardList = [];
        this._optionsManager.initialize({
            extensionName: name,
            dashboardControl: dashboardControl,
            defaultOptions: this._defaultOptions,
            initOptions: options,
            optionChanged: (args) => this._optionChanged(args)
        });
        this.__initializeConfirmDialogComponent(confirm);
        this._mobileLayoutEnabledOption(this._optionsManager.get('mobileLayoutEnabled'));
        this._canMobileLayoutBeEnabled = safeComputed({ isDesignMode: this.dashboardControl.isDesignMode }, (args) => !args.isDesignMode);
        this._isMobileLayoutModeExpected = safeComputed({ mobileLayoutEnabled: this._mobileLayoutEnabledOption }, (args) => {
            if (args.mobileLayoutEnabled === 'Always') {
                return true;
            }
            else if (args.mobileLayoutEnabled === 'Never') {
                return false;
            }
            else {
                return devices.current().phone;
            }
        });
        this.mobileLayoutEnabled = safeComputed({
            canMobileLayoutBeEnabled: this._canMobileLayoutBeEnabled,
            isMobileLayoutModeExpected: this._isMobileLayoutModeExpected
        }, (args) => {
            if (args.canMobileLayoutBeEnabled) {
                return args.isMobileLayoutModeExpected;
            }
            else {
                return false;
            }
        });
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'mobileLayoutEnabled':
                this._mobileLayoutEnabledOption(args.value);
                return 'reinitializeDashboard';
            default:
                return null;
        }
    }
    __initializeConfirmDialogComponent(component) {
        this._confirmDialogComponent = component;
    }
    start() {
        setTimeout(() => {
            if (this._isMobileLayoutModeExpected() && !this._canMobileLayoutBeEnabled()) {
                this._confirmDialogComponent(getLocalizationById('DashboardWebStringId.MobileLayout.SwitchToViewer'), '').then((res) => {
                    if (res) {
                        this.dashboardControl.switchToViewer();
                    }
                });
            }
        });
        var layoutController = safeComputed({
            dashboard: this.dashboardControl.dashboard,
            mobileLayoutEnabled: this.mobileLayoutEnabled
        }, (args) => {
            if (args.dashboard && args.mobileLayoutEnabled) {
                return new DashboardMobileLayoutController(args.dashboard, this.dashboardControl._dashboardContext, (name) => this.dashboardControl.findExtension(name), this.dashboardControl.encodeHtml, this.dashboardControl._viewerApi);
            }
            return null;
        });
        this._disposables.push(layoutController);
        this.dashboardControl._layoutInfoProviderCollection.splice(0, 0, {
            condition: () => this.mobileLayoutEnabled(),
            name: this._mobileLayoutTemplateName,
            getViewModel: () => safeComputed({ layoutController }, args => ({ componentArgs: args.layoutController })),
            getLayoutController: () => layoutController
        });
        this.dashboardControl._updateLayout();
        this.mobileLayoutEnabled.subscribe(_ => {
            this.dashboardControl._updateLayout();
        });
    }
    stop() {
        this._disposables.forEach(d => d.dispose());
    }
}
defaultExtensions[nameAlias] = (dashboardControl, options) => new MobileLayoutExtension(dashboardControl, options);
extensionNameMap[nameAlias] = name;
