/**
* DevExpress Dashboard (_mobile-layout-master-filters-editor.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { formatFilterValue } from '../../data/_formatter';
import { dashboardToolbarItemNames } from '../../viewer-parts/widgets/caption-toolbar/caption-toolbar-options';
import { cssClasses } from '../../viewer-parts/widgets/caption-toolbar/_caption-toolbar-css-classes';
import { MobileLayoutCaptionToolbar } from '../../viewer-parts/widgets/caption-toolbar/_mobile-layout-caption-toolbar';
import { maxFilterValuesCount } from '../viewer/title/_dashboard-title-model';
import { DashboardItemContext } from '../viewer/_viewer-interfaces';
import { MobileItemViewerFactory, PopupResizeController } from './_mobile-layout-fullscreen-item';
import { customizeMobileViewerItems, setCardAutoArrangementMode } from './_mobile-layout-item';
export class MasterFiltersEditorModel {
    constructor() {
        this._target = ko.observable(null);
        this._visible = ko.observable(false);
        this.visible = ko.computed(() => this._visible());
        this.masterItems = ko.computed(() => {
            if (this._target()) {
                return this._target()._masterFilterItems();
            }
            else {
                return [];
            }
        });
    }
    addFilterButton(toolbarItems, filterableItem) {
        if (filterableItem._masterFilterItems().length) {
            toolbarItems.push({
                name: dashboardToolbarItemNames.dashboardFilters,
                type: 'button',
                icon: 'dx-dashboard-filters',
                click: () => {
                    this.show(filterableItem);
                }
            });
        }
    }
    show(target) {
        this._target(target);
        this._visible(true);
    }
    hide() {
        this._visible(false);
    }
}
export class ItemMasterFilterInfo {
    constructor(dashboardItem, click) {
        this.dashboardItem = dashboardItem;
        this.click = click;
        this.name = ko.computed(() => dashboardItem.name());
        this.filterValues = ko.computed(() => {
            return dashboardItem
                ._getDisplayFilterValues(maxFilterValuesCount)
                .filter(value => value.Values[0] && !!value.Values[0].Format)
                .map(value => {
                return {
                    name: value.Name,
                    valuesString: value
                        .Values
                        .map(filterValue => formatFilterValue(filterValue))
                        .concat(value.Truncated ? ['…'] : [])
                        .join(', ')
                };
            });
        });
    }
}
class ItemMasterFilterPopupViewModel {
    constructor(heightOffset, visible, repaintRequest) {
        this.width = '100vw';
        this.height = `calc(100vh - ${heightOffset}px)`;
        this.visible = visible;
        var popupResizeController = new PopupResizeController(repaintRequest);
        this.onInitializing = popupResizeController.onInitialized;
        this.onDisposing = popupResizeController.onDisposing;
    }
}
export class ItemMasterFiltersViewModel {
    constructor(model, dashboardContext, repaintRequest) {
        this.model = model;
        this.masterFilterItem = ko.observable(null);
        this.showMasterFilterItem = (dashboardItem, dashboardContext, repaintRequest) => {
            this.maximizeFiltersPopup(true);
            this.masterFilterItem({
                dashboardItem: dashboardItem,
                dashboardContext: dashboardContext,
                repaintRequest: repaintRequest,
                localContext: new DashboardItemContext({
                    itemFactory: new MobileItemViewerFactory(),
                    addContextToolbarItems: (options) => {
                        options.actionItems = options.actionItems.filter(item => item.name !== dashboardToolbarItemNames.exportMenu);
                    },
                    viewerItemCreated: (dashboardItem, viewerItem) => customizeMobileViewerItems(viewerItem),
                    createCaptionToolbar: (viewerItem, container, controlContainer, popupContainer, viewOptions) => {
                        return new MobileLayoutCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, cssClasses.caption, viewOptions.captionToolbarSeparatorRequired);
                    },
                    beforeApplyViewerItemOptions: (item, options, isCreation) => {
                        options.ParentContainer = undefined;
                        setCardAutoArrangementMode(item, options);
                    },
                    itemCreatingType: 'primary'
                })
            });
        };
        this.closeMasterFilterItemPopup = () => {
            this.maximizeFiltersPopup(false);
            this.masterFilterItem(null);
        };
        this.closeMasterFiltersPopup = () => {
            this.closeMasterFilterItemPopup();
            this.model.hide();
        };
        this.maximizeFiltersPopup = ko.observable(false);
        this.masterItems = ko.computed(() => model.masterItems().map(mi => new ItemMasterFilterInfo(mi, () => this.showMasterFilterItem(mi, dashboardContext, repaintRequest))));
        var masterFiltersVisible = ko.computed(() => this.model.visible());
        var masterFilterItemVisible = ko.computed(() => !!this.masterFilterItem());
        this.masterFiltersPopup = new ItemMasterFilterPopupViewModel(50, masterFiltersVisible, repaintRequest);
        this.masterFilterMaximizedItemPopup = new ItemMasterFilterPopupViewModel(100, masterFilterItemVisible, repaintRequest);
        this.maximizeFiltersPopup = ko.observable(masterFiltersVisible());
    }
}
