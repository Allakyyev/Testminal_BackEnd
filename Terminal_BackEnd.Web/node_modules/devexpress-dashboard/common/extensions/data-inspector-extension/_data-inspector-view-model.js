/**
* DevExpress Dashboard (_data-inspector-view-model.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { format as stringFormat } from 'devextreme/core/utils/string';
import { current as currentTheme, isMaterial } from 'devextreme/ui/themes';
import * as ko from 'knockout';
import { $unwrap } from '../../../data/_jquery-helpers';
import { renderImage } from '../../../data/_utils';
import { getLocalizationById } from '../../../data/localization/_default';
import { CardItem, GridItem, GridSparklineColumn } from '../../../model';
import { DashboardLayoutModeHelper } from '../../../viewer-parts/_dashboard-layout-mode-helper';
import { getFilterRowLocalizationOptions } from '../../../viewer-parts/viewer-items/data-grid-item/_grid-filter-patcher';
import { generateAggregatedSource } from './_aggregated-data-source';
import { generateUnderlyingDataSource } from './_underlying-data-source';
export class DataInspectorViewModelOptions {
}
export class DataInspectorViewModel {
    constructor(options) {
        this.options = options;
        this._dashboardItem = ko.observable();
        this.avaliableInspectedDataType = [{
                value: 'Aggregated',
                text: getLocalizationById('DashboardStringId.AggregatedDataType')
            }, {
                value: 'Raw',
                text: getLocalizationById('DashboardStringId.RawDataType')
            }];
        this.allowSwitchInspectedDataType = ko.observable(false);
        this.inspectedDataType = ko.observable();
        this.title = ko.computed(() => {
            return (this._dashboardItem() && this._dashboardItem().name() || '') + (!this.allowSwitchInspectedDataType() ?
                ' ' + stringFormat(getLocalizationById('DashboardStringId.InspectedTypeFormatString'), this.inspectedDataType()) :
                '');
        });
        this.visible = ko.observable(false);
        this.container = ko.observable(null);
        this.gridDataSource = ko.observable(null);
        this.gridOptions = ko.computed(() => {
            let gridDataSource = this.gridDataSource();
            if (!gridDataSource) {
                return null;
            }
            let dataSource = gridDataSource.data || null;
            let columns = gridDataSource.columns || null;
            let options = {
                customizeColumns: gridDataSource.customizeColumns,
                onContentReady: this.options.onGridContentReady,
                onInitialized: this.options.onGridInitialized,
                showBorders: true,
                scrolling: {
                    mode: 'virtual'
                },
                loadPanel: {
                    text: getLocalizationById('DashboardWebStringId.Loading')
                },
                filterRow: Object.assign({ visible: true }, getFilterRowLocalizationOptions()),
                onCellPrepared: (e) => {
                    if (e.rowType === 'data') {
                        var cellData = e.data[e.column.dataField];
                        if (cellData) {
                            if (cellData.displayValueAsImage) {
                                e.cellElement.innerText = '';
                                renderImage(e.cellElement, { value: cellData.value });
                            }
                            else if (cellData.displayValue) {
                                $unwrap(e.cellElement).innerText = cellData.displayValue;
                            }
                        }
                    }
                },
                columnHidingEnabled: this.isMobile,
                rowAlternationEnabled: true,
                noDataText: getLocalizationById('DashboardStringId.MessageGridHasNoData'),
                dataSource: dataSource,
                columns: columns,
            };
            if (isMaterial(currentTheme()))
                options.showColumnLines = true;
            return options;
        });
        this.closeButtonStylingMode = isMaterial(currentTheme()) ? 'contained' : undefined;
        this.closeButtonType = isMaterial(currentTheme()) ? 'normal' : undefined;
        this.visible.subscribe(visible => {
            if (!visible) {
                this._clearDataSource();
            }
        });
        this._dashboardItem.subscribe(_ => { this._clearDataSource(); });
        this.inspectedDataType.subscribe(() => {
            if (this.visible()) {
                this._bindGrid();
            }
        });
    }
    setUnderlyingDataProvider(underlyingDataProvider) {
        this.underlyingDataProvider = underlyingDataProvider;
    }
    _bindGrid() {
        var dashboardItem = this._dashboardItem();
        var inspectedDataType = this.inspectedDataType();
        var dataSource = inspectedDataType === 'Raw' ? this._getRawDataSource(dashboardItem) : this._getAggregatedDataSource(dashboardItem);
        if (dataSource !== this.gridDataSource()) {
            this.gridDataSource(dataSource);
        }
    }
    _clearDataSource() {
        this._rawDataSource = null;
        this._aggregatedDataSource = null;
    }
    _getInitialMode(allowInspectAggregatedData, allowInspectRawData, initialMode, prevMode) {
        if (initialMode) {
            return initialMode;
        }
        else if (prevMode && allowInspectAggregatedData && allowInspectRawData) {
            return prevMode;
        }
        else if (allowInspectAggregatedData) {
            return 'Aggregated';
        }
        else if (allowInspectRawData) {
            return 'Raw';
        }
        else
            return 'Aggregated';
    }
    _getRawDataSource(dashbordItem) {
        if (!this._rawDataSource) {
            this._rawDataSource = generateUnderlyingDataSource(this.underlyingDataProvider, dashbordItem);
        }
        return this._rawDataSource;
    }
    _getAggregatedDataSource(dashbordItem) {
        if (!this._aggregatedDataSource) {
            this._aggregatedDataSource = generateAggregatedSource(dashbordItem._getItemData(), this._getAggregatedDataSourceArgs(dashbordItem));
        }
        return this._aggregatedDataSource;
    }
    _getAggregatedDataSourceArgs(dashboardItem) {
        if (dashboardItem instanceof CardItem) {
            if (dashboardItem.sparklineArgument()) {
                return {
                    addSparklineTotal: true,
                    sparklineMeasures: dashboardItem
                        .cards()
                        .map(card => card.actualValue().uniqueName())
                };
            }
        }
        else if (dashboardItem instanceof GridItem) {
            return {
                addSparklineTotal: false,
                sparklineMeasures: dashboardItem
                    .columns()
                    .filter(column => column instanceof GridSparklineColumn)
                    .map(column => column.measure().uniqueName())
            };
        }
        return {
            addSparklineTotal: false, sparklineMeasures: []
        };
    }
    _getPopupOptions() {
        const popupOptions = {
            container: this.container,
            title: this.title,
            onShowing: this.options.onDialogShowing,
            onShown: this.options.onDialogShown,
            onHidden: this.options.onDialogHidden,
            visible: this.visible,
            fullScreen: this.isMobile,
            height: '80%',
            position: {
                my: 'center',
                at: 'center',
                of: this.isMobile ? window : this.container
            },
            toolbarItems: [{
                    toolbar: 'bottom',
                    location: 'after',
                    widget: 'dxButton',
                    options: {
                        text: getLocalizationById('DashboardStringId.DataInspectorButtonClose'),
                        onClick: () => this.visible(false),
                        stylingMode: this.closeButtonStylingMode,
                        type: this.closeButtonType,
                    }
                }],
            wrapperAttr: {
                class: 'dx-dashboard-data-inspector-dialog'
            },
            showCloseButton: true
        };
        if (!this.isMobile) {
            popupOptions.position['boundary'] = this.container;
        }
        return popupOptions;
    }
    get isMobile() {
        return DashboardLayoutModeHelper.isMobile;
    }
    show(dashboardItem, allowInspectAggregatedData, allowInspectRawData, initialMode) {
        this.allowSwitchInspectedDataType(allowInspectAggregatedData && allowInspectRawData);
        this.inspectedDataType(this._getInitialMode(allowInspectAggregatedData, allowInspectRawData, initialMode, this.inspectedDataType()));
        this._dashboardItem(dashboardItem);
        this.container(this.options.getContainer());
        this.visible(true);
        this._bindGrid();
    }
}
