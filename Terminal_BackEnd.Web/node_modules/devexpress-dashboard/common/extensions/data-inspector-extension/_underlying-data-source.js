/**
* DevExpress Dashboard (_underlying-data-source.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import CustomStore from 'devextreme/data/custom_store';
import { $promiseAdapter } from '../../../data/_jquery-helpers';
import { NotificationController } from '../../notification-controller/notificator';
import { getSortedAxes, getSortedColumns } from './_inspected-data-colum-generator';
export function generateUnderlyingDataSource(underlyingDataProvider, dashbordItem) {
    const DataFieldPrefix = 'DataField';
    const itemData = dashbordItem._getItemData();
    if (underlyingDataProvider && itemData && !itemData.isEmpty()) {
        let columnsState = {};
        return {
            columns: null,
            customizeColumns: (columns) => {
                columns.forEach(column => {
                    let columnState = columnsState[column.dataField];
                    if (columnState) {
                        column.name = columnState.dataMember;
                        column.caption = columnState.displayName;
                    }
                });
            },
            data: new CustomStore({
                loadMode: 'raw',
                load: () => {
                    return $promiseAdapter(underlyingDataProvider.requestUnderlyingData(dashbordItem, {
                        dataMembers: getSortedColumns(itemData)
                    }).then(({ DataMembers, DataMembersDisplayNames, Data, ErrorMessage }) => {
                        if (ErrorMessage) {
                            new Error(ErrorMessage);
                        }
                        DataMembers.forEach((member, index) => {
                            columnsState[DataFieldPrefix + index.toString()] = {
                                dataMember: member,
                                displayName: DataMembersDisplayNames[index] || member,
                            };
                        });
                        const columnTypes = getSortedAxes(itemData)
                            .reduce((acc, axis) => acc.concat(itemData.getDimensions(axis).map(d => {
                            return { dataMember: d.dataMember, dataType: d.dataType };
                        })), []);
                        return Data.map(row => {
                            return DataMembers.reduce((acc, _value, index) => {
                                const currentTypeInfo = columnTypes.find(obj => {
                                    return obj.dataMember === _value;
                                });
                                if (currentTypeInfo && currentTypeInfo['dataType'] === 'Object') {
                                    acc[DataFieldPrefix + index.toString()] = { displayValueAsImage: true, value: row[index] };
                                }
                                else {
                                    acc[DataFieldPrefix + index.toString()] = row[index];
                                }
                                return acc;
                            }, {});
                        });
                    }, result => {
                        throw new Error(NotificationController._getDetailedErrorMessage(result));
                    }));
                }
            })
        };
    }
    else {
        return {
            columns: [],
            customizeColumns: () => { },
            data: [],
        };
    }
}
