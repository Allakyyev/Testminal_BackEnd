/**
* DevExpress Dashboard (_item-change-subscriber.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CalculatedField } from '../../model/data-sources/calculated-field';
import { DisposableObject } from '../../model/disposable-object';
import { subscribeArrayChange } from '../../model/internal/_knockout-utils';
import { PropertyCategory } from '../../model/metadata/_base-metadata';
import { ModelSubscriber } from './_model-subscriber';
export class ItemChangeSubscriber extends DisposableObject {
    constructor(dashboardItem, itemChanged) {
        super();
        this.dashboardItem = dashboardItem;
        let subscriber = new ModelSubscriber(this.dashboardItem);
        subscriber.registerHandler(category => itemChanged(category));
        this.toDispose(subscriber);
        this.toDispose(this.dashboardItem._subcribeDataQueryParams(newValue => itemChanged(PropertyCategory.ClientState)));
    }
}
export class ComponentArraySubscriber extends DisposableObject {
    constructor(_items, _propertyUniqueName = 'componentName') {
        super();
        this._items = _items;
        this._propertyUniqueName = _propertyUniqueName;
        this._subscribers = [];
        this.toDispose(subscribeArrayChange(this._items, {
            added: (item) => {
                this._subscribe(item);
                this.itemAdded(item);
            },
            deleted: (item) => {
                this._unsubscribe(item);
                this.itemDeleted(item);
            }
        }));
        this._items().forEach(item => this._subscribe(item));
    }
    itemAdded(item) { }
    itemDeleted(item) { }
    _subscribe(item) {
        this._subscribers[item[this._propertyUniqueName]()] = this.createSubscriber(item);
    }
    _unsubscribe(item) {
        var propertyValue = item[this._propertyUniqueName]();
        !!this._subscribers[propertyValue] && this._subscribers[propertyValue].dispose();
        delete this._subscribers[propertyValue];
    }
    dispose() {
        this._items().forEach(item => this._unsubscribe(item));
        super.dispose();
    }
}
export class ItemsChangeSubscriber extends ComponentArraySubscriber {
    constructor(items, _options) {
        super(items);
        this._options = _options;
    }
    itemAdded(item) {
        this._options.itemAdded && this._options.itemAdded(item);
    }
    itemDeleted(item) {
        this._options.itemDeleted && this._options.itemDeleted(item);
    }
    createSubscriber(item) {
        return new ItemChangeSubscriber(item, category => this._options.itemChanged(item, category));
    }
}
export class ColorSchemeSubscriber extends ComponentArraySubscriber {
    constructor(entries, _changed) {
        super(entries);
        this._changed = _changed;
    }
    createSubscriber(item) {
        var subscriber = new ModelSubscriber(item);
        subscriber.registerHandler((category, model) => {
            this._changed();
        });
        return subscriber;
    }
    itemAdded(item) {
        this._changed();
    }
    itemDeleted(item) {
        this._changed();
    }
}
export class DataSourcesSubscriber extends ComponentArraySubscriber {
    constructor(dataSources, _onDataSourceChanged) {
        super(dataSources);
        this._onDataSourceChanged = _onDataSourceChanged;
    }
    createSubscriber(dataSource) {
        var subscriber = new ModelSubscriber(dataSource);
        subscriber.registerHandler((category, model, propertyName, status) => {
            if (model instanceof CalculatedField) {
                var calcField = model;
                this._onDataSourceChanged({
                    dataSource: dataSource,
                    model: model,
                    propertyName: propertyName,
                    status: status,
                    queryName: calcField.dataMember(),
                    fieldName: calcField.name()
                });
            }
            else {
                this._onDataSourceChanged({
                    dataSource: dataSource,
                    model: model,
                    propertyName: propertyName,
                    status: status
                });
            }
        });
        return subscriber;
    }
    itemAdded(dataSource) {
        this._onDataSourceChanged({
            dataSource: dataSource,
            status: 'added'
        });
    }
    itemDeleted(dataSource) {
        this._onDataSourceChanged({
            dataSource: dataSource,
            status: 'deleted'
        });
    }
}
