/**
* DevExpress Dashboard (_group-item-bindings.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { DashboardItemHeaderHeight } from '../../viewer/_dashboard-item-bindings';
import { SplitterSize } from '../core/_layout-item';
export class GroupViewModel extends Disposable {
    constructor(params) {
        super();
        this.defaultPadding = SplitterSize * 2;
        this.padding = ko.observable(this.defaultPadding);
        this.headerHeight = ko.observable(DashboardItemHeaderHeight);
        this.addDisposable(this.layoutItem = ko.computed(() => ko.unwrap(params.layoutItem)));
        this.addDisposable(ko.computed(() => {
            this.layoutItem().verticalPaddings(this.padding() * 2 + this.headerHeight());
            this.layoutItem().horizontalPaddings(this.padding() * 2);
        }).extend({ deferred: true }));
        this.addDisposable(ko.computed(() => {
            this.layoutItem().setConstraints({
                min: {
                    width: this.layoutItem().items().length === 0 ? 100 : 0,
                    height: this.layoutItem().items().length === 0 ? 100 : 0
                },
                max: {
                    width: Number.MAX_VALUE,
                    height: Number.MAX_VALUE
                }
            });
        }));
    }
}
ko.components.register('dx-dashboard-layout-group', {
    viewModel: GroupViewModel,
    template: { element: 'dx-dashboard-layout-group' }
});
