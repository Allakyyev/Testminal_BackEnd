/**
* DevExpress Dashboard (_docking-layout-controller.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import { off, on } from 'devextreme/events';
import * as ko from 'knockout';
import { $unwrap, closest } from '../../data/_jquery-helpers';
import { type } from '../../data/_utils';
import { getLocalizationById } from '../../data/localization/_default';
import { getItemJson } from '../../model/internal/_dashboard-item_helper';
import { ComboBoxItem } from '../../model/items/filter-items/combo-box-item';
import { DateFilterItem } from '../../model/items/filter-items/date-filter-item';
import { GroupItem } from '../../model/items/group/group-item';
import { DashboardTabPage } from '../../model/items/tab-container-item/dashboard-tab-page';
import { TabContainerItem } from '../../model/items/tab-container-item/tab-container-item';
import { titleHeight } from '../../viewer-parts/title/_dashboard-title-view-constants';
import { dashboardToolbarItemNames } from '../../viewer-parts/widgets/caption-toolbar/caption-toolbar-options';
import { DashboardItemContext } from '../viewer/_viewer-interfaces';
import { DashboardTitleContext } from '../viewer/title/_title-component';
import { FullscreenItemModel } from './_docking-layout-fullscreen-item';
import { LayoutItem } from './core/_layout-item';
import { LayoutDragController } from './drag-and-drop/_drag-controller';
export class DockingLayoutController extends Disposable {
    constructor(dashboardModel, dataSourceBrowser, context, findExtension, allowMaximizeItems, resizeByTimer, repaintRequest, encodeHtml = true, viewerApi) {
        super();
        this.dashboardModel = dashboardModel;
        this.dataSourceBrowser = dataSourceBrowser;
        this.context = context;
        this.findExtension = findExtension;
        this.allowMaximizeItems = allowMaximizeItems;
        this.resizeByTimer = resizeByTimer;
        this.repaintRequest = repaintRequest;
        this.encodeHtml = encodeHtml;
        this.selectedLayoutItem = ko.pureComputed(() => this._selectedLayoutItem().sizeController);
        this.dragController = new LayoutDragController();
        this._scrollSubscriptions = [];
        this.scrollViewEvents = {
            onInitialized: (e) => {
                this.dragController.initScrollAnimator({
                    getBoundingClientRect: () => $unwrap(e.component.element()).getBoundingClientRect(),
                    getScrollOffset: () => e.component.scrollOffset(),
                    setScrollOffset: (offset) => e.component.scrollTo(offset)
                });
            },
            onScroll: () => {
                this._scrollSubscriptions.forEach(action => action());
            },
            onDisposing: (e) => {
                this.dragController.cleanScrollAnimator();
            }
        };
        this.layoutMainElementEvents = {
            onInitialize: (args) => {
                this.dragController.initLayoutMainElement(args.element);
            },
            onDisposing: (args) => {
                this.dragController.cleanLayoutMainElement(args.element);
            }
        };
        this.itemInteractionInProgress = ko.observable(false);
        this._selectedLayoutItem = ko.observable();
        this.emptyItemTemplates = ko.observableArray();
        this.emptyItemTemplatesService = (layoutItem) => {
            return {
                data: this.emptyItemTemplates,
                name: 'dx-dashboard-empty-item-templates'
            };
        };
        this.addDashboardItem = (data) => {
            var { item } = LayoutItem.findLargestItem(this.rootItem);
            if (!item) {
                item = this.rootItem;
            }
            var itemJson = getItemJson(data.type);
            var location = item._parent() && item._parent().viewModel && item._parent().viewModel.orientation() === 'Horizontal' ? 'bottom' : 'right';
            item.create(itemJson, location);
        };
        this.width = ko.observable(0);
        this.height = ko.observable(0);
        this.headerHeight = ko.observable(titleHeight);
        this.visibleItemsProvider = undefined;
        this.addDisposable(this.selectedDashboardItem = ko.computed(() => {
            return this._selectedLayoutItem() && this._selectedLayoutItem().viewModel.item() || null;
        }));
        this.addDisposable(this.rootItem = new LayoutItem(dashboardModel.layout()._createViewModel(), null));
        var fullScreenItemLocalContext = new DashboardItemContext({
            ignoreDesignMode: true,
            beforeApplyViewerItemOptions: (item, options) => {
                options.ParentContainer = undefined;
            },
            addContextToolbarItems: (options) => {
                options.actionItems.push({
                    hint: getLocalizationById('DashboardStringId.ActionRestoreDashboardItem'),
                    name: dashboardToolbarItemNames.restoreItem,
                    icon: 'dx-dashboard-restore-item',
                    type: 'button',
                    click: () => {
                        this.fullscreenItemModel.restoreDownItem();
                    }
                });
            },
            itemCreatingType: 'secondary'
        });
        var exportExtension = this.findExtension('dashboardExport');
        if (exportExtension) {
            exportExtension._initializeSecondaryExportItem(fullScreenItemLocalContext);
        }
        this.addDisposable(this.fullscreenItemModel = new FullscreenItemModel(context, fullScreenItemLocalContext));
        var getVisibleItems = (layoutItemViewModel) => {
            var res = [];
            if (layoutItemViewModel.item())
                res.push(layoutItemViewModel.item());
            if (layoutItemViewModel.item() instanceof TabContainerItem) {
                res.push(...layoutItemViewModel.childItems().map(ci => ci._createViewModel().item()));
            }
            layoutItemViewModel.visibleItems().forEach(childItem => {
                res.push(...getVisibleItems(childItem._createViewModel()));
            });
            return res;
        };
        this.visibleItemsProvider = {
            visibleItems: ko.pureComputed(() => {
                return getVisibleItems(this.rootItem.viewModel);
            })
        };
        this.rootItem.onEvent = (layoutItem, event) => {
            if (event === 'click') {
                this.select(layoutItem);
            }
            else if (event === 'unselect') {
                this.select(null);
            }
            else if (event === 'resize-started') {
                setTimeout(() => this.itemInteractionInProgress(true), 1);
            }
            else if (event === 'resize-completed') {
                setTimeout(() => this.itemInteractionInProgress(false), 1);
            }
            else if (event === 'get-context') {
                return context;
            }
            else if (event === 'get-local-context') {
                var itemModel = layoutItem.viewModel.item;
                var localContext = new DashboardItemContext({
                    disabled: ko.computed(() => itemModel() && this.fullscreenItemModel.maximizedItemName === itemModel().componentName()),
                    addContextToolbarItems: (options, item) => {
                        if (this.allowMaximizeItems
                            && !(item instanceof ComboBoxItem)
                            && !(item instanceof DateFilterItem)
                            && !(item instanceof GroupItem)
                            && !(item instanceof TabContainerItem)
                            && !(item instanceof DashboardTabPage)) {
                            options.actionItems.push({
                                hint: getLocalizationById('DashboardStringId.ActionMaximizeDashboardItem'),
                                icon: 'dx-dashboard-maximize-item',
                                name: dashboardToolbarItemNames.maximizeItem,
                                type: 'button',
                                click: () => {
                                    this.select(null);
                                    this.fullscreenItemModel.maximizeItem(item);
                                }
                            });
                        }
                    },
                    visualMode: ko.computed(() => {
                        if (itemModel()) {
                            if (itemModel() instanceof TabContainerItem) {
                                return 'caption';
                            }
                            let parent = dashboardModel.findItem(itemModel().parentContainer());
                            if (parent instanceof DashboardTabPage
                                && dashboardModel._getDisplayDashboardItem(parent) !== parent) {
                                return 'content';
                            }
                        }
                        return 'full';
                    }),
                    itemCreatingType: 'primary'
                });
                var exportExtension = this.findExtension('dashboardExport');
                if (exportExtension) {
                    exportExtension._initializePrimaryExportItem(localContext);
                }
                return localContext;
            }
            else if (event === 'get-context-menu-service') {
                return this.contextMenu;
            }
            else if (event === 'get-empty-item-templates-service') {
                return this.emptyItemTemplatesService;
            }
            else if (event === 'get-layout-item-placeholder-service') {
                return this.layoutItemPlaceholderService;
            }
        };
        on(document, 'pointerdown.dxlayout', (e) => {
            if (!this._selectedLayoutItem()) {
                return;
            }
            var target = $unwrap(e.target), validParents = ['.dx-layout-root',
                '.dx-accordion-item',
                '.dx-treeview-node',
                '.dx-dashboard-context-menu-panel',
                'dx-field-chooser',
                '.dx-dashboard-toolbar',
                '.dx-overlay-content',
                '.dx-overlay-shader',
                '.ace_editor',
                '.dx-scrollable-scrollbar'
            ];
            var found = false;
            if (type.isDefined(target.classList) && target.classList.contains('dx-calendar-cell')) {
                found = true;
            }
            else if (!target.parentNode) {
                found = true;
            }
            else {
                found = found || validParents.some((validParent) => !!closest(target, validParent));
            }
            if (found)
                return;
            if (target.tagName && target.tagName.toLowerCase() === 'body')
                return;
            if (document.activeElement && document.activeElement.blur) {
                document.activeElement.blur();
            }
            this.select(null);
        });
        this.addDisposable(this.titleContext = new DashboardTitleContext(this.encodeHtml, this.findExtension, true, viewerApi));
        this.addDisposable(ko.computed(() => {
            if (this.width() > 0) {
                this.rootItem.width(this.width());
            }
            if (this.height() > 0) {
                this.rootItem.height(this.height() - this.headerHeight());
            }
        }));
    }
    get fullscreenItemProvider() {
        return this.fullscreenItemModel;
    }
    select(item) {
        var oldSelectedItem = this._selectedLayoutItem.peek();
        if (oldSelectedItem) {
            oldSelectedItem.isSelected(false);
        }
        this._selectedLayoutItem(item);
        if (!!item) {
            item.isSelected(true);
        }
    }
    subscribeOnScroll(handler) {
        this._scrollSubscriptions.push(handler);
    }
    unsubscribeOnScroll(handler) {
        this._scrollSubscriptions.splice(this._scrollSubscriptions.indexOf(handler), 1);
    }
    dispose() {
        this.dataSourceBrowser = null;
        this.dragController.dispose();
        this._scrollSubscriptions = [];
        off(document, '.dxlayout');
        super.dispose();
    }
}
