/**
* DevExpress Dashboard (_resizable.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import devices from 'devextreme/core/devices';
import { off, on } from 'devextreme/events';
import * as eventUtils from 'devextreme/events/utils';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { createJQueryElement } from '../../../data/_jquery-helpers';
const mouseMoveHandlerKey = 'dxpointermove.dx-ko-layout-resize';
const mouseDownHandlerKey = 'dxpointerdown';
const mouseUpHandlerKey = 'dxpointerup.dx-ko-layout-resize';
function skipDevice(ev) {
    return devices.real().ios && eventUtils.isMouseEvent(ev);
}
function createHResizeHandler(layoutItem, getWidgetContainer, $element, $ghostbar) {
    return function (ev) {
        const parents = $element.parents('.dx-layout');
        parents.addClass('dx-layout-drag-in-progress');
        layoutItem.resizeStarted && layoutItem.resizeStarted();
        ev.preventDefault();
        var currentWidth = 0;
        var ghostOffsetX = ev.offsetX ? ev.offsetX : 0;
        var originalX = ev.pageX;
        const $ghostbar = createJQueryElement('<div>', {
            class: 'dx-ghostbar-e',
            css: {
                position: 'fixed',
                height: $element.outerHeight(),
                top: $element.offset().top,
                left: originalX - ghostOffsetX
            }
        }).appendTo(getWidgetContainer());
        on(document, mouseMoveHandlerKey, function (e) {
            if (!skipDevice(e)) {
                var newWidth = layoutItem.width() + e.pageX - originalX;
                if (!layoutItem.isValidWidth || layoutItem.isValidWidth(newWidth)) {
                    currentWidth = newWidth;
                    $ghostbar.css('left', e.pageX - ghostOffsetX);
                }
            }
            e.preventDefault();
            return false;
        });
        on(document, mouseUpHandlerKey, function (e) {
            setTimeout(() => layoutItem.width(currentWidth), 1);
            $ghostbar.remove();
            parents.removeClass('dx-layout-drag-in-progress');
            off(document, mouseMoveHandlerKey);
            off(document, mouseUpHandlerKey);
            layoutItem.resizeCompleted && layoutItem.resizeCompleted();
            e.preventDefault();
        });
    };
}
function createVResizeHandler(layoutItem, getWidgetContainer, $element, $ghostbar) {
    return function (ev) {
        const parents = $element.parents('.dx-layout');
        parents.addClass('dx-layout-drag-in-progress');
        layoutItem.resizeStarted && layoutItem.resizeStarted();
        ev.preventDefault();
        var currentHeight = 0;
        var ghostOffsetY = ev.offsetY ? ev.offsetY : 0;
        var originalY = ev.pageY;
        const $ghostbar = createJQueryElement('<div>', {
            class: 'dx-ghostbar-s',
            css: {
                position: 'fixed',
                width: $element.outerWidth(),
                left: $element.offset().left,
                top: originalY - ghostOffsetY
            }
        }).appendTo(getWidgetContainer());
        on(document, mouseMoveHandlerKey, function (e) {
            if (!skipDevice(e)) {
                var newHeight = layoutItem.height() + e.pageY - originalY;
                if (!layoutItem.isValidHeight || layoutItem.isValidHeight(newHeight)) {
                    currentHeight = newHeight;
                    $ghostbar.css('top', e.pageY - ghostOffsetY);
                }
            }
            return false;
        });
        on(document, mouseUpHandlerKey, function (e) {
            setTimeout(() => layoutItem.height(currentHeight), 1);
            $ghostbar.remove();
            parents.removeClass('dx-layout-drag-in-progress');
            off(document, mouseMoveHandlerKey);
            off(document, mouseUpHandlerKey);
            layoutItem.resizeCompleted && layoutItem.resizeCompleted();
            e.preventDefault();
        });
    };
}
ko.bindingHandlers['dx-ko-resizable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const { layoutItem, getWidgetContainer } = valueAccessor();
        var $element = $.fn.constructor(element);
        var subscriptions = [];
        var unsubscribe = () => {
            subscriptions.forEach(subscr => {
                subscr.subscribable.dispose();
                off(subscr.dragbar.get(0), mouseDownHandlerKey);
                subscr.dragbar.remove();
            });
            subscriptions.splice(0, subscriptions.length);
        };
        var createResizeDragBars = (resizeHandles) => {
            unsubscribe();
            if (resizeHandles === 'e') {
                var $dragBar = $.fn.constructor('<div>', {
                    class: 'dx-dragbar-e',
                    ondragover: 'event.stopPropagation();',
                    ondrop: 'event.stopPropagation();',
                    css: {
                        height: layoutItem.height()
                    }
                }).appendTo($element);
                var subscr = layoutItem.height.subscribe(val => {
                    $dragBar.css('height', val);
                });
                on($dragBar.get(0), mouseDownHandlerKey, createHResizeHandler(layoutItem, getWidgetContainer, $element, $dragBar));
                subscriptions.push({
                    subscribable: subscr,
                    dragbar: $dragBar
                });
            }
            else if (resizeHandles === 's') {
                var $dragBar = $.fn.constructor('<div>', {
                    class: 'dx-dragbar-s',
                    ondragover: 'event.stopPropagation();',
                    ondrop: 'event.stopPropagation();',
                    css: {
                        width: layoutItem.width()
                    }
                }).appendTo($element);
                var subscr = layoutItem.width.subscribe(val => {
                    $dragBar.css('width', val);
                });
                on($dragBar.get(0), mouseDownHandlerKey, createVResizeHandler(layoutItem, getWidgetContainer, $element, $dragBar));
                subscriptions.push({
                    subscribable: subscr,
                    dragbar: $dragBar
                });
            }
        };
        if (ko.isSubscribable(layoutItem.resizeHandles)) {
            (layoutItem.resizeHandles).subscribe(createResizeDragBars);
        }
        createResizeDragBars(layoutItem.resizeHandles());
        ko.utils.domNodeDisposal.addDisposeCallback(element, unsubscribe);
    }
};
