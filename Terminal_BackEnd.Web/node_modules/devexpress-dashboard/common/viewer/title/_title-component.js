/**
* DevExpress Dashboard (_title-component.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { closest } from '../../../data/_jquery-helpers';
import { DisposableObject } from '../../../model/disposable-object';
import { DashboardTitleToolbar } from '../../../viewer-parts/widgets/caption-toolbar/_title-toolbar';
export class DashboardTitleContext extends Disposable {
    constructor(encodeHtml, findExtension, allowExport = true, viewerApi) {
        super();
        this.parametersExtension = ko.pureComputed(() => findExtension('dashboardParameterDialog'));
        this.exportExtension = ko.pureComputed(() => allowExport ? findExtension('dashboardExport') : null);
        this.viewerApi = viewerApi;
        this.addDisposable(this.exportExtension);
        this.addDisposable(this.parametersExtension);
    }
}
export class DashboardTitleComponent extends DisposableObject {
    constructor(params, container, controlContainer) {
        super();
        this.params = params;
        this.container = container;
        this.controlContainer = controlContainer;
    }
    initialize() {
        let toolbar = new DashboardTitleToolbar(this.container, this.controlContainer, this.container, this.params.encodeHtml, this.params.options().allowHideEmptyToolbar, this.params.className);
        toolbar.update(this.params.options().toolbarOptions, this.params.options().centerAligned);
        this.params.height(toolbar.calcHeight(this.params.options().toolbarOptions));
        this.toDispose(toolbar);
        this.toDispose(this.params.options.subscribe(newOptions => {
            if (newOptions) {
                toolbar.update(newOptions.toolbarOptions, newOptions.centerAligned);
                this.params.height(toolbar.calcHeight(newOptions.toolbarOptions));
            }
        }));
        this.toDispose(this.params.width.subscribe(newValue => toolbar.onResize()));
    }
}
ko.components.register('dashboard-title', {
    viewModel: {
        createViewModel: function ({ componentArgs }, componentInfo) {
            let element = componentInfo.element;
            let titleComponent = new DashboardTitleComponent(componentArgs, element.querySelector('.dx-dashboard-title'), closest(element, '.dx-dashboard-widget-container'));
            titleComponent.initialize();
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                titleComponent.dispose();
            });
        }
    },
    template: "<div class='dx-dashboard-title'></div>"
});
