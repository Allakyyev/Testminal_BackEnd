/**
* DevExpress Dashboard (_map-item-viewer-adapter.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { geoPointMapItemBase } from '../../../viewer-parts/viewer-items/_geo-point-map-item-base';
import { DataItemViewerAdapter } from './_data-item-viewer-adapter';
export class MapItemViewerAdapter extends DataItemViewerAdapter {
    updateItemContent(content) {
        this.item.isViewportLocked = this.dashboardItem.lockNavigation();
        super.updateItemContent(content);
        if (this.dashboardItem._clientState()) {
            this.item.updateClientState(this.dashboardItem._clientState());
        }
    }
    createDashboardViewerItem(element, content, dashboardItem) {
        var viewerItem = super.createDashboardViewerItem(element, content, dashboardItem);
        viewerItem.isInitialExtentChanged = dashboardItem._initialExtentChanged();
        if (dashboardItem._clientState()) {
            viewerItem.updateClientState(this.dashboardItem._clientState());
        }
        viewerItem.initialDataRequest();
        if (viewerItem instanceof geoPointMapItemBase) {
            viewerItem.forceUpdateClientState();
        }
        return viewerItem;
    }
    attachToModel(viewerItem, dataDashboardItem) {
        super.attachToModel(viewerItem, dataDashboardItem);
        viewerItem.clientStateUpdate.add(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.dataRequest.add(dataDashboardItem._processDataRequest);
        this.modelSubscriptions.push(dataDashboardItem._initialExtentChanged.subscribe(newValue => {
            viewerItem.isInitialExtentChanged = newValue;
            if (!viewerItem.isInitialExtentChanged) {
                if (this._isDesignMode) {
                    let fullViewport = viewerItem.options.FullViewport;
                    viewerItem.onInitialExtent(fullViewport);
                    dataDashboardItem.viewport._set(fullViewport, true);
                }
                else {
                    viewerItem.onInitialExtent();
                }
            }
            viewerItem.updateCaptionToolbar();
        }));
        viewerItem.viewportChangedCallback = (viewport) => {
            if (this._isDesignMode) {
                dataDashboardItem.viewport._set(viewport, false);
            }
        };
        viewerItem.initialExtentChanged = (changed) => {
            dataDashboardItem._initialExtentChanged(changed);
        };
    }
    detachFromModel(viewerItem, dataDashboardItem) {
        super.detachFromModel(viewerItem, dataDashboardItem);
        viewerItem.viewportChangedCallback = null;
        viewerItem.initialExtentChanged = null;
        viewerItem.clientStateUpdate.remove(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.dataRequest.remove(dataDashboardItem._processDataRequest);
    }
    resume() {
        super.resume();
        this.item.initialDataRequest();
    }
}
