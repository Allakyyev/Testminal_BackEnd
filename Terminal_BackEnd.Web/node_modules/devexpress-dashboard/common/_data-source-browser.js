/**
* DevExpress Dashboard (_data-source-browser.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { TableQuery } from '@devexpress/analytics-core/analytics-data';
import { Disposable, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { createJQueryDeferred, jqueryWhen, jqueryWhenArray } from '../data/_jquery-helpers';
import { DataField } from '../model/data-sources/_data-field';
import { EFDataSource } from '../model/data-sources/ef-data-source';
import { FederationDataSource } from '../model/data-sources/federation-data-source';
import { MongoDBDataSource } from '../model/data-sources/mongodb-data-source';
import { ObjectDataSource } from '../model/data-sources/object-data-source';
import { SqlDataSource } from '../model/data-sources/sql-data-source';
import { toStringArray, tryConvertToDateTime } from '../model/internal/_date-utils';
import { subscribeArrayChange } from '../model/internal/_knockout-utils';
export function patchCalcFieldPath(dataSource, calculatedField, fieldName) {
    if (fieldName.indexOf('Parameters.Parameters.') === 0) {
        return 'Parameters.' + fieldName.split('.')[2];
    }
    if (dataSource instanceof SqlDataSource) {
        var query = dataSource.queries().filter(query => query.name() === calculatedField.dataMember())[0];
        if (!!query && query instanceof TableQuery) {
            var table = query.tables().filter(table => fieldName.indexOf((table.alias() || table.name()) + '.') === 0)[0];
            if (!!table) {
                return trimLeadingPathElement(fieldName, table.alias() || table.name());
            }
        }
    }
    return fieldName;
}
export function trimLeadingPathElement(path = '', element) {
    var str = path;
    if (path.indexOf(element) === 0) {
        str = path.substring(element.length);
    }
    return str[0] === '.' ? str.substring(1) : str;
}
export function splitFullFieldName(fullFieldName) {
    let parts = fullFieldName.split('.');
    return {
        path: parts.slice(0, parts.length - 1).join('.'),
        name: parts[parts.length - 1] || ''
    };
}
export function isStartedWith(path, value) {
    return path.indexOf(value) === 0 && (path.length === value.length || path[value.length] === '.');
}
export function findDataMember(dataSource, path) {
    var dataMember = '';
    var fieldPath = path;
    if (dataSource instanceof SqlDataSource) {
        let query = dataSource.queries().filter(q => isStartedWith(path, q.name()))[0];
        if (!!query) {
            dataMember = query.name();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof EFDataSource) {
        let table = dataSource._tables().filter(t => isStartedWith(path, t.dataMember()))[0];
        if (!!table) {
            dataMember = table.dataMember();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof FederationDataSource) {
        let query = dataSource.queries().filter(q => isStartedWith(path, q.alias()))[0];
        if (!!query) {
            dataMember = query.alias();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof MongoDBDataSource) {
        let query = dataSource.queries().filter(q => isStartedWith(path, q._actualName()))[0];
        if (!!query) {
            dataMember = query._actualName();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    return {
        dataMember: dataMember,
        fieldPath: fieldPath
    };
}
export function getFirstDataMember(dataSource) {
    if (dataSource instanceof SqlDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0].name();
    }
    else if (dataSource instanceof EFDataSource && dataSource._tables().length > 0) {
        return dataSource._tables()[0].dataMember();
    }
    else if (dataSource instanceof FederationDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0].alias();
    }
    else if (dataSource instanceof MongoDBDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0]._actualName();
    }
    else if (dataSource instanceof ObjectDataSource)
        return undefined;
    throw new Error();
}
export class DataSourceBrowser extends Disposable {
    constructor(_dataSources, isDesignMode, parameters, _serviceClient, isLoading = ko.observable(false)) {
        super();
        this._dataSources = _dataSources;
        this.isDesignMode = isDesignMode;
        this.parameters = parameters;
        this._serviceClient = _serviceClient;
        this.isLoading = isLoading;
        this._dynamicParametersValueCache = {};
        this._dimensionValuesCache = {};
        this._fieldsCache = {};
        this.removeDataSource = (dataSource) => {
            this._dataSources.remove(dataSource);
            this.clearFieldsCache(dataSource.componentName());
        };
        if (isDesignMode()) {
            this._subscribeDataSources();
        }
        this._disposables.push(this.isDesignMode.subscribe(isDesignMode => {
            if (isDesignMode) {
                this._subscribeDataSources();
            }
            else {
                this._unsubscribeDataSources();
            }
        }));
    }
    _cacheNestedFields(path, field) {
        if (field.childNodes().length > 0 && !!field.childNodes()[0].dataMember()) {
            var nestedPath = !!path ? path + '.' + field.dataMember() : field.dataMember();
            this._fieldsCache[nestedPath] = createJQueryDeferred().resolve(field.childNodes()).promise();
            field.childNodes().forEach(member => this._cacheNestedFields(nestedPath, member));
        }
    }
    _findInFieldsCache(dataSourceName, dataMemberName, fieldName, constraint, separateGroupFields) {
        var deferred = createJQueryDeferred();
        var result = { path: '', field: undefined };
        var keys = Object.keys(this._fieldsCache);
        var fieldPath = dataMemberName ? [dataSourceName, dataMemberName].join('.') : dataSourceName;
        var i = 0;
        var findPromises = [];
        while (!result.field && i < keys.length) {
            var path = keys[i];
            if (path === fieldPath || path.indexOf(fieldPath + '.') === 0) {
                var a = (notClosuredPath, notClosuredFieldPath) => {
                    return (fields) => {
                        let filteredFields = fields.filter(isNonCollectionDataField);
                        for (let i = 0; i < filteredFields.length; i++) {
                            let field = filteredFields[i];
                            var foundField = field.dataMember() === fieldName && constraint(field) ? field : undefined;
                            var groupDataItems = field['groupDataItems'];
                            if ((!foundField || separateGroupFields) && !!groupDataItems && groupDataItems.length > 0) {
                                let foundGroupField = groupDataItems.filter((groupField) => groupField.dataMember() === fieldName)[0];
                                if (foundGroupField) {
                                    foundField = separateGroupFields ? foundGroupField : field;
                                }
                            }
                            if (!!foundField) {
                                result.path = notClosuredPath.substr(notClosuredFieldPath.length).split('.').filter(item => !!item).join('.');
                                result.field = foundField;
                                deferred.resolve(result);
                                break;
                            }
                        }
                    };
                };
                findPromises.push(this._fieldsCache[path].done(a(path, fieldPath)));
            }
            i++;
        }
        jqueryWhenArray(findPromises).done(function () {
            if (!result.field) {
                deferred.resolve(result);
            }
        });
        return deferred.promise();
    }
    getDimensionFilterItems(dashboardItem, dimensionDataMember, previousState, branch) {
        var deferred = createJQueryDeferred();
        var result = deferred.promise();
        if (!!dashboardItem && !!dimensionDataMember) {
            this._serviceClient.peek().getDimensionFilterItems(dashboardItem, dimensionDataMember, previousState, branch).done((list) => {
                deferred.resolve(list);
            }).fail(() => {
                deferred.resolve([]);
            });
        }
        else {
            deferred.resolve([]);
        }
        return result;
    }
    getDimensionFilterString(dashboardItem, dimensionDataMember, previousState) {
        var deferred = createJQueryDeferred();
        var result = deferred.promise();
        if (!!dashboardItem && !!dimensionDataMember) {
            this._serviceClient.peek().getDimensionFilterString(dashboardItem, dimensionDataMember, previousState).done((filterString) => {
                deferred.resolve(filterString);
            }).fail(() => {
                deferred.resolve('');
            });
        }
        else {
            deferred.resolve('');
        }
        return result;
    }
    getDataFieldsArray(dataSourceName, dataMember, fieldPath, filterDelegate = () => true) {
        var id = !!dataMember ? [dataSourceName, dataMember].join('.') : dataSourceName;
        id = !!fieldPath ? [id, fieldPath].join('.') : id;
        var dataSource = this.findDataSource(dataSourceName);
        if (!dataSource) {
            return createJQueryDeferred().resolve([]).promise();
        }
        dataSource.calculatedFields().forEach(calcField => {
            var expression = calcField.expression();
            var fieldType = calcField.fieldType();
            var name = calcField.name();
        });
        var result = createJQueryDeferred();
        var parentRequests = Object.keys(this._fieldsCache)
            .filter(cachedKey => id.indexOf(cachedKey) === 0)
            .map(cachedKey => this._fieldsCache[cachedKey]);
        if (parentRequests.length === 0) {
            parentRequests = [createJQueryDeferred().resolve().promise()];
        }
        jqueryWhenArray(parentRequests).done(() => {
            var cachedValue = this._fieldsCache[id];
            if (cachedValue) {
                cachedValue.done((dataFields) => {
                    result.resolve(dataFields.filter(filterDelegate));
                });
            }
            else {
                if (!!dataSourceName && !!dataSource && !!this._serviceClient) {
                    let valueToCache = createJQueryDeferred();
                    this._fieldsCache[id] = valueToCache.promise();
                    setTimeout(() => {
                        this._serviceClient.peek().getFieldList(dataSource, dataMember, fieldPath).done((list) => {
                            var members = [];
                            (list || []).forEach(field => {
                                var dataField = new DataField(field);
                                members.push(dataField);
                                this._cacheNestedFields(id, dataField);
                            });
                            if (!fieldPath) {
                                members = members
                                    .sort((f1, f2) => f1.displayName().localeCompare(f2.displayName()));
                            }
                            valueToCache
                                .resolve(members)
                                .done((dataFields) => result.resolve(dataFields.filter(filterDelegate)));
                        }).fail(() => {
                            valueToCache
                                .resolve([])
                                .done(dataFields => {
                                result.resolve(dataFields);
                            });
                        });
                    }, 1);
                }
                else {
                    result.resolve([]);
                }
            }
        });
        return result.promise();
    }
    isFolder(path) {
        return !!this._fieldsCache[path];
    }
    findPathToFieldInTree(dataSourceName, dataMemberName, fieldName, constraint) {
        var deferred = createJQueryDeferred();
        this.getDataFieldsArray(dataSourceName, dataMemberName, '', isNonCollectionDataField).done(() => {
            this._findInFieldsCache(dataSourceName, dataMemberName, fieldName, constraint, false).done(info => deferred.resolve(info.path));
        });
        return deferred.promise();
    }
    findDataField(dataSourceName, dataMemberName, fullFieldName, separateGroupFields = false) {
        var deferred = createJQueryDeferred();
        let dataSource = this._dataSources().filter(ds => ds.componentName() === dataSourceName)[0];
        let info = {
            path: '',
            name: fullFieldName
        };
        if (dataSource instanceof ObjectDataSource || dataSource instanceof EFDataSource) {
            info = splitFullFieldName(fullFieldName);
        }
        this.getDataFieldsArray(dataSourceName, dataMemberName, info.path, isNonCollectionDataField).done(() => {
            this._findInFieldsCache(dataSourceName, dataMemberName, fullFieldName, (field) => true, separateGroupFields).done(info => deferred.resolve(info.field));
        });
        return deferred.promise();
    }
    fuzzyFindFields(startPath, searchFor) {
        var deferred = createJQueryDeferred(), result = [], findPromises = [];
        var strContains = (str, substr) => str.toLowerCase().indexOf(substr.toLowerCase()) !== -1;
        Object.keys(this._fieldsCache).forEach(path => {
            if (path === startPath || path.indexOf(startPath + '.') === 0) {
                findPromises.push(this._fieldsCache[path].done(fields => {
                    fields
                        .filter(field => isNonCollectionDataField)
                        .filter(field => strContains(field.dataMember(), searchFor) || strContains(field.displayName(), searchFor))
                        .forEach(field => result.push({ path: path, field: field }));
                }));
            }
        });
        jqueryWhenArray(findPromises).done(() => deferred.resolve(result));
        return deferred.promise();
    }
    findDataSource(dsName) {
        return this._dataSources().filter(ds => ds.componentName() === dsName)[0];
    }
    dataMembersSupported(dsc) {
        var dataSource = dsc && this.findDataSource(dsc.dataSource()) || null;
        return dataSource && dataSource.supportDataMembers;
    }
    getDataFields(dsc) {
        var result = ko.observableArray();
        if (dsc) {
            this.getDataFieldsArray(dsc.dataSource(), dsc.dataMember(), '', isNonCollectionDataField).done((members) => {
                result(members.map(member => member.displayName()));
            });
        }
        return result;
    }
    clearFieldsCache(path) {
        Object.keys(this._fieldsCache).forEach(key => {
            if (key === path || key.indexOf(path + '.') === 0) {
                delete this._fieldsCache[key];
            }
        });
    }
    clearDynamicParametersValueCache() {
        this._dynamicParametersValueCache = {};
    }
    clearDimensionValuesCache() {
        this._dimensionValuesCache = {};
    }
    initDataSource(dataSource) {
        if (dataSource instanceof SqlDataSource) {
            this._fieldsCache[dataSource.componentName()] = createJQueryDeferred().resolve(dataSource.queries().map((query) => {
                let queryField = new DataField({ 'DataMember': query.name(), 'Name': query.name(), 'DisplayName': query.name() });
                queryField.hasCalculatedFields = true;
                queryField.isDataSourceNode(true);
                return queryField;
            })).promise();
        }
        else if (dataSource instanceof EFDataSource) {
            this.isLoading(true);
            this.getDataFieldsArray(dataSource.componentName(), '', '', isNonCollectionDataField).done(members => {
                dataSource._tables(members);
                this.isLoading(false);
            });
        }
    }
    getParameterValues(parameterType, dynamicListLookUpSettings) {
        var dsc = dynamicListLookUpSettings;
        var valueMember = dynamicListLookUpSettings.valueMemberName();
        var displayMember = dynamicListLookUpSettings.displayMemberName() || valueMember;
        var sortOrder = dynamicListLookUpSettings.sortOrder();
        var sortByMember = dynamicListLookUpSettings.sortByMember();
        var selectedValues = '';
        if (this.parameters) {
            selectedValues = this.parameters.peek()
                .map(p => {
                return {
                    name: p.name(),
                    value: toStringArray(p._actualValue.peek())
                };
            })
                .sort((p1, p2) => p1.name.localeCompare(p2.name))
                .reduce((acc, param) => {
                let value = `${param.name}:${param.value instanceof Array ? param.value.slice().sort().join('|') : param.value}`;
                return !!acc ? `${acc},${value}` : value;
            }, '');
        }
        var key = [parameterType, dsc.dataSource(), dsc.dataMember(), valueMember, displayMember, sortOrder, sortByMember, selectedValues].join('.');
        var parameterValues = this._dynamicParametersValueCache[key];
        if (!parameterValues) {
            parameterValues = ko.observableArray();
            if (!!valueMember && !!displayMember) {
                this._dynamicParametersValueCache[key] = parameterValues;
                this._serviceClient.peek().getParameterValues(dsc.dataSource(), this.findDataSource(dsc.dataSource()), dsc.dataMember(), valueMember, displayMember, sortOrder, sortByMember, parameterType)
                    .done((result) => {
                    parameterValues(result ? result.map(value => ({
                        Value: tryConvertToDateTime(value.Value),
                        DisplayText: value.DisplayText
                    })) : undefined);
                    this.dynamicLookUpValuesLoaded && this.dynamicLookUpValuesLoaded(dynamicListLookUpSettings);
                });
            }
        }
        return parameterValues;
    }
    getDimensionUniqueValues(dataSourceName, dataMember, dimension) {
        var def = createJQueryDeferred();
        var key = 'DataSource=' + dataSourceName
            + 'DataMember=' + dataMember
            + 'Dimension=' + JSON.stringify(new ModelSerializer({ useRefs: false }).serialize(dimension));
        var dimensionValues = this._dimensionValuesCache[key];
        if (!dimensionValues) {
            dimensionValues = ko.observableArray();
            var dataSource = this.findDataSource(dataSourceName);
            if (!!dataSource && !!dimension) {
                this._dimensionValuesCache[key] = dimensionValues;
                this._serviceClient.peek().getDimensionUniqueValues(dataSource, dataMember, dimension)
                    .done((result) => {
                    if (Array.isArray(result))
                        result = result.map(val => tryConvertToDateTime(val));
                    dimensionValues(result);
                    def.resolve(dimensionValues());
                });
            }
        }
        else {
            def.resolve(dimensionValues());
        }
        return def.promise();
    }
    splitFullPath(fullPath = '') {
        var dataSource = '';
        var dataSourceObj = this._dataSources().filter(ds => isStartedWith(fullPath, ds.componentName()))[0];
        if (!!dataSourceObj) {
            dataSource = dataSourceObj.componentName();
        }
        var { dataMember, fieldPath } = findDataMember(dataSourceObj, trimLeadingPathElement(fullPath, dataSource));
        return {
            dataSource: dataSource,
            dataMember: dataMember,
            fieldPath: fieldPath
        };
    }
    _subscribeDataSources() {
        this._dataSources().forEach(dataSource => {
            this.initDataSource(dataSource);
        });
        this._dataSourcesSubscription = subscribeArrayChange(this._dataSources, {
            added: ds => this.initDataSource(ds),
            deleted: ds => this.clearFieldsCache(ds.componentName())
        });
        this._disposables.push(this._dataSourcesSubscription);
    }
    _unsubscribeDataSources() {
        if (this._dataSourcesSubscription) {
            this._disposables.splice(this._disposables.indexOf(this._dataSourcesSubscription), 1);
            this._dataSourcesSubscription.dispose();
            this._dataSourcesSubscription = undefined;
            this._dataSources().forEach(dataSource => {
                this.clearFieldsCache(dataSource.componentName());
            });
        }
    }
    dispose() {
        super.dispose();
        this.dynamicLookUpValuesLoaded = null;
        this.removeProperties();
    }
}
export function isNonCollectionDataField(dataField) {
    if (!dataField)
        return;
    let nodeType = ko.unwrap(dataField.nodeType);
    let childNodes = ko.unwrap(dataField.childNodes);
    let isList = dataField.isList && ko.unwrap(dataField.isList);
    return !(nodeType === 'DataMember' && isList);
}
export function getDataFields(fieldsNames, dataSource, dataMember, dataFieldProvider) {
    var deferred = createJQueryDeferred();
    const promises = fieldsNames.map(field => dataFieldProvider.findDataField(dataSource, dataMember, field, true));
    jqueryWhen(...promises).done((...fields) => {
        deferred.resolve(fields.filter(field => !!field));
    });
    return deferred.promise();
}
