/**
* DevExpress Dashboard (_base-metadata.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { parseBool as AnalyticsParseBool } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { fromUtcDateToString, toUtcDate } from '../internal/_date-utils';
export let NotSupportedProperty = 'NotSupportedProperty';
function testCast() {
    var a = { propertyName: '123' };
    var b = a;
    return b;
}
export var PropertyCategory;
(function (PropertyCategory) {
    PropertyCategory[PropertyCategory["ClientState"] = 0] = "ClientState";
    PropertyCategory[PropertyCategory["Data"] = 1] = "Data";
    PropertyCategory[PropertyCategory["Interactivity"] = 2] = "Interactivity";
    PropertyCategory[PropertyCategory["ViewModel"] = 3] = "ViewModel";
    PropertyCategory[PropertyCategory["Map"] = 4] = "Map";
    PropertyCategory[PropertyCategory["Initialize"] = 5] = "Initialize";
    PropertyCategory[PropertyCategory["Coloring"] = 6] = "Coloring";
    PropertyCategory[PropertyCategory["NoUpdate"] = 7] = "NoUpdate";
    PropertyCategory[PropertyCategory["NoUpdateByObservableValue"] = 8] = "NoUpdateByObservableValue";
})(PropertyCategory || (PropertyCategory = {}));
export function parseBool(value) {
    return AnalyticsParseBool(value);
}
export function floatFromModel(value) {
    return ko.observable(parseFloat(value));
}
export function fromStringToDate(val) {
    return ko.observable(toUtcDate(val));
}
export function fromDateToString(date) {
    return fromUtcDateToString(date);
}
export function nullableFloatToModel(value) {
    if (!isNaN(value))
        return JSON.stringify(value);
    return {};
}
export let integerValidationRule = {
    type: 'custom',
    validationCallback: (e) => Math.abs(Math.round(e.value) - e.value) === 0 || isNaN(e.value)
};
export let itemType = { propertyName: 'itemType', modelName: '@ItemType', defaultVal: '' };
export let componentName = { propertyName: 'componentName', modelName: '@ComponentName', displayName: 'DashboardWebStringId.Dashboard.ComponentName', simpleFormAdapterItem: 'textBoxEditor' };
export let url = { propertyName: 'url', modelName: '@RequestUrl' };
export let name = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor' };
export let name_ViewModel = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor', category: PropertyCategory.ViewModel };
export let nameTag = { propertyName: 'name', modelName: 'Name' };
export let dataMember = { propertyName: 'dataMember', modelName: '@DataMember', displayName: 'DashboardStringId.DataSourceDataMember', simpleFormAdapterItem: 'textBoxEditor' };
export let filter = { propertyName: 'filter', modelName: 'Filter' };
export let contentArrangementMode = {
    propertyName: 'contentArrangementMode', modelName: '@ContentArrangementMode', displayName: 'DashboardWebStringId.Cards.ArrangementMode', defaultVal: 'Auto', simpleFormAdapterItem: 'listEditor', values: {
        'Auto': 'DashboardWebStringId.Cards.ArrangementMode.Auto',
        'FixedRowCount': 'DashboardWebStringId.Cards.ArrangementMode.FixedRows',
        'FixedColumnCount': 'DashboardWebStringId.Cards.ArrangementMode.FixedColumns'
    }
};
export let contentLineCount = {
    propertyName: 'contentLineCount',
    modelName: '@ContentLineCount',
    displayName: 'DashboardWebStringId.Cards.LineCount',
    defaultVal: 3,
    simpleFormAdapterItem: 'numberBoxEditor',
    from: floatFromModel,
    editorOptions: { min: 1 },
    validationRules: [integerValidationRule]
};
export let BindingSectionTitles = {
    Arguments: 'DashboardStringId.DescriptionArguments',
    SingleArgument: 'DashboardWebStringId.Binding.Argument',
    SeriesDimension: 'DashboardStringId.DescriptionSeries'
};
export let columnsPropertyName = '__columns';
export let rowsPropertyName = '__rows';
export let argumentsPropertyName = '__arguments';
export let valuesPropertyName = '__values';
export let argumentPropertyName = '__argument';
export let valuePropertyName = '__value';
export let actualValuePropertyName = '__actualValue';
export let targetValuePropertyName = '__targetValue';
export let sparklineArgumentPropertyName = '__sparklineArgument';
export let weightPropertyName = '__weight';
export let colorPropertyName = '__color';
