/**
* DevExpress Dashboard (card-layout-template.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { SerializableModel } from '../../serializable-model';
import { autofitTemplateSerializationInfo, customTemplateSerializationInfo, deltaCompactTemplateSerializationInfo, nameValueTemplateSerializationInfo, templateSerializationInfo } from './metadata/_card-layout-template';
var cardLayoutTypes = {
    Stretched: 'Stretched',
    Centered: 'Centered',
    Compact: 'Compact',
    Lightweight: 'Lightweight',
    Custom: 'Custom',
    None: 'None'
};
var cardLayoutTemplateNames = {
    Stretched: 'DashboardStringId.CardLayoutTemplateStretchedCaption',
    Centered: 'DashboardStringId.CardLayoutTemplateCenteredCaption',
    Compact: 'DashboardStringId.CardLayoutTemplateCompactCaption',
    Lightweight: 'DashboardStringId.CardLayoutTemplateLightweightCaption',
    Custom: 'DashboardStringId.CardLayoutTemplateCustomCaption',
    None: 'DashboardStringId.CardLayoutTemplateNoneCaption'
};
export class CardLayoutTemplate extends SerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return templateSerializationInfo;
    }
    _resetToDefaults() { }
    clone() {
        var clonedTemplate = this._createInstance();
        this._clone(this, clonedTemplate);
        return clonedTemplate;
    }
    _clone(target, source) {
        var serializer = new ModelSerializer();
        serializer.deserialize(source, serializer.serialize(target));
    }
}
export class CardEmptyLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.isEmpty = ko.observable(true);
        this.title = cardLayoutTemplateNames[this.getType()];
    }
    _collectProperties(dimensionNames) {
        return [];
    }
    getType() {
        return cardLayoutTypes.None;
    }
    getInfo() {
        return [];
    }
    _createInstance() {
        return this;
    }
}
export class CardCustomLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Custom);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return customTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [];
    }
    _resetToDefaults() { }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardCustomLayoutTemplate();
    }
}
export class CardCenteredLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Centered);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return deltaCompactTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.bottomSubValue1._createEditorModel(dimensionNames),
            this.bottomSubValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue._initDefault(true, 'ActualValue');
        this.bottomSubValue1._initDefault(true, 'AbsoluteVariation');
        this.bottomSubValue2._initDefault(true, 'PercentVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
        this.maxWidth(270);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardCenteredLayoutTemplate();
    }
}
export class CardStretchedLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Stretched);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return autofitTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.topValue._createEditorModel(dimensionNames),
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue1._createEditorModel(dimensionNames),
            this.bottomValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.topValue._initDefault(true, 'ActualValue');
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue1._initDefault(true, 'PercentVariation');
        this.bottomValue2._initDefault(true, 'AbsoluteVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardStretchedLayoutTemplate();
    }
}
export class CardLightweightLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Lightweight);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return nameValueTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.mainValue._initDefault(true, 'ActualValue');
        this.subValue._initDefault(true, 'Title');
        this.bottomValue._initDefault(true, 'Subtitle');
        this.deltaIndicator._initDefault(false);
        this.sparkline._initDefault(false);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardLightweightLayoutTemplate();
    }
}
export class CardCompactLayoutTemplate extends CardLayoutTemplate {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        !this.type() && this.type(cardLayoutTypes.Compact);
        this.title = cardLayoutTemplateNames[this.type()];
    }
    getInfo() {
        return deltaCompactTemplateSerializationInfo;
    }
    _collectProperties(dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.bottomSubValue1._createEditorModel(dimensionNames),
            this.bottomSubValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    }
    _resetToDefaults() {
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue._initDefault(true, 'ActualValue');
        this.bottomSubValue1._initDefault(true, 'AbsoluteVariation');
        this.bottomSubValue2._initDefault(true, 'PercentVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
        this.maxWidth(270);
    }
    getType() {
        return this.type();
    }
    _createInstance() {
        return new CardCompactLayoutTemplate();
    }
}
