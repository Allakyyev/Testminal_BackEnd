/**
* DevExpress Dashboard (card-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ModelSerializer, deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import { CardWindowDefinition } from '../../data-item/window-definition/card-calc-window-definition';
import { collectionItemType } from '../../internal/_utils';
import { itemTypesMap } from '../../serializable-model';
import { KpiItem } from '../kpi/kpi-item';
import { Card } from './card';
import { cardDashboardItemSerializationsInfo, cardSparklineArgument } from './metadata/_card-item';
export class CardItem extends KpiItem {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.cards = deserializeArray(modelJson.Cards, (item) => new Card(this, item, serializer));
        this._attachDataItem(this, cardSparklineArgument.propertyName);
    }
    _getInfoCore() {
        return cardDashboardItemSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.cards);
        this.cards.removeAll();
    }
    _getDefaultItemType() {
        return 'Card';
    }
    _getLayersCount() {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.cards().length : 0;
    }
    _getLayerName() {
        return this._getDataItemContainerDisplayName(this.cards()[this._selectedElementIndex() || 0]);
    }
    _getDefaultCalculationWindowDefinition() {
        return new CardWindowDefinition();
    }
    _itemInteractivityByColumnAxis() {
        return false;
    }
    _getInteractivityAxisDimensionCount() {
        return this.seriesDimensions().length;
    }
    _conditionFormattingExpressionEditorFilter(dataItem) {
        let isHiddenMeasure = this.hiddenMeasures().filter(hm => hm.uniqueName() === dataItem.uniqueName()).length > 0;
        let isSeriesDimension = this.seriesDimensions().filter(sd => sd.uniqueName() === dataItem.uniqueName()).length > 0;
        return isHiddenMeasure || isSeriesDimension;
    }
}
__decorate([
    collectionItemType('Card')
], CardItem.prototype, "cards", void 0);
itemTypesMap['Card'] = { type: CardItem, groupName: 'common', title: 'DashboardStringId.DefaultNameCardItem', index: 60 };
