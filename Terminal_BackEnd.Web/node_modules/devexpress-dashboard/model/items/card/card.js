/**
* DevExpress Dashboard (card.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { DataField } from '../../data-sources/_data-field';
import { KpiElement } from '../kpi/kpi-element';
import { CardCenteredLayoutTemplate, CardCompactLayoutTemplate, CardCustomLayoutTemplate, CardEmptyLayoutTemplate, CardLightweightLayoutTemplate, CardStretchedLayoutTemplate } from './card-layout-template';
import { cardSerializationsInfo } from './metadata/_card';
var emptyCardTemplate = new CardEmptyLayoutTemplate();
export class Card extends KpiElement {
    constructor(dataItemProvider, modelJson = {}, serializer) {
        super(dataItemProvider, modelJson, serializer);
        this.layoutTemplate = ko.observable();
        this.addDisposable(ko.computed(() => {
            this.__targetValue._specifics.skipFormatting = !!this.__actualValue.uniqueName();
        }));
        this.layoutTemplate(Card._createTemplate(modelJson.LayoutTemplate, serializer));
    }
    static _createTemplate(jsonModel, serializer = new ModelSerializer()) {
        return jsonModel ? new Card.templateTypes[jsonModel['@Type']](jsonModel, serializer) : emptyCardTemplate;
    }
    _getInfoCore() {
        return cardSerializationsInfo;
    }
    _isTypeEmpty() {
        return this.layoutTemplate().getType() === emptyCardTemplate.getType();
    }
    _setTemplateSwitchingOptions(newTemplate) {
        if (this._isTypeEmpty()) {
            this._switchToCardDeltaOptions();
        }
        else if (newTemplate.getType() === emptyCardTemplate.getType()) {
            this._switchToKpiDeltaOptions();
        }
        this.layoutTemplate(newTemplate);
    }
    _switchToCardDeltaOptions() {
        this.cardDeltaOptions.resultIndicationMode(this.deltaOptions.resultIndicationMode());
        this.cardDeltaOptions.resultIndicationThreshold(this.deltaOptions.resultIndicationThreshold());
        this.cardDeltaOptions.resultIndicationThresholdType(this.deltaOptions.resultIndicationThresholdType());
    }
    _switchToKpiDeltaOptions() {
        this.deltaOptions.resultIndicationMode(this.cardDeltaOptions.resultIndicationMode());
        this.deltaOptions.resultIndicationThreshold(this.cardDeltaOptions.resultIndicationThreshold());
        this.deltaOptions.resultIndicationThresholdType(this.cardDeltaOptions.resultIndicationThresholdType());
    }
    _getDefaultItemType() { return 'Card'; }
    _getBindingModel() {
        let baseModel = super._getBindingModel();
        baseModel.forEach(property => property.fieldConstraint = (dataField) => !DataField.isMeasure(dataField) || DataField.isNumeric(dataField));
        return baseModel;
    }
}
Card.templateTypes = {
    Stretched: CardStretchedLayoutTemplate,
    Centered: CardCenteredLayoutTemplate,
    Compact: CardCompactLayoutTemplate,
    Lightweight: CardLightweightLayoutTemplate,
    Custom: CardCustomLayoutTemplate
};
