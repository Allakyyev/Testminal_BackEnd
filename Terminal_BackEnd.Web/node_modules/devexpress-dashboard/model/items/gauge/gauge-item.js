/**
* DevExpress Dashboard (gauge-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { deserializeArray, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { GaugeWindowDefinition } from '../../data-item/window-definition/gauge-calc-window-definition';
import { collectionItemType } from '../../internal/_utils';
import { itemTypesMap } from '../../serializable-model';
import { KpiItem } from '../kpi/kpi-item';
import { Gauge } from './gauge';
import { gaugeDashboardItemSerializationsInfo } from './metadata/_gauge-item';
export class GaugeItem extends KpiItem {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.gauges = deserializeArray(modelJson.Gauges, (item) => new Gauge(this, item, serializer));
    }
    _clearBindings() {
        super._clearBindings();
        this.gauges.removeAll();
    }
    _itemInteractivityByColumnAxis() {
        return false;
    }
    _getInteractivityAxisDimensionCount() {
        return this.seriesDimensions().length;
    }
    _getInfoCore() {
        return gaugeDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Gauge';
    }
    _getLayersCount() {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.gauges().length : 0;
    }
    _getLayerName() {
        return this._getDataItemContainerDisplayName(this.gauges()[this._selectedElementIndex() || 0]);
    }
    _getDefaultCalculationWindowDefinition() {
        return new GaugeWindowDefinition();
    }
}
__decorate([
    collectionItemType('GaugeElement')
], GaugeItem.prototype, "gauges", void 0);
itemTypesMap['Gauge'] = { type: GaugeItem, groupName: 'common', title: 'DashboardStringId.DefaultNameGaugeItem', index: 70 };
