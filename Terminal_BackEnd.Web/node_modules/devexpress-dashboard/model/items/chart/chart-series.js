/**
* DevExpress Dashboard (chart-series.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { DataItemContainer } from '../data-item-container';
import { chartSeriesValue, chartSeriesWeight, close, high, highLowCloseSeriesSerializationsInfo, low, open, openHighLowCloseSeriesSerializationsInfo, rangeSeriesSerializationsInfo, simpleSeriesSerializationsInfo, value1, value2, weightedSeriesSerializationsInfo } from './metadata/_chart-series';
export class ChartSeries extends DataItemContainer {
    constructor(seriesJSON, serializer) {
        super(seriesJSON, serializer);
    }
    _getInfoCore() {
        throw new Error("Method 'getInfo' is not implemented.");
    }
    grabFrom(series) {
        super.grabFrom(series);
        this.plotOnSecondaryAxis(series.plotOnSecondaryAxis());
        this.ignoreEmptyPoints(series.ignoreEmptyPoints());
        this.showPointMarkers(series.showPointMarkers());
        this.ignoreEmptyPoints(series.ignoreEmptyPoints());
        this.pointLabelOptions.grabFrom(series.pointLabelOptions);
    }
    _getDataId() {
        const defaultMeasure = this._measures[0];
        return defaultMeasure && defaultMeasure.uniqueName() || null;
    }
}
export class SimpleSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, chartSeriesValue.propertyName);
    }
    _getBindingModel() {
        return [{
                propertyName: chartSeriesValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ValueCaption'
            }];
    }
    _getContainerType() {
        return this.seriesType();
    }
    _getInfoCore() {
        return simpleSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Simple';
    }
    get _measures() { return [this.value()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return true; }
}
export class RangeSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, value1.propertyName);
        dataItemProvider._attachDataItem(this, value2.propertyName);
    }
    _getInfoCore() {
        return rangeSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Range';
    }
    _getBindingModel() {
        return [{
                propertyName: value1.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.Value1Caption'
            }, {
                propertyName: value2.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.Value2Caption'
            }];
    }
    _getContainerType() {
        return this.seriesType();
    }
    get _measures() { return [this.value1(), this.value2()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return true; }
}
export class WeightedSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, chartSeriesWeight.propertyName);
        dataItemProvider._attachDataItem(this, chartSeriesValue.propertyName);
    }
    _getInfoCore() {
        return weightedSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Weighted';
    }
    _getBindingModel() {
        return [{
                propertyName: chartSeriesValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Chart.Value'
            }, {
                propertyName: chartSeriesWeight.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.WeightCaption'
            }];
    }
    get _measures() { return [this.value(), this.weight()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return true; }
}
export class HighLowCloseSeries extends ChartSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new ModelSerializer()) {
        super(seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, high.propertyName);
        dataItemProvider._attachDataItem(this, low.propertyName);
        dataItemProvider._attachDataItem(this, close.propertyName);
    }
    _getInfoCore() {
        return highLowCloseSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'HighLowClose';
    }
    _getBindingModel() {
        return [{
                propertyName: high.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.HighCaption'
            }, {
                propertyName: low.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.LowCaption'
            }, {
                propertyName: close.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.CloseCaption'
            }];
    }
    get _measures() { return [this.high(), this.low(), this.close()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return false; }
}
export class OpenHighLowCloseSeries extends HighLowCloseSeries {
    constructor(dataItemProvider, seriesJSON = {}, serializer = new ModelSerializer()) {
        super(dataItemProvider, seriesJSON, serializer);
        dataItemProvider._attachDataItem(this, open.propertyName);
    }
    _getInfoCore() {
        return openHighLowCloseSeriesSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'OpenHighLowClose';
    }
    _getBindingModel() {
        return [{
                propertyName: open.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.OpenCaption'
            }].concat(super._getBindingModel());
    }
    _getContainerType() {
        return this.seriesType();
    }
    get _measures() { return [this.open(), this.high(), this.low(), this.close()].filter(m => !!m); }
    get _isConditionalFormattingSupported() { return false; }
}
