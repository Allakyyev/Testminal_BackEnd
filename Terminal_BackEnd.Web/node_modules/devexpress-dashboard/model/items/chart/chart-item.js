/**
* DevExpress Dashboard (chart-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { deserializeArray, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { getLocalizationById } from '../../../data/localization/_default';
import { isDiscreteNumericScale } from '../../data-item/metadata/_dimension';
import { ChartWindowDefinition } from '../../data-item/window-definition/chart-calc-window-definition';
import { DataField } from '../../data-sources/_data-field';
import { NameGenerator } from '../../internal/_helper-classes';
import { subscribeAndPerform } from '../../internal/_knockout-utils';
import { itemTypesMap } from '../../serializable-model';
import { ChartItemBase } from '../chart-item-base';
import { ChartIndicator } from './chart-indicator';
import { ChartPane } from './chart-pane';
import { HighLowCloseSeries, OpenHighLowCloseSeries } from './chart-series';
import { chartItemSerializationInfo } from './metadata/_chart-item';
export class ChartItem extends ChartItemBase {
    constructor(dashboardItemJSON = {}, serializer = new ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.panes = deserializeArray(dashboardItemJSON.Panes || {}, (item) => new ChartPane(this, item, serializer));
        this.indicators = deserializeArray(dashboardItemJSON.Indicators || {}, (item) => new ChartIndicator(item, serializer));
        if (this.panes().length === 0) {
            this._addNewPane();
        }
        subscribeAndPerform(this.__arguments, newValue => {
            newValue.forEach((argument) => {
                argument._specifics.customDataShapingProperties = [{
                        serializationInfo: isDiscreteNumericScale,
                        filter: dataField => DataField.isNumeric(dataField)
                    }];
            });
        });
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.panes);
        this.panes.removeAll();
        this.panes.push(new ChartPane(this, {}));
    }
    _getInfoCore() {
        return chartItemSerializationInfo;
    }
    _getDefaultItemType() {
        return 'Chart';
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel.Rotated = this.rotated();
    }
    _getTargetDimensions() { return this.interactivityOptions.targetDimensions(); }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getCanColorByDimensions() { return this._coloredSeries().length > 0; }
    _getAreMeasuresColoredByDefault() {
        return this._coloredSeries().length > 1;
    }
    _getIsDimensionColoredByDefault(dimension) {
        return !!this.__seriesDimensions().filter(link => link.dataItem() === dimension)[0];
    }
    _addNewPane() {
        var pane = new ChartPane(this, { '@ItemType': 'Pane' });
        pane.name(NameGenerator.generateName(getLocalizationById('DashboardStringId.DefaultNameChartPane') + ' ', this.panes(), 'name', 1));
        this.panes.push(pane);
    }
    _coloredSeries() {
        return [].concat.apply([], this.panes().map(pane => pane.series())).filter(series => !(series instanceof HighLowCloseSeries) && !(series instanceof OpenHighLowCloseSeries));
    }
    _getDefaultCalculationWindowDefinition() {
        return new ChartWindowDefinition();
    }
}
itemTypesMap['Chart'] = { type: ChartItem, groupName: 'common', title: 'DashboardStringId.DefaultNameChartItem', index: 30 };
