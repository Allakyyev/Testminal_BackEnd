/**
* DevExpress Dashboard (_point-label-options.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { parsePointLabelContentType, serializePointLabelContentType } from '../../../enums';
import { parseBool } from '../../../metadata/_base-metadata';
export let showPointLabels = { propertyName: 'showPointLabels', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.ShowPointLablels', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: parseBool };
export let pointLabelOrientation = {
    propertyName: 'orientation', modelName: '@Orientation', displayName: 'DashboardWebStringId.Chart.Orientation', defaultVal: 'Default', simpleFormAdapterItem: 'listEditor', values: {
        'Default': 'DashboardWebStringId.Chart.Orientation.Default',
        'RotateRight': 'DashboardWebStringId.Chart.Orientation.RotateRight',
        'RotateLeft': 'DashboardWebStringId.Chart.Orientation.RotateLeft'
    }
};
export let overlappingMode = {
    propertyName: 'overlappingMode', modelName: '@OverlappingMode', displayName: 'DashboardWebStringId.Chart.OverlappingMode', defaultVal: 'Hide', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Hide': 'DashboardWebStringId.Chart.OverlappingMode.Hide',
        'None': 'DashboardWebStringId.Chart.OverlappingMode.None'
    }
};
export let pointLabelOptionsBaseSerializationsInfo = [showPointLabels, pointLabelOrientation, overlappingMode];
export let showForZeroValues = { propertyName: 'showForZeroValues', modelName: '@ShowForZeroValues', displayName: 'DashboardWebStringId.Chart.ShowZeroValues', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let position = {
    propertyName: 'position', modelName: '@Position', displayName: 'DashboardWebStringId.Chart.Position', defaultVal: 'Outside', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Outside': 'DashboardWebStringId.Chart.Position.Outside',
        'Inside': 'DashboardWebStringId.Chart.Position.Inside'
    }
};
export let contentType = {
    propertyName: 'contentType', modelName: '@ContentType', displayName: 'DashboardWebStringId.Chart.Content', defaultVal: 'None',
    from: st => ko.observable(parsePointLabelContentType(st)), toJsonObject: serializePointLabelContentType
};
export let pointLabelOptionsSerializationsInfo = pointLabelOptionsBaseSerializationsInfo.concat([showForZeroValues, position, contentType]);
