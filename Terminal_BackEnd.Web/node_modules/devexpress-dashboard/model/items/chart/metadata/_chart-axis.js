/**
* DevExpress Dashboard (_chart-axis.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { dateTimeFormat, numericFormat } from '../../../data-item/metadata/_data-item';
import { floatFromModel, integerValidationRule, parseBool } from '../../../metadata/_base-metadata';
export let reverse = { propertyName: 'reverse', modelName: '@Reverse', displayName: 'DashboardWebStringId.Chart.Reverse', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let axisVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.Visible', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let titleVisibleBaseInfo = { propertyName: 'titleVisible', modelName: '@TitleVisible', displayName: 'DashboardWebStringId.Chart.Title', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
function getInfoTitleVisible(defaultVal) { return Object.assign({ defaultVal: defaultVal }, titleVisibleBaseInfo); }
export let title = { propertyName: 'title', modelName: '@Title', displayName: 'DashboardWebStringId.Chart.TitleText', simpleFormAdapterItem: 'textBoxEditor' };
export let chartAxisSerializationsInfo = [axisVisible, reverse, title, numericFormat];
export let enableZooming = { propertyName: 'enableZooming', modelName: '@EnableZooming', displayName: 'DashboardWebStringId.Chart.EnableZooming', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let limitVisiblePoints = { propertyName: 'limitVisiblePoints', modelName: '@LimitVisiblePoints', displayName: 'DashboardWebStringId.Chart.LimitVisiblePoints', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let visiblePointsCount = { propertyName: 'visiblePointsCount', modelName: '@VisiblePointsCount', displayName: 'DashboardWebStringId.Chart.VisiblePointsCount', defaultVal: 10, simpleFormAdapterItem: 'numberBoxEditor', from: floatFromModel, validationRules: [{ type: 'range', min: 1, message: 'DashboardStringId.NumberRangeValidationMessage' }, integerValidationRule] };
export let chartAxisXSerializationsInfo = chartAxisSerializationsInfo.concat([getInfoTitleVisible(false), enableZooming, limitVisiblePoints, visiblePointsCount, dateTimeFormat]);
export let alwaysShowZeroLevelTemplate = { propertyName: 'alwaysShowZeroLevel', modelName: '@AlwaysShowZeroLevel', displayName: 'DashboardWebStringId.Chart.AlwaysShowZeroLevel', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let chartAlwaysShowZeroLevel = Object.assign({ defaultVal: true }, alwaysShowZeroLevelTemplate);
export let alwaysShowZeroLevelScatter = Object.assign({ defaultVal: false }, alwaysShowZeroLevelTemplate);
export let showGridLinesBaseInfo = { propertyName: 'showGridLines', modelName: '@ShowGridLines', displayName: 'DashboardWebStringId.Chart.GridLines', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
function getInfoShowGridLines(defaultVal) { return Object.assign({ defaultVal: defaultVal }, showGridLinesBaseInfo); }
export let logarithmic = { propertyName: 'logarithmic', modelName: '@Logarithmic', displayName: 'DashboardWebStringId.Chart.LogarithmicScale', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let logarithmicBase = {
    propertyName: 'logarithmicBase', modelName: '@LogarithmicBase', displayName: 'DashboardWebStringId.Chart.LogarithmicScaleBase', defaultVal: 'Base10', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Base2': 'DashboardWebStringId.Chart.LogarithmicScaleBase2',
        'Base5': 'DashboardWebStringId.Chart.LogarithmicScaleBase5',
        'Base10': 'DashboardWebStringId.Chart.LogarithmicScaleBase10'
    }
};
export let chartAxisYBaseSerializationsInfo = chartAxisSerializationsInfo.concat([logarithmic, logarithmicBase]);
export let chartAxisYSerializationsInfo = chartAxisYBaseSerializationsInfo.concat([chartAlwaysShowZeroLevel, getInfoTitleVisible(true), getInfoShowGridLines(true)]);
export let chartSecondaryAxisYSerializationsInfo = chartAxisYBaseSerializationsInfo.concat([chartAlwaysShowZeroLevel, getInfoTitleVisible(true), getInfoShowGridLines(false)]);
export let scatterChartAxisYSerializationsInfo = chartAxisYBaseSerializationsInfo.concat([alwaysShowZeroLevelScatter, getInfoTitleVisible(true), getInfoShowGridLines(true)]);
