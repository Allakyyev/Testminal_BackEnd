/**
* DevExpress Dashboard (tab-container-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ModelSerializer, deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { getLocalizationById } from '../../../data/localization/_default';
import { ItemState } from '../../dashboard-state';
import { NameGenerator } from '../../internal/_helper-classes';
import { subscribeWithPrev } from '../../internal/_knockout-utils';
import { collectionItemType } from '../../internal/_utils';
import { itemTypesMap } from '../../serializable-model';
import { DashboardItem } from '../dashboard-item';
import { DashboardTabPage } from './dashboard-tab-page';
import { tabContainerItemSerializationInfo } from './metadata/_tab-container-item';
export class TabContainerItem extends DashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.tabPages = deserializeArray(dashboardItemJSON.Pages, (item) => new DashboardTabPage(item, serializer));
        if (this.tabPages().length === 0) {
            this._addNewPage();
        }
        this._activeTabPage = ko.observable();
        subscribeWithPrev(this._activeTabPage, (prevPage, page) => {
            let prevPageName = prevPage && this.tabPages().indexOf(prevPage) != -1 ? prevPage.componentName() : '';
            let activePageName = page && this.tabPages().indexOf(page) != -1 ? page.componentName() : '';
            if (this._activePageChanged && (prevPageName !== activePageName || (!prevPageName && !page))) {
                this._activePageChanged(prevPageName, activePageName);
            }
        });
        this.addDisposable(this._state = ko.computed(() => {
            var state = new ItemState();
            if (this._activeTabPage() && this.tabPages().indexOf(this._activeTabPage()) !== -1) {
                state.TabPageName = this._activeTabPage().componentName();
            }
            return state;
        }));
    }
    _setState(itemState) {
        super._setState(itemState);
        if (itemState.TabPageName) {
            let page = this.tabPages().filter(page => page.componentName() === itemState.TabPageName)[0];
            if (page && (!this._activeTabPage() || this._activeTabPage().name() !== page.name())) {
                this._activeTabPage(page);
            }
        }
    }
    _getInfoCore() {
        return tabContainerItemSerializationInfo;
    }
    _getDefaultItemType() {
        return 'TabContainer';
    }
    dispose() {
        this.disposeObservableArray(this.tabPages);
        super.dispose();
    }
    _addNewPage() {
        var tabPage = new DashboardTabPage({});
        tabPage.name(NameGenerator.generateName(getLocalizationById('DashboardStringId.DefaultNameTabPage') + ' ', this.tabPages(), 'name', 1));
        this.tabPages.push(tabPage);
        return tabPage;
    }
}
__decorate([
    collectionItemType('Page')
], TabContainerItem.prototype, "tabPages", void 0);
itemTypesMap['TabContainer'] = { type: TabContainerItem, groupName: 'layout', title: 'DashboardStringId.DefaultNameTabContainerItem', index: 115 };
