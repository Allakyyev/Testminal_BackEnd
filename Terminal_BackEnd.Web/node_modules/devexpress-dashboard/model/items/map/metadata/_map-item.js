/**
* DevExpress Dashboard (_map-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { parseBool, PropertyCategory } from '../../../metadata/_base-metadata';
import { dataDashboardItemSerializationsInfo } from '../../metadata/_data-dashboard-item';
import { _masterFilterInteractivityOptionsMeta } from '../../options/interactivity-options';
import { CustomShapefile } from '../custom-shape-file';
import { MapLegend, WeightedLegend } from '../map-legend';
import { MapViewport } from '../map-viewport';
export let area = {
    propertyName: 'area', modelName: '@ShapefileArea', defaultVal: 'WorldCountries', values: {
        'WorldCountries': 'DashboardWebStringId.Map.Area.WorldCountries',
        'Europe': 'DashboardWebStringId.Map.Area.Europe',
        'Asia': 'DashboardWebStringId.Map.Area.Asia',
        'NorthAmerica': 'DashboardWebStringId.Map.Area.NorthAmerica',
        'SouthAmerica': 'DashboardWebStringId.Map.Area.SouthAmerica',
        'Africa': 'DashboardWebStringId.Map.Area.Africa',
        'USA': 'DashboardWebStringId.Map.Area.USA',
        'Canada': 'DashboardWebStringId.Map.Area.Canada',
        'Custom': 'DashboardWebStringId.Map.Area.Custom'
    }, category: PropertyCategory.Map
};
export let colorLegend = { propertyName: 'legend', modelName: 'MapLegend', displayName: 'DashboardWebStringId.Chart.Legend', type: MapLegend };
export let weightedLegend = { propertyName: 'weightedLegend', modelName: 'WeightedLegend', displayName: 'DashboardWebStringId.AccordionTab.WeightedLegend', type: WeightedLegend };
export let customShapefile = { propertyName: 'customShapefile', modelName: 'CustomShapefile', type: CustomShapefile };
export let viewport = { propertyName: 'viewport', modelName: 'ViewArea', displayName: 'DashboardWebStringId.Map.Viewport', type: MapViewport };
export let tooltipMeasures = { propertyName: '__tooltipMeasures', modelName: 'TooltipMeasures', displayName: 'DashboardWebStringId.Binding.TooltipMeasures', array: true };
export let lockNavigation = {
    propertyName: 'lockNavigation', modelName: '@LockNavigation', displayName: 'DashboardWebStringId.MapLockNavigation', defaultVal: false, simpleFormAdapterItem: 'buttonGroupEditor', valuesArray: [
        { value: true, displayValue: 'DashboardWebStringId.MapLockNavigationLocked' },
        { value: false, displayValue: 'DashboardWebStringId.MapLockNavigationUnlocked' }
    ], from: parseBool, category: PropertyCategory.ViewModel
};
export let shapeTitleAttributeName = { propertyName: 'shapeTitleAttributeName', modelName: '@ShapeTitleAttributeName', displayName: 'DashboardWebStringId.Map.ShapeTitleAttribute', defaultVal: '', category: PropertyCategory.Map };
export let mapDashboardItemSerializationsInfo = dataDashboardItemSerializationsInfo.concat([area, customShapefile, viewport, tooltipMeasures, lockNavigation, shapeTitleAttributeName, _masterFilterInteractivityOptionsMeta]);
