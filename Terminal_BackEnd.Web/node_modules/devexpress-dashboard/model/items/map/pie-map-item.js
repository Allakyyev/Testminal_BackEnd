/**
* DevExpress Dashboard (pie-map-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ModelSerializer, deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { DataItemLink } from '../../data-item/data-item';
import { collectionItemType } from '../../internal/_utils';
import { BindingSectionTitles } from '../../metadata/_base-metadata';
import { itemTypesMap } from '../../serializable-model';
import { DataDashboardItem } from '../data-dashboard-item';
import { GeoPointMapItemBase } from './geo-point-map-item-base';
import { pieMapArgument, pieMapDashboardItemSerializationsInfo, pieMapValues } from './metadata/_pie-map-item';
export class PieMapItem extends GeoPointMapItemBase {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.values = ko.observableArray([]);
        this.__values = deserializeArray(modelJson.Values, (item) => new DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(pieMapValues);
        this._attachDataItem(this, pieMapArgument.propertyName);
        DataDashboardItem._addColoringMeta([this.__argument]);
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.__values);
        this.__values.removeAll();
        this.__argument.uniqueName(null);
    }
    _getInfoCore() {
        return pieMapDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'PieMap';
    }
    _getLayersCount() {
        return !!this.__values ? this.__values().length : 0;
    }
    _getLayerName() {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    }
    _getSliceDimensions() {
        return super._getSliceDimensions().concat(this.__argument);
    }
    _getIsDimensionColoredByDefault(dimension) {
        return this.__argument.dataItem() === dimension;
    }
    _getAreMeasuresColoredByDefault() {
        return this.__values().length > 1 && !this.__argument.dataItem();
    }
    _getCanColorByMeasures() { return true; }
    _getCanColorByDimensions() { return true; }
    _getColorizableDataItemsInfo() {
        return [{
                items: [this.__argument],
                prefixId: BindingSectionTitles.SingleArgument
            }];
    }
}
__decorate([
    collectionItemType('Value')
], PieMapItem.prototype, "__values", void 0);
itemTypesMap['PieMap'] = { type: PieMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNamePieMapItem', index: 240 };
