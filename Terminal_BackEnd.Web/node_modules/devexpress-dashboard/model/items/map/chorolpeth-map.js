/**
* DevExpress Dashboard (chorolpeth-map.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { DataItemContainer } from '../data-item-container';
import { chorolpethMapValue, deltaMapActualValue, deltaMapSerializationsInfo, deltaMapTargetValue, valueMapSerializationsInfo } from './metadata/_chorolpeth-map';
export class ChoroplethMap extends DataItemContainer {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this._displayNameSeparator = 'vs';
    }
}
export class ValueMap extends ChoroplethMap {
    constructor(dataItemProvider, modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        dataItemProvider._attachDataItem(this, chorolpethMapValue.propertyName);
    }
    _getInfoCore() {
        return valueMapSerializationsInfo;
    }
    _getDataId() {
        return this.value() && this.value().uniqueName() || null;
    }
    _getBindingModel() {
        return [
            {
                propertyName: chorolpethMapValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue'
            }
        ];
    }
    _getDefaultItemType() { return 'ValueMap'; }
}
export class DeltaMap extends ChoroplethMap {
    constructor(dataItemProvider, modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        dataItemProvider._attachDataItem(this, deltaMapActualValue.propertyName);
        dataItemProvider._attachDataItem(this, deltaMapTargetValue.propertyName);
    }
    _getInfoCore() {
        return deltaMapSerializationsInfo;
    }
    _getDataId() {
        var dataItem = this.actualValue() && this.targetValue();
        return dataItem && dataItem.uniqueName() || null;
    }
    _getBindingModel() {
        return [
            {
                propertyName: deltaMapActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            },
            {
                propertyName: deltaMapTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }
        ];
    }
    _getDefaultItemType() { return 'DeltaMap'; }
}
