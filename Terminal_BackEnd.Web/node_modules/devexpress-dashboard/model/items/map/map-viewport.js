/**
* DevExpress Dashboard (map-viewport.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { wrapWithUndoRedo } from '../../internal/_undo-engine-helper';
import { SerializableModel } from '../../serializable-model';
import { mapViewportSerializationsInfo } from './metadata/_map-viewport';
export class MapViewport extends SerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
    }
    getInfo() {
        return mapViewportSerializationsInfo;
    }
    _set(viewport, paddings = true) {
        if (!!viewport) {
            this.topLatitude(viewport.TopLatitude);
            this.bottomLatitude(viewport.BottomLatitude);
            this.leftLongitude(viewport.LeftLongitude);
            this.rightLongitude(viewport.RightLongitude);
            this.centerPointLatitude(viewport.CenterPointLatitude);
            this.centerPointLongitude(viewport.CenterPointLongitude);
            this.createViewerPaddings(paddings);
        }
    }
    _createViewModel() {
        return {
            TopLatitude: this.topLatitude(),
            BottomLatitude: this.bottomLatitude(),
            CenterPointLatitude: this.centerPointLatitude(),
            CenterPointLongitude: this.centerPointLongitude(),
            LeftLongitude: this.leftLongitude(),
            RightLongitude: this.rightLongitude(),
            CreateViewerPaddings: this.createViewerPaddings()
        };
    }
}
__decorate([
    wrapWithUndoRedo
], MapViewport.prototype, "_set", null);
