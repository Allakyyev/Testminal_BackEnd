/**
* DevExpress Dashboard (chorolpeth-map-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer, deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import { PropertyCategory } from '../../metadata/_base-metadata';
import { itemTypesMap } from '../../serializable-model';
import { DeltaMap, ValueMap } from './chorolpeth-map';
import { MapItem } from './map-item';
import { attributeDimension, choroplethMapDashboardItemSerializationsInfo } from './metadata/_chorolpeth-map-item';
export class ChoroplethMapItem extends MapItem {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.maps = deserializeArray(modelJson.Maps, (item) => this._createMap(item, serializer));
        this._attachDataItem(this, attributeDimension.propertyName);
        this.addDisposable(this._shapeFilesAttributeNameList.subscribe(list => {
            if ((!this.attributeName() && list && list.length > 0) || list.indexOf(this.attributeName()) === -1) {
                this.attributeName(list[0]);
            }
        }));
    }
    _getInteractivityDimensionLinks() {
        return [this.__attributeDimension];
    }
    _clearBindings() {
        super._clearBindings();
        this.maps.removeAll();
    }
    _createMap(mapJSON, serializer = new ModelSerializer()) {
        var itemType = mapJSON['@ItemType'];
        return new ChoroplethMapItem.choroplethMapTypesMap[itemType].constructor(this, mapJSON, serializer);
    }
    _getInfoCore() {
        return choroplethMapDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'ChoroplethMap';
    }
    _getLayersCount() {
        return !!this.maps ? this.maps().length : 0;
    }
    _getLayerName() {
        return this._getDataItemContainerDisplayName(this.maps()[this._selectedElementIndex() || 0]);
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        var mapContent = this._paneContentHolder.getContent(PropertyCategory.Map);
        if (mapContent && mapContent.ViewModel) {
            content.ViewModel.ToolTipAttributeName = mapContent.ViewModel.ToolTipAttributeName;
            if (mapContent.ViewModel.ChoroplethColorizer) {
                if (!content.ViewModel.ChoroplethColorizer)
                    content.ViewModel.ChoroplethColorizer = {};
                content.ViewModel.ChoroplethColorizer.AttributeName = mapContent.ViewModel.ChoroplethColorizer.AttributeName;
            }
        }
    }
}
ChoroplethMapItem.choroplethMapTypesMap = {
    'ValueMap': {
        constructor: ValueMap,
        displayName: 'DashboardWebStringId.Map.ValueMap',
        icon: 'dx-dashboard-grid-column-measure'
    },
    'DeltaMap': {
        constructor: DeltaMap,
        displayName: 'DashboardWebStringId.Map.DeltaMap',
        icon: 'dx-dashboard-grid-column-delta'
    }
};
itemTypesMap['ChoroplethMap'] = { type: ChoroplethMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNameChoroplethMapItem', index: 220 };
