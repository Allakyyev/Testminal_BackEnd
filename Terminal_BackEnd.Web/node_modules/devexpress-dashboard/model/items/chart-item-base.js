/**
* DevExpress Dashboard (chart-item-base.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { deserializeArray, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { itemDataTuple } from '../../data/item-data/_item-data-tuple';
import { itemDataAxisNames } from '../../data/item-data/item-data-axis-names';
import { DataItemLink } from '../data-item/data-item';
import { subscribeAndPerform } from '../internal/_knockout-utils';
import { collectionItemType } from '../internal/_utils';
import { BindingSectionTitles } from '../metadata/_base-metadata';
import { DataDashboardItem } from './data-dashboard-item';
import { chartArgumentsMeta, chartItemBaseSerializationsInfo } from './metadata/_chart-item-base';
import { SeriesItem } from './series-item';
export class ChartItemBase extends SeriesItem {
    constructor(dashboardItemJSON = {}, serializer = new ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.__arguments = ko.observableArray([]);
        this.arguments = ko.observableArray([]);
        this.__arguments(deserializeArray(dashboardItemJSON.Arguments, (item) => new DataItemLink(this, item, serializer))());
        this._subscribeDataItemLinkArrays(chartArgumentsMeta);
        subscribeAndPerform(this.__seriesDimensions, newValue => {
            DataDashboardItem._addColoringMeta(newValue);
        });
        subscribeAndPerform(this.__arguments, newValue => {
            DataDashboardItem._addColoringMeta(newValue);
        });
    }
    _getInfoCore() {
        return chartItemBaseSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.__arguments);
        this.__arguments.removeAll();
    }
    _getInteractivityDimensionLinks() {
        var targetDimensions = this._getTargetDimensions();
        if (targetDimensions) {
            if (targetDimensions === 'Arguments') {
                return this.__arguments();
            }
            else if (targetDimensions === 'Points') {
                return this.__arguments().concat(this.__seriesDimensions());
            }
        }
        return super._getInteractivityDimensionLinks();
    }
    _getTargetDimensions() {
        return 'Arguments';
    }
    _getItemDataAxis() {
        if (this.interactivityOptions.targetDimensions() === 'Series') {
            return itemDataAxisNames.chartSeriesAxis;
        }
        else if (this.interactivityOptions.targetDimensions() === 'Arguments') {
            return itemDataAxisNames.chartArgumentAxis;
        }
        else if (this.interactivityOptions.targetDimensions() === 'Points') {
            return itemDataAxisNames.chartArgumentAxis;
        }
        else {
            throw Error('Unsupported interactivity type');
        }
    }
    _getCurrentFilterValues() {
        var that = this, data = that._getItemData(), argumentNames = that.arguments().map(dim => dim.uniqueName()), seriesNames = that.seriesDimensions().map(dim => dim.uniqueName()), selectedValues = that._getSelectedValuesByItemName();
        if (!data)
            return;
        if (this.interactivityOptions.targetDimensions() === 'Arguments') {
            return data && data.getCurrentFilterValues(argumentNames, itemDataAxisNames.chartArgumentAxis, selectedValues);
        }
        else if (this.interactivityOptions.targetDimensions() === 'Series') {
            return data.getCurrentFilterValues(seriesNames, itemDataAxisNames.chartSeriesAxis, selectedValues);
        }
        else if (this.interactivityOptions.targetDimensions() === 'Points') {
            var argumentPoints = data.getCurrentFilterValues(that.arguments().map(dim => dim.uniqueName()), itemDataAxisNames.chartArgumentAxis, selectedValues.map(val => [val[0]]));
            var seriesPoints = data.getCurrentFilterValues(that.seriesDimensions().map(dim => dim.uniqueName()), itemDataAxisNames.chartSeriesAxis, selectedValues.map(val => [val[1]]));
            var tuples = [];
            argumentPoints.forEach(function (arg, index) {
                tuples.push(new itemDataTuple([arg.getAxisPoint(itemDataAxisNames.chartArgumentAxis), seriesPoints[index].getAxisPoint(itemDataAxisNames.chartSeriesAxis)]));
            });
            return tuples;
        }
    }
    _itemInteractivityByColumnAxis() {
        return this.interactivityOptions.targetDimensions() === 'Arguments';
    }
    _getInteractivityAxisDimensionCount() {
        return this._itemInteractivityByColumnAxis() ? this.arguments().length : this.seriesDimensions().length;
    }
    _getCanColorByMeasures() { return true; }
    _getCanColorByDimensions() { return true; }
    _getColorizableDataItemsInfo() {
        return [{
                items: this.__arguments(),
                prefixId: BindingSectionTitles.Arguments
            }, {
                items: this.__seriesDimensions(),
                prefixId: BindingSectionTitles.SeriesDimension
            }];
    }
}
__decorate([
    collectionItemType('Argument')
], ChartItemBase.prototype, "__arguments", void 0);
