/**
* DevExpress Dashboard (_treemap-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { argumentsPropertyName, valuesPropertyName } from '../../../metadata/_base-metadata';
import { dataDashboardItemSerializationsInfo } from '../../metadata/_data-dashboard-item';
import { _dashboardItemInteractivityOptionsMeta } from '../../options/interactivity-options';
import { coloringOptions } from '../../options/metadata/_coloring-options';
export let treeMapvalues = { propertyName: valuesPropertyName, modelName: 'Values', displayName: 'DashboardWebStringId.Binding.Values', array: true };
export let treeMapArgumentsMeta = { propertyName: argumentsPropertyName, modelName: 'Arguments', array: true };
export let layoutAlgorithm = {
    propertyName: 'layoutAlgorithm', modelName: '@LayoutAlgorithm', displayName: 'DashboardWebStringId.TreemapLayoutAlgorithm', defaultVal: 'Squarified', simpleFormAdapterItem: 'listEditor', values: {
        'SliceAndDice': 'DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm',
        'Squarified': 'DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm',
        'Striped': 'DashboardWebStringId.Treemap.StripedLayoutAlgorithm'
    }
};
export let layoutDirection = {
    propertyName: 'layoutDirection', modelName: '@LayoutDirection', displayName: 'DashboardWebStringId.Treemap.LayoutDirection', defaultVal: 'TopLeftToBottomRight', simpleFormAdapterItem: 'listEditor', values: {
        'BottomLeftToTopRight': 'DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection',
        'BottomRightToTopLeft': 'DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection',
        'TopLeftToBottomRight': 'DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection',
        'TopRightToBottomLeft': 'DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection'
    }
};
export let tilesLabelContentType = {
    propertyName: 'tilesLabelContentType', modelName: '@TilesLabelContentType', displayName: 'DashboardWebStringId.TilesLabelContentType', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.TileLabelsNone',
        'Argument': 'DashboardWebStringId.Treemap.TileLabelsArgument',
        'Value': 'DashboardWebStringId.Treemap.TileLabelsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.TileLabelsArgumentAndValue'
    }
};
export let tilesTooltipContentType = {
    propertyName: 'tilesTooltipContentType', modelName: '@TilesTooltipContentType', displayName: 'DashboardWebStringId.TilesTooltipContentType', defaultVal: 'ArgumentAndValue', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.TileTooltipsNone',
        'Argument': 'DashboardWebStringId.Treemap.TileTooltipsArgument',
        'Value': 'DashboardWebStringId.Treemap.TileTooltipsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue'
    }
};
export let groupsLabelContentType = {
    propertyName: 'groupsLabelContentType', modelName: '@GroupsLabelContentType', displayName: 'DashboardWebStringId.GroupsLabelContentType', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.GroupLabelsNone',
        'Argument': 'DashboardWebStringId.Treemap.GroupLabelsArgument',
        'Value': 'DashboardWebStringId.Treemap.GroupLabelsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue'
    }
};
export let groupsTooltipContentType = {
    propertyName: 'groupsTooltipContentType', modelName: '@GroupsTooltipContentType', displayName: 'DashboardWebStringId.GroupsTooltipContentType', defaultVal: 'ArgumentAndValue', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.GroupTooltipsNone',
        'Argument': 'DashboardWebStringId.Treemap.GroupTooltipsArgument',
        'Value': 'DashboardWebStringId.Treemap.GroupTooltipsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue'
    }
};
export let treemapDashboardItemSerializationsInfo = dataDashboardItemSerializationsInfo.concat([treeMapvalues, treeMapArgumentsMeta, layoutAlgorithm, layoutDirection, tilesLabelContentType, tilesTooltipContentType, groupsLabelContentType, groupsTooltipContentType, _dashboardItemInteractivityOptionsMeta, coloringOptions]);
