/**
* DevExpress Dashboard (range-filter-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { deserializeArray, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { deepExtend } from '../../../data/_jquery-helpers';
import { itemDataAxisNames } from '../../../data/item-data/item-data-axis-names';
import { RangeFilterSelectionValidator } from '../../../viewer-parts/viewer-items/range-selector-item/_range-filter-selection-validator';
import { AcceptableShapingType } from '../../data-item/data-item';
import { RangeFilterWindowDefinition } from '../../data-item/window-definition/range-filter-calc-window-definition';
import { arrayEquals } from '../../internal/_array-utils';
import { collectionItemType } from '../../internal/_utils';
import { BindingSectionTitles } from '../../metadata/_base-metadata';
import { itemTypesMap } from '../../serializable-model';
import { ChartSeriesCreator } from '../chart/chart-series-creator';
import { SeriesItem } from '../series-item';
import { _subscribeToDimension } from './_range-filter-item-helper';
import { RangeStateController } from './_range-state-controller';
import { DateTimePeriod } from './date-time-period';
import { argument, rangeFilterDashboardItemSerializationsInfo } from './metadata/_range-filter-item';
export class RangeFilterItem extends SeriesItem {
    constructor(dashboardItemJSON = {}, serializer = new ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this._defaultDateTimePeriodIndexSubscription = null;
        this.currentSelectedDateTimePeriodName = ko.observable();
        this.series = deserializeArray(dashboardItemJSON.Series, (item) => ChartSeriesCreator.createSeries(this, item, serializer));
        this.dateTimePeriods = deserializeArray(dashboardItemJSON.DateTimePeriods, (item) => new DateTimePeriod(item, serializer));
        this._attachDataItem(this, argument.propertyName);
        this.__argument._specifics.acceptableShapingType = AcceptableShapingType.RangeDate;
        this.__argument._specifics.forceAddOlapExactDateFormat = true;
        this.addDisposable(this._stateController = new RangeStateController(this));
        this._stateController.initialize();
        _subscribeToDimension(this.argument, this.dateTimePeriods, this._dataManager);
    }
    get _supportParallelRequests() {
        return false;
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.dateTimePeriods);
        this.disposeObservableArray(this.series);
        this.dateTimePeriods.removeAll();
        this.series.removeAll();
    }
    _getInfoCore() {
        return rangeFilterDashboardItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'RangeFilter';
    }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getClearMasterFilterSupported() { return true; }
    _getIsMasterFilter() { return true; }
    _getInteractivityDimensionLinks() {
        return [this.__argument];
    }
    _getIsVisualInteractivitySupported() { return false; }
    _getCanColorByDimensions() { return true; }
    _getCanColorByMeasures() { return true; }
    _getAreMeasuresColoredByDefault() {
        return this.series().length > 1;
    }
    _getIsDimensionColoredByDefault(dimension) {
        return !!this.__seriesDimensions().filter(link => link.dataItem() === dimension)[0];
    }
    _getColorizableDataItemsInfo() {
        return [{
                items: this.__seriesDimensions(),
                prefixId: BindingSectionTitles.SeriesDimension
            }];
    }
    _getDefaultCalculationWindowDefinition() {
        return new RangeFilterWindowDefinition();
    }
    _hasSelection() {
        if (this.currentSelectedDateTimePeriodName())
            return true;
        if (super._hasSelection()) {
            let fullRange = this._fullRange.peek();
            if (fullRange) {
                return !arrayEquals(fullRange, this._selectionValues()[0]);
            }
            else
                return true;
        }
        return false;
    }
    _getSelectionByPeriod(period) {
        let range = period.getDateTimeValue();
        return [[range.startValue, range.endValue]];
    }
    _getDisplayFilterValues(limitCount) {
        return this._stateController._getDisplayFilterValues(limitCount);
    }
    _getEntireRange() {
        var points = this._getPointsByDimension(this.__argument.uniqueName(), itemDataAxisNames.chartArgumentAxis);
        if (points && points.length > 0) {
            return [points[0].getValue(), points[points.length - 1].getValue()];
        }
        return [];
    }
    _validateSelectionByData(selection) {
        if (this.argument()) {
            let newRange = this._getEntireRange();
            if (!arrayEquals(newRange, this._fullRange.peek()))
                this._fullRange(newRange);
        }
        let validatedSelection = this._fullRange() && this._fullRange().length > 0 ? selection : undefined;
        this._setSelection(validatedSelection);
    }
    _getValidatedSelection(selectionValues) {
        let validatedValues = super._getValidatedSelection(selectionValues);
        if (this._fullRange() && this._fullRange().length > 0) {
            if (validatedValues) {
                let validatedRange = RangeFilterSelectionValidator.validate({
                    startValue: validatedValues[0][0],
                    endValue: validatedValues[0][1]
                }, this.argument()._actualDateTimeGroupInterval() === 'Year', {
                    minimum: this._fullRange()[0],
                    maximum: this._fullRange()[1]
                });
                validatedValues[0] = [validatedRange.startValue, validatedRange.endValue];
            }
        }
        return validatedValues;
    }
    _setState(itemState) {
        this._stateController.setState(itemState);
    }
    _removeSelectionFromState(state) {
        let itemState = super._removeSelectionFromState(deepExtend({}, state));
        return this._stateController.removeSelectionFromState(itemState);
    }
    _setPredefinedPeriodToState(state, periodName) {
        let itemState = super._setPredefinedPeriodToState(deepExtend({}, state), periodName);
        return this._stateController.setPredefinedPeriodToState(itemState, periodName);
    }
    _setSelectionToState(state, selection) {
        return this._stateController.setSelectionToState(state, selection);
    }
    _extendContentState(content) {
        super._extendContentState(content);
        this._stateController.extendContentState(content);
    }
    _isSortingEnabled() {
        return false;
    }
    _isTopNEnabled(dataItem) {
        return false;
    }
}
RangeFilterItem.rangeSeriesViewTypesMap = {
    Line: ChartSeriesCreator.chartSeriesViewTypesMap.Line,
    StackedLine: ChartSeriesCreator.chartSeriesViewTypesMap.StackedLine,
    FullStackedLine: ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedLine,
    Area: ChartSeriesCreator.chartSeriesViewTypesMap.Area,
    StackedArea: ChartSeriesCreator.chartSeriesViewTypesMap.StackedArea,
    FullStackedArea: ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedArea,
    Bar: ChartSeriesCreator.chartSeriesViewTypesMap.Bar,
    StackedBar: ChartSeriesCreator.chartSeriesViewTypesMap.StackedBar,
    FullStackedBar: ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedBar
};
__decorate([
    collectionItemType('DateTimePeriod')
], RangeFilterItem.prototype, "dateTimePeriods", void 0);
itemTypesMap['RangeFilter'] = { type: RangeFilterItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameRangeFilterItem', index: 310 };
