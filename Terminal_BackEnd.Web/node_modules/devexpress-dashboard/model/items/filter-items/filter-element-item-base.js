/**
* DevExpress Dashboard (filter-element-item-base.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { deserializeArray, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { HashsetWrapper } from '../../../data/_hashset-wrapper';
import { arrayContains } from '../../../data/_utils';
import { DataItemLink } from '../../data-item/data-item';
import { subscribeArrayChange } from '../../internal/_knockout-utils';
import { collectionItemType } from '../../internal/_utils';
import { DataDashboardItem } from '../data-dashboard-item';
import { filterDimensions, filterElementItemBaseSerializationInfo } from './metadata/_filter-element-item-base';
export class FilterElementItemBase extends DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.__filterDimensions = ko.observableArray([]);
        this.filterDimensions = ko.observableArray([]);
        this._unselectedValues = ko.observable();
        this.addDisposable(this._isExcludingAllFilter = ko.computed(() => {
            if (!!this._useNeutralFilterMode())
                return false;
            var selectionValues = this._selectionValues();
            return this._dataManager() && selectionValues && selectionValues.length === 0;
        }));
        subscribeArrayChange(this.__filterDimensions, {
            added: link => link._specifics.supportsTopNOther = false,
            deleted: link => link._specifics.supportsTopNOther = true
        });
        this.__filterDimensions(deserializeArray(dashboardItemJSON.FilterDimensions, (item) => {
            var link = new DataItemLink(this, item, serializer);
            link._specifics.supportsTopNOther = false;
            return link;
        })());
        this._subscribeDataItemLinkArrays(filterDimensions);
    }
    get _supportParallelRequests() {
        return false;
    }
    get _useCriteriaOptimization() {
        return !this.filterString()
            && !this.visibleDataFilterString()
            && this.interactivityOptions.ignoreMasterFilters()
            && !this.isMasterFilterCrossDataSource()
            && !this._interactivityDimensions.some(d => d.topNOptionsEnabled());
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.__filterDimensions);
        this.__filterDimensions.removeAll();
    }
    _getInfoCore() {
        return filterElementItemBaseSerializationInfo;
    }
    _isCalculationSupported() {
        return false;
    }
    _getInteractivityDimensionLinks() { return this.__filterDimensions(); }
    _getMasterFilterMode() { return !this._useNeutralFilterMode() || (!!this._useNeutralFilterMode() && this._isMultiselectable()) ? 'Multiple' : 'Single'; }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getClearMasterFilterSupported() { return !!this._useNeutralFilterMode(); }
    _getIsMasterFilter() { return true; }
    _getIsVisualInteractivitySupported() { return false; }
    _isMultiselectable() { return false; }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel.EnableSearch = this.enableSearch();
    }
    _performOutputFilterOptimization(filter) {
        if (this.__filterDimensions && filter && !!filter.values && this._useCriteriaOptimization) {
            const allSelectionValues = this._getAllSelectionValues(this._interactivityDimensions.map(d => d.uniqueName()));
            const selectionLenght = allSelectionValues.length;
            if (filter.values.length === selectionLenght) {
                return undefined;
            }
        }
        if (!!this._dataQueryParams.peek()
            && !!this._dataQueryParams.peek().Filter
            && this._dataQueryParams.peek().Filter.some(externalFilter => externalFilter.isExcludingAllFilter)) {
            return undefined;
        }
        return filter;
    }
    _validateSelectionByData(origSelection) {
        let selection = origSelection;
        if (!this._interactivityDimensions.length)
            return;
        var allValues = this._getAllSelectionValues(this._interactivityDimensions.map(d => d.uniqueName()));
        if (this._isMultiselectable() && !this._useNeutralFilterMode() && !Array.isArray(this._unselectedValues())) {
            this._unselectedValues([]);
            if (Array.isArray(selection)) {
                this._updateUnselectedValues(selection, allValues);
            }
        }
        if (this._isMultipleMasterFilter() && this._useNeutralFilterMode() && selection && this._useCriteriaOptimization && allValues.length) {
            const hashSet = new HashsetWrapper(allValues);
            selection = [];
            origSelection.forEach(val => hashSet.contains(val) && selection.push(val));
        }
        this._setSelectionData(this._correctSelectionValues(allValues, selection || []), this._useCriteriaOptimization && this._useNeutralFilterMode());
    }
    _setSelectionData(selection, forceSetSelection = false) {
        if (!this._useNeutralFilterMode() && this._multiData) {
            var currentSelection = this._selectionValues();
            if (this._isMultiselectable() && !!currentSelection && this._unselectedValues()) {
                this._updateUnselectedValues(selection, currentSelection);
            }
            if (!!selection) {
                var hashset = new HashsetWrapper(selection);
                var allValues = this._getAllSelectionValues(this._interactivityDimensions.map(d => d.uniqueName()));
                selection = hashset.getIntersection(allValues);
            }
        }
        super._setSelectionData(selection, forceSetSelection);
    }
    _correctSelectionValues(allValues, currentSelection) {
        if (this._isMultiselectable() && !this._useNeutralFilterMode()) {
            var unknownSelection = allValues
                .filter(x => !this._arrayContains(currentSelection, x) && !this._arrayContains(this._unselectedValues(), x));
            return currentSelection.concat(unknownSelection);
        }
        else if (!this._isMultiselectable()) {
            if (!!this._useNeutralFilterMode()) {
                if (currentSelection.length !== 1) {
                    return this._allowAllValue() || allValues.length == 0 ? null : [allValues[0]];
                }
            }
            else {
                if (currentSelection.length !== 1 || !this._arrayContains(allValues, currentSelection[0])) {
                    return this._allowAllValue() ? allValues : [allValues[0]];
                }
            }
        }
        return currentSelection;
    }
    _updateUnselectedValues(newSelection, currentSelection) {
        if (!newSelection || newSelection.length === 0) {
            currentSelection.forEach(x => this._unselectedValues().push(x.slice()));
        }
        else {
            let hashset = new HashsetWrapper(newSelection);
            let unselectedCount = this._unselectedValues().length;
            for (let i = unselectedCount - 1; i >= 0; i--) {
                if (hashset.contains(this._unselectedValues()[i])) {
                    this._unselectedValues().splice(i, 1);
                }
            }
            currentSelection.forEach(x => {
                if (!hashset.contains(x)) {
                    this._unselectedValues().push(x.slice());
                }
            });
        }
    }
    _arrayContains(container, part) {
        return arrayContains(container, part);
    }
}
__decorate([
    collectionItemType('Dimension')
], FilterElementItemBase.prototype, "__filterDimensions", void 0);
