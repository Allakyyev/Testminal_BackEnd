/**
* DevExpress Dashboard (text-box-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ModelSerializer, deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { AcceptableShapingType, DataItemLink } from '../data-item/data-item';
import { collectionItemType } from '../internal/_utils';
import { itemTypesMap } from '../serializable-model';
import { DataDashboardItem } from './data-dashboard-item';
import { textBoxDashboardItemSerializationsInfo, textBoxValues } from './metadata/_text-box-item';
export class TextBoxItem extends DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer = new ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.values = ko.observableArray([]);
        this.__values = deserializeArray(dashboardItemJSON.Values, (item) => new DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(textBoxValues);
        this.addDisposable(this.__values.subscribe((links) => {
            this._setLinkCollectionAcceptableShapingType(links, AcceptableShapingType.String);
        }));
        this._setLinkCollectionAcceptableShapingType(this.__values(), AcceptableShapingType.String);
        this._supportedUIStates(['error', 'loading']);
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.__values);
        this.__values.removeAll();
    }
    _getInfoCore() {
        return textBoxDashboardItemSerializationsInfo;
    }
    _isCalculationSupported() {
        return false;
    }
    _getDefaultItemType() {
        return 'TextBox';
    }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getIsVisualInteractivitySupported() { return false; }
}
__decorate([
    collectionItemType('Value')
], TextBoxItem.prototype, "__values", void 0);
itemTypesMap['TextBox'] = { type: TextBoxItem, groupName: 'common', title: 'DashboardStringId.DefaultNameTextBoxItem', index: 80 };
