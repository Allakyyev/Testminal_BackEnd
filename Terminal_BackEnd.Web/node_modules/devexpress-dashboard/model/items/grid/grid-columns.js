/**
* DevExpress Dashboard (grid-columns.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { AcceptableShapingType, DataItemLink } from '../../data-item/data-item';
import { Measure } from '../../data-item/measure';
import { IsDateTime, IsNumeric, IsTextual } from '../../data-sources/_data-field';
import { collectionItemType } from '../../internal/_utils';
import { DataItemContainer } from '../data-item-container';
import { GridColumnTotal } from './grid-column-total';
import { totalTypeValues } from './metadata/_grid-column-total';
import { checkGridUriPattern, dimension, displayValue, gridColumnActualValue, gridColumnBaseSerializationsInfo, gridColumnTargetValue, gridDeltaColumnSerializationsInfo, gridDimensionColumnSerializationsInfo, gridHyperlinkColumnSerializationsInfo, gridMeasureColumnSerializationsInfo, gridSparklineColumnSerializationsInfo, measure, sparkline, uri } from './metadata/_grid-columns';
export var GridColumnType;
(function (GridColumnType) {
    GridColumnType[GridColumnType["Dimension"] = 0] = "Dimension";
    GridColumnType[GridColumnType["Measure"] = 1] = "Measure";
    GridColumnType[GridColumnType["Delta"] = 2] = "Delta";
    GridColumnType[GridColumnType["Sparkline"] = 3] = "Sparkline";
    GridColumnType[GridColumnType["Hyperlink"] = 4] = "Hyperlink";
})(GridColumnType || (GridColumnType = {}));
export class GridColumn extends DataItemContainer {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dashboardItemJSON, serializer);
        this._displayNameSeparator = 'vs';
        this.totals = deserializeArray(dashboardItemJSON.Totals, (item) => new GridColumnTotal(item, serializer));
    }
    get actualDataItem() {
        var dataItemLink = this._getActualDataItemLink();
        return !!dataItemLink ? dataItemLink.dataItem() : undefined;
    }
    get _actualDataItemLink() {
        return this._getActualDataItemLink();
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.totals);
    }
    grabFrom(column) {
        super.grabFrom(column);
        this.weight(column.weight());
        this.fixedWidth(column.fixedWidth());
        this.widthType(column.widthType());
    }
    _getInfoCore() {
        return gridColumnBaseSerializationsInfo;
    }
    _getColumnType() {
        return undefined;
    }
    _getDataId() {
        return this.actualDataItem && this.actualDataItem.uniqueName() || null;
    }
    _isAttribute(dataItem) {
        return false;
    }
    _getViewModel() {
        return {
            Weight: this.weight(),
            FixedWidth: this.fixedWidth(),
            WidthType: this.widthType()
        };
    }
    _getAvailableTotalTypes(dataItemProvider) {
        return totalTypeValues.commonCountTypes;
    }
    _getTotalTypes(dataType) {
        var possibleTypes = totalTypeValues.commonCountTypes;
        if (IsNumeric(dataType)) {
            return totalTypeValues.commonMinMaxTypes.concat(totalTypeValues.numericTypes).concat(possibleTypes);
        }
        else if (IsTextual(dataType) || IsDateTime(dataType)) {
            return totalTypeValues.commonMinMaxTypes.concat(possibleTypes);
        }
        else {
            return possibleTypes;
        }
    }
}
__decorate([
    collectionItemType('Total')
], GridColumn.prototype, "totals", void 0);
export class GridDimensionColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, dimension.propertyName);
    }
    _getInfoCore() {
        return gridDimensionColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Dimension;
    }
    _getActualDataItemLink() {
        return this.__dimension;
    }
    _getAvailableTotalTypes(dataItemProvider) {
        var dataItem = this.actualDataItem;
        if (dataItem) {
            return this._getTotalTypes(dataItemProvider._getFinalDataType(dataItem.uniqueName()));
        }
        else {
            return super._getAvailableTotalTypes(dataItemProvider);
        }
    }
    _getDefaultItemType() {
        return 'GridDimensionColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: dimension.propertyName,
                dataItemType: 'Dimension',
                emptyPlaceholder: 'DashboardStringId.DescriptionItemDimension'
            }];
    }
}
export class GridMeasureColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, measure.propertyName);
        this.__measure._specifics.acceptableShapingType = AcceptableShapingType.String;
    }
    _getInfoCore() {
        return gridMeasureColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Measure;
    }
    _getActualDataItemLink() {
        return this.__measure;
    }
    _getAvailableTotalTypes(dataItemProvider) {
        var dataItem = this.actualDataItem;
        if (dataItem instanceof Measure) {
            var totalTypes = this._getTotalTypes(dataItemProvider._getFinalDataType(dataItem.uniqueName()));
            if (dataItem.expression() == null && dataItem.calculation.calculation() == null)
                totalTypes = totalTypes.concat(totalTypeValues.autoTypes);
            return totalTypes;
        }
        else {
            return super._getAvailableTotalTypes(dataItemProvider);
        }
    }
    _getDefaultItemType() {
        return 'GridMeasureColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: measure.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.DescriptionItemMeasure'
            }];
    }
}
export class GridDeltaColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, gridColumnActualValue.propertyName);
        dataItemProvider._attachDataItem(this, gridColumnTargetValue.propertyName);
        this.addDisposable(ko.computed(() => {
            this.__actualValue._specifics.skipFormatting = true;
            this.__targetValue._specifics.skipFormatting = true;
            if (!this.__actualValue.dataItem() && this.__targetValue.dataItem()) {
                this.__targetValue._specifics.skipFormatting = false;
            }
            if (this.__actualValue.dataItem() && !this.__targetValue.dataItem()) {
                this.__actualValue._specifics.skipFormatting = false;
            }
            else if (this.__actualValue.dataItem() && this.__targetValue.dataItem() && this.deltaOptions.valueType() === 'ActualValue') {
                this.__actualValue._specifics.skipFormatting = false;
            }
        }));
    }
    _getInfoCore() {
        return gridDeltaColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Delta;
    }
    _getActualDataItemLink() {
        return !!this.__actualValue.dataItem() ? this.__actualValue : this.__targetValue;
    }
    _getDefaultItemType() {
        return 'GridDeltaColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: gridColumnActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            }, {
                propertyName: gridColumnTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }];
    }
}
export class GridSparklineColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, sparkline.propertyName);
    }
    _getInfoCore() {
        return gridSparklineColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Sparkline;
    }
    _getActualDataItemLink() {
        return this.__measure;
    }
    _getDefaultItemType() {
        return 'GridSparklineColumn';
    }
    _getBindingModel() {
        return [{
                propertyName: sparkline.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Grid.Sparkline'
            }];
    }
}
export class GridHyperlinkColumn extends GridColumn {
    constructor(dataItemProvider, dashboardItemJSON = {}, serializer) {
        super(dataItemProvider, dashboardItemJSON, serializer);
        dataItemProvider._attachDataItem(this, displayValue.propertyName);
        this.__uriAttribute = DataItemLink.create(dataItemProvider, this.__uriAttribute);
        this.__uriAttribute._specifics.isAttribute = true;
        this.__uriAttribute._specifics.acceptableShapingType = AcceptableShapingType.Attribute;
        this._displayNameSeparator = '/';
        var isUriPatternChangedCallback = (value) => {
            this.uriPattern(checkGridUriPattern(value));
        };
        this.addDisposable(this.uriPattern.subscribe(isUriPatternChangedCallback));
    }
    _getInfoCore() {
        return gridHyperlinkColumnSerializationsInfo;
    }
    _getColumnType() {
        return GridColumnType.Hyperlink;
    }
    _getActualDataItemLink() {
        return this.__displayValue;
    }
    _getDefaultItemType() {
        return 'GridHyperlinkColumn';
    }
    _isAttribute(dataItem) {
        return dataItem === this.__uriAttribute.dataItem();
    }
    _getBindingModel() {
        return [{
                propertyName: displayValue.propertyName,
                dataItemType: 'Dimension',
                emptyPlaceholder: 'DashboardStringId.DisplayValueCaption'
            }, {
                propertyName: uri.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.UriCaption'
            }];
    }
    _getAvailableTotalTypes(dataItemProvider) {
        if (this.actualDataItem) {
            return this._getTotalTypes(dataItemProvider._getFinalDataType(this.actualDataItem.uniqueName()));
        }
        else {
            return super._getAvailableTotalTypes(dataItemProvider);
        }
    }
}
