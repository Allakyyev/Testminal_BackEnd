/**
* DevExpress Dashboard (grid-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { deserializeArray, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { ModelSubscriber } from '../../../common/dashboard-update-hub/_model-subscriber';
import { deepExtend } from '../../../data/_jquery-helpers';
import { GridWindowDefinition } from '../../data-item/window-definition/grid-calc-window-definition';
import { DataField } from '../../data-sources/_data-field';
import { ClientFilterManager } from '../../internal/_client-filter-manager';
import { wrapWithUndoRedo } from '../../internal/_undo-engine-helper';
import { itemTypesMap } from '../../serializable-model';
import { DataDashboardItem } from '../data-dashboard-item';
import { GridDeltaColumn, GridDimensionColumn, GridHyperlinkColumn, GridMeasureColumn, GridSparklineColumn } from './grid-columns';
import { dashboardGridItemSerializationsInfo, sparklineArgument } from './metadata/_grid-item';
export class GridItem extends DataDashboardItem {
    constructor(dashboardItemJSON = {}, serializer) {
        super(dashboardItemJSON, serializer);
        this._processClientFilterChanged = (clientFilter) => {
            if (this._canUpdateTotals()) {
                this._gridClientFilterManager.setFilterParams(clientFilter);
                this._dataQueryParams.notifySubscribers();
            }
        };
        this._processClientFilterStateChanged = (clientFilterState) => {
            this._gridClientFilterManager.setFilterState(clientFilterState);
        };
        this.columns = deserializeArray(dashboardItemJSON.GridColumns, (item) => this._createGridColumn(item, serializer));
        this._attachDataItem(this, sparklineArgument.propertyName);
        this.addDisposable(this.interactivityOptions.masterFilterMode.subscribe(newMode => {
            if (newMode !== 'None') {
                this.gridOptions.allowCellMerge(false);
            }
        }));
        this.addDisposable(this._gridClientFilterManager = new ClientFilterManager(this.columnFilterOptions.updateTotals));
    }
    _canUpdateTotals() {
        return this.columnFilterOptions.updateTotals()
            && this.columns().length > 0
            && !DataField.isOlap(this.columns()[0].actualDataItem.dataMember())
            && this.columns().some(c => c.totals().length > 0);
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.columns);
        this.columns.removeAll();
    }
    _createGridColumn(columnJSON, serializer = new ModelSerializer()) {
        var itemType = columnJSON['@ItemType'];
        return new GridItem._gridColumnTypesMap[itemType].constructor(this, columnJSON, serializer);
    }
    _getInfoCore() {
        return dashboardGridItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Grid';
    }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getInteractivityDimensionLinks() {
        if (this.columns().length > 0) {
            var dimensionsMap = this.columns().map(col => col instanceof GridDimensionColumn || col instanceof GridHyperlinkColumn);
            var startIndex = dimensionsMap.indexOf(true);
            startIndex = startIndex == -1 ? dimensionsMap.length : startIndex;
            var endIndex = dimensionsMap.indexOf(false, startIndex);
            endIndex = endIndex == -1 ? dimensionsMap.length : endIndex;
            return this.columns().slice(startIndex, endIndex)
                .filter(col => col instanceof GridHyperlinkColumn || col.displayMode() !== 'Image')
                .map(col => col._actualDataItemLink);
        }
        else {
            return super._getInteractivityDimensionLinks();
        }
    }
    _cleanDataItemDependencies() {
        super._cleanDataItemDependencies();
        var columnsToRemove = this.columns().filter(column => {
            var bindings = column._getBindingModel();
            return bindings.every(binding => !column[binding.propertyName].dataItem());
        });
        columnsToRemove.forEach(column => this.columns.remove(column));
    }
    _updateContentViewModel(content) {
        super._updateContentViewModel(content);
        content.ViewModel = deepExtend(content.ViewModel || {}, this.gridOptions._getViewModel(), this.columnFilterOptions._getViewModel());
        if (!!content.ViewModel.Columns) {
            content.ViewModel.Columns.forEach(columnModel => {
                var column = this.columns().filter(column => {
                    var actualDataItem = column.actualDataItem;
                    return actualDataItem ? columnModel.DataId == actualDataItem.uniqueName() : false;
                })[0];
                deepExtend(columnModel, !!column ? column._getViewModel() : {});
            });
        }
    }
    _updateDataQueryParams(params) {
        var _a;
        super._updateDataQueryParams(params);
        params.ClientFilter = (_a = this._gridClientFilterManager.getFilterParams()) !== null && _a !== void 0 ? _a : params.ClientFilter;
    }
    _updateDataManagerByPartialDataSource(content, itemDataDTO) {
        this._dataManager().updateTotals(itemDataDTO);
        this._gridClientFilterManager.clearFilterParams();
    }
    _extendContentState(content) {
        super._extendContentState(content);
        content.GridClientFilterState = this._gridClientFilterManager.getFilterState();
    }
    _isAttribute(dataItem) {
        return this.columns().some(c => c._isAttribute(dataItem));
    }
    _setColumnWidthOptions(clientState) {
        if (clientState.widthOptions) {
            ModelSubscriber.changePropertyQuietly(this.gridOptions.columnWidthMode, () => this.gridOptions.columnWidthMode(clientState.widthOptions.mode));
            clientState.widthOptions.columnsOptions.forEach((columnOptions, index) => {
                let column = this.columns()[columnOptions.actualIndex];
                ModelSubscriber.changePropertyQuietly(column.widthType, () => column.widthType(columnOptions.widthType));
                ModelSubscriber.changePropertyQuietly(column.weight, () => column.weight(columnOptions.weight));
            });
        }
    }
    _getDefaultCalculationWindowDefinition() {
        return new GridWindowDefinition();
    }
    _setClientState(clientState) {
        super._setClientState(clientState);
        this._setColumnWidthOptions(clientState);
    }
    _getInteractivityAxisDimensionCount() {
        return this.columns().reduce((n, col) => {
            return (col instanceof GridDimensionColumn) || (col instanceof GridHyperlinkColumn) ? n + 1 : n;
        }, 0);
    }
}
GridItem._gridColumnTypesMap = {
    'GridDimensionColumn': {
        constructor: GridDimensionColumn,
        displayName: 'DashboardWebStringId.Grid.Dimension',
        icon: 'dx-dashboard-grid-column-dimension'
    },
    'GridMeasureColumn': {
        constructor: GridMeasureColumn,
        displayName: 'DashboardWebStringId.Grid.Measure',
        icon: 'dx-dashboard-grid-column-measure'
    },
    'GridDeltaColumn': {
        constructor: GridDeltaColumn,
        displayName: 'DashboardWebStringId.Grid.Delta',
        icon: 'dx-dashboard-grid-column-delta'
    },
    'GridSparklineColumn': {
        constructor: GridSparklineColumn,
        displayName: 'DashboardWebStringId.Grid.Sparkline',
        icon: 'dx-dashboard-grid-column-sparkline'
    },
    'GridHyperlinkColumn': {
        constructor: GridHyperlinkColumn,
        displayName: 'DashboardWebStringId.Grid.Hyperlink',
        icon: 'dx-dashboard-grid-column-hyperlink'
    }
};
__decorate([
    wrapWithUndoRedo
], GridItem.prototype, "_setColumnWidthOptions", null);
itemTypesMap['Grid'] = { type: GridItem, groupName: 'common', title: 'DashboardStringId.DefaultNameGridItem', index: 10 };
