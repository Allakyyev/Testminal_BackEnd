/**
* DevExpress Dashboard (_grid-columns.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { absoluteVariationNumericFormat, dataItemLinkSerializationsInfo, percentOfTargetNumericFormat, percentVariationNumericFormat } from '../../../data-item/metadata/_data-item';
import { actualValuePropertyName, floatFromModel, itemType, name, parseBool, PropertyCategory, targetValuePropertyName } from '../../../metadata/_base-metadata';
import { DeltaOptions } from '../../options/delta-options';
import { SparklineOptions } from '../../options/sparkline-options';
export let columnType = { propertyName: 'containerType', displayName: 'DashboardWebStringId.Grid.ColumnType' };
export let displayMode = {
    propertyName: 'displayMode', modelName: '@DisplayMode', displayName: 'DashboardWebStringId.Grid.DisplayMode', defaultVal: 'Value', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Value': 'DashboardWebStringId.Grid.DisplayMode.Value',
        'Bar': 'DashboardWebStringId.Grid.DisplayMode.Bar'
    }
};
export let columnWeight = { propertyName: 'weight', modelName: '@Weight', displayName: 'DashboardStringId.WeightCaption', defaultVal: 75, simpleFormAdapterItem: 'numberBoxEditor', from: floatFromModel, category: PropertyCategory.ViewModel,
    isTwoWay: true
};
export let fixedWidth = { propertyName: 'fixedWidth', modelName: '@FixedWidth', displayName: 'DashboardWebStringId.Grid.FixedWidth', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: floatFromModel, category: PropertyCategory.ViewModel };
export let widthType = {
    propertyName: 'widthType', modelName: '@WidthType', displayName: 'DashboardWebStringId.Grid.WidthType', defaultVal: 'Weight', simpleFormAdapterItem: 'listEditor', category: PropertyCategory.ViewModel, values: {
        'Weight': 'DashboardWebStringId.Grid.WidthType.Weight',
        'FitToContent': 'DashboardWebStringId.Grid.WidthType.FitToContent',
        'FixedWidth': 'DashboardWebStringId.Grid.FixedWidth'
    },
    isTwoWay: true
};
export let totalsTemplate = { propertyName: 'totals', modelName: 'Totals', array: true };
export let gridColumnBaseSerializationsInfo = [itemType, name, columnWeight, fixedWidth, widthType, totalsTemplate];
export let dimension = { propertyName: '__dimension', modelName: 'Dimension', info: dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DescriptionItemDimension' };
export let dimensionDisplayMode = {
    propertyName: 'displayMode', modelName: '@DisplayMode', displayName: 'DashboardWebStringId.Grid.DisplayMode', defaultVal: 'Text', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Text': 'DashboardWebStringId.Grid.DisplayMode.Text',
        'Image': 'DashboardWebStringId.Grid.DisplayMode.Image'
    }
};
export let gridDimensionColumnSerializationsInfo = gridColumnBaseSerializationsInfo.concat([dimensionDisplayMode, dimension]);
export let alwaysShowZeroLevel = { propertyName: 'alwaysShowZeroLevel', modelName: '@AlwaysShowZeroLevel', displayName: 'DashboardWebStringId.Chart.AlwaysShowZeroLevel', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let measure = { propertyName: '__measure', modelName: 'Measure', info: dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DescriptionItemMeasure' };
export let gridMeasureColumnSerializationsInfo = gridColumnBaseSerializationsInfo.concat([displayMode, alwaysShowZeroLevel, measure]);
export let gridColumnDeltaOptions = { propertyName: 'deltaOptions', modelName: 'DeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: DeltaOptions };
export let gridColumnActualValue = { propertyName: actualValuePropertyName, modelName: 'ActualValue', info: dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.ActualValueCaption' };
export let gridColumnTargetValue = { propertyName: targetValuePropertyName, modelName: 'TargetValue', info: dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.TargetValueCaption' };
export let gridDeltaColumnSerializationsInfo = gridColumnBaseSerializationsInfo.concat([gridColumnDeltaOptions, displayMode, alwaysShowZeroLevel, gridColumnActualValue, gridColumnTargetValue, absoluteVariationNumericFormat, percentVariationNumericFormat, percentOfTargetNumericFormat]);
export let showStartEndValues = { propertyName: 'showStartEndValues', modelName: '@ShowStartEndValues', displayName: 'DashboardWebStringId.Grid.ShowStartEndValues', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let sparkline = { propertyName: '__measure', modelName: 'SparklineValue', info: dataItemLinkSerializationsInfo, displayName: 'DashboardWebStringId.Binding.Sparkline' };
export let sparklineOptions = { propertyName: 'sparklineOptions', modelName: 'SparklineOptions', displayName: 'DashboardWebStringId.Card.SparklineOptions', type: SparklineOptions };
export let gridSparklineColumnSerializationsInfo = gridColumnBaseSerializationsInfo.concat([showStartEndValues, sparkline, sparklineOptions]);
export let uri = { propertyName: '__uriAttribute', modelName: 'UriAttribute', info: dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.UriCaption' };
export let displayValue = { propertyName: '__displayValue', modelName: 'DisplayValue', info: dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DisplayValueCaption' };
export function checkGridUriPattern(value) {
    var removes = [];
    var result = '';
    for (var i = 0; i < value.length; i++) {
        if (value[i] == '{') {
            if (value.length < i + 2 || value[i + 1] != '0' || value[i + 2] != '}')
                removes.push(i);
        }
        if (value[i] == '}') {
            if (i < 2 || value[i - 1] != '0' || value[i - 2] != '{')
                removes.push(i);
        }
    }
    for (var i = 0; i < value.length; i++) {
        if (removes.indexOf(i) == -1)
            result = result + value[i];
    }
    return result;
}
export function validateGridUriPattern(value) {
    var newValue = checkGridUriPattern(value);
    return newValue.length == value.length;
}
export function gridValidateUriPattern(uriPattern) {
    return validateGridUriPattern(uriPattern);
}
export let uriPatternValidationRules = [{ type: 'custom', validationCallback: (options) => { return gridValidateUriPattern(options.value); }, message: 'DashboardStringId.GridHyperlinkUriPatternErrorMessage' }];
export let gridColumnUriPattern = { propertyName: 'uriPattern', modelName: '@UriPattern', displayName: 'DashboardStringId.UriPatternCaption', simpleFormAdapterItem: 'textBoxEditor', validateBeforeSet: true, editorOptions: { placeholder: '{0}' }, validationRules: uriPatternValidationRules };
export let gridHyperlinkColumnSerializationsInfo = gridColumnBaseSerializationsInfo.concat([uri, displayValue, gridColumnUriPattern]);
