/**
* DevExpress Dashboard (_pane-content-holder.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { PropertyCategory } from '../metadata/_base-metadata';
var categoriesCompatibilityInfo = {};
categoriesCompatibilityInfo[PropertyCategory.Initialize] = [PropertyCategory.Data, PropertyCategory.Initialize, PropertyCategory.Interactivity, PropertyCategory.ClientState, PropertyCategory.Coloring];
categoriesCompatibilityInfo[PropertyCategory.Data] = [PropertyCategory.Data, PropertyCategory.Initialize, PropertyCategory.Interactivity, PropertyCategory.ClientState, PropertyCategory.Coloring];
categoriesCompatibilityInfo[PropertyCategory.Interactivity] = [PropertyCategory.Data, PropertyCategory.Initialize, PropertyCategory.Interactivity, PropertyCategory.ClientState, PropertyCategory.Coloring];
categoriesCompatibilityInfo[PropertyCategory.ClientState] = [PropertyCategory.Data, PropertyCategory.Initialize, PropertyCategory.Interactivity, PropertyCategory.ClientState, PropertyCategory.Coloring];
categoriesCompatibilityInfo[PropertyCategory.Coloring] = [PropertyCategory.Data, PropertyCategory.Initialize, PropertyCategory.Interactivity, PropertyCategory.ClientState, PropertyCategory.Coloring];
var localProcessedCategories = [PropertyCategory.ViewModel];
var categoryContentNames = {
    Data: 'data',
    Initialize: 'data',
    Interactivity: 'data',
    ClientState: 'data',
    Map: 'map',
    ViewModel: 'viewModel',
};
export function getCategoryContentName(category) {
    var catName = PropertyCategory[category];
    return categoryContentNames[catName] || 'data';
}
export class PaneContentHolder extends Disposable {
    constructor() {
        super();
        this._content = ko.observableArray();
        this.addDisposable(this.valid = ko.computed(() => {
            return this._content().length && this._content().filter(content => content.requestsInProgress() !== 0 || !content.content()).length === 0;
        }));
    }
    get lastChangeReason() {
        return this._lastChangeReason;
    }
    dispose() {
        super.dispose();
        this.resetObservableArray(this._content);
        this.removeProperties();
    }
    _getContentInfo(category) {
        var compatibleCategories = this.getCompatibleCategories(category);
        var catName = getCategoryContentName(compatibleCategories[0]);
        var content = this._content().filter(contentItem => contentItem.category === catName)[0];
        if (!content) {
            content = {
                category: catName,
                content: ko.observable(),
                requestsInProgress: ko.observable(0),
                needAnotherRequest: false
            };
            this._content.push(content);
        }
        return content;
    }
    getContent(category) {
        return this._getContentInfo(category).content();
    }
    isValid(category) {
        var content = this._getContentInfo(category);
        return content.requestsInProgress() === 0 && !!content.content();
    }
    isWaitingForContent(category) {
        var contents = category ? [this._getContentInfo(category)] : this._content();
        return contents.some(content => content.requestsInProgress() !== 0);
    }
    getCompatibleCategories(category) {
        return categoriesCompatibilityInfo[category] || [category];
    }
    needRequestContentFromServer(category) {
        return localProcessedCategories.indexOf(category) === -1;
    }
    itemChanged(category) {
        var content = this._getContentInfo(category);
        content.needAnotherRequest = this.isWaitingForContent(category);
        content.content(undefined);
    }
    beginRequest(category) {
        var content = this._getContentInfo(category);
        content.requestsInProgress(content.requestsInProgress() + 1);
    }
    endRequest(args) {
        this._lastChangeReason = args.category;
        var content = this._getContentInfo(args.category);
        if (!content.needAnotherRequest) {
            content.content(args.response);
        }
        content.needAnotherRequest = false;
        content.requestsInProgress(content.requestsInProgress() - 1);
    }
}
