/**
* DevExpress Dashboard (pie-item.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ModelSerializer, deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { DataItemLink } from '../../data-item/data-item';
import { PieWindowDefinition } from '../../data-item/window-definition/pie-calc-window-definition';
import { collectionItemType } from '../../internal/_utils';
import { itemTypesMap } from '../../serializable-model';
import { ChartItemBase } from '../chart-item-base';
import { pieDashboardItemSerializationsInfo, pieValues } from './metadata/_pie-item';
export class PieItem extends ChartItemBase {
    constructor(dashboardItemJSON = {}, serializer = new ModelSerializer()) {
        super(dashboardItemJSON, serializer);
        this.values = ko.observableArray([]);
        this.__values = deserializeArray(dashboardItemJSON.Values, (item) => new DataItemLink(this, item, serializer));
        this._subscribeDataItemLinkArrays(pieValues);
    }
    _getInfoCore() {
        return pieDashboardItemSerializationsInfo;
    }
    _clearBindings() {
        super._clearBindings();
        this.disposeObservableArray(this.__values);
        this.__values.removeAll();
    }
    _getDefaultItemType() {
        return 'Pie';
    }
    _getTargetDimensions() { return this.interactivityOptions.targetDimensions(); }
    _getMasterFilterMode() { return this.interactivityOptions.masterFilterMode(); }
    _getDrillDownEnabled() { return this.interactivityOptions.isDrillDownEnabled(); }
    _getIgnoreMasterFilter() { return this.interactivityOptions.ignoreMasterFilters(); }
    _getAreMeasuresColoredByDefault() { return this.values().length > 1 && this.arguments().length == 0; }
    _getIsDimensionColoredByDefault(dimension) {
        return !!this.arguments().filter(dim => dim === dimension)[0];
    }
    _getLayersCount() {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.__values().length : 0;
    }
    _getLayerName() {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    }
    _getDefaultCalculationWindowDefinition() {
        return new PieWindowDefinition();
    }
}
__decorate([
    collectionItemType('Value')
], PieItem.prototype, "__values", void 0);
itemTypesMap['Pie'] = { type: PieItem, groupName: 'common', title: 'DashboardStringId.DefaultNamePieItem', index: 45 };
