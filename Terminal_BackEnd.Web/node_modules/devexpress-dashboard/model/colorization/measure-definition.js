/**
* DevExpress Dashboard (measure-definition.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer, deserializeArray } from '@devexpress/analytics-core/analytics-utils';
import { format as stringFormat } from 'devextreme/core/utils/string';
import * as ko from 'knockout';
import { getLocalizationById } from '../../data/localization/_default';
import { summaryTypeDict } from '../data-item/metadata/_measure';
import { SerializableModel } from '../serializable-model';
import { DimensionDefinition } from './_dimension-definition';
import { measureKeySerializationInfo } from './metadata/_color-scheme-entry';
export class MeasureDefinition extends SerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer, measureKeySerializationInfo);
        this.definitions = deserializeArray(modelJson.Definitions, (item) => new DimensionDefinition(item, serializer));
        this.addDisposable(this.displayText = ko.computed(() => {
            if (!!this.expression())
                return getLocalizationById('DashboardWebStringId.Calculations.Expression');
            let prefix = !!this.calculation.calculation() && getLocalizationById(this.calculation.calculation().name);
            let postfix = ' (' + getLocalizationById(summaryTypeDict[this.summaryType() || 'Sum']) + ')';
            let name = ((prefix && (prefix + ' ')) || '') + this.dataMember() + postfix;
            if (this.filterString())
                return MeasureDefinition._constructFilteredName(name);
            return name;
        }));
        this.addDisposable(this.calculation, this.windowDefinition);
    }
    static _constructFilteredName(baseName) {
        return stringFormat(getLocalizationById('DashboardStringId.MeasureFilterCaptionFormatString'), baseName);
    }
    getInfo() {
        return measureKeySerializationInfo;
    }
    get _id() {
        let serializer = new ModelSerializer({ useRefs: false });
        return JSON.stringify(serializer.serialize(this, measureKeySerializationInfo));
    }
}
