/**
* DevExpress Dashboard (_obsolete-helper.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
export let ClassMemberType = {
    method: 'method',
    property: 'property'
};
function obsoleteWarn(memberType, oldMemberName, newMemberName) {
    return `The ${oldMemberName} ${memberType} is obsolete.` + (newMemberName ? ` Use the ${newMemberName} ${memberType} instead.` : '');
}
export function defineObsoleteProperty(info) {
    Object.defineProperty(info.target, info.memberName, {
        get: () => {
            if (!info.ignoreWarmMessage) {
                let message = info.warmMessage ? info.warmMessage : obsoleteWarn(ClassMemberType.property, info.oldMemberDisplayName, info.newMemberDisplayName);
                console.warn(message);
            }
            return info.action();
        },
        enumerable: false,
        configurable: true
    });
}
export function defineClassMoved(className, sourceNamespace, destNamespace, sourceNamespaceName, destNamespaceName, additionalInfo) {
    defineObsoleteProperty({
        target: sourceNamespace,
        memberName: className,
        warmMessage: 'The ' + className + ' class was moved from the ' + sourceNamespaceName + ' to the ' + destNamespaceName + '. ' + additionalInfo,
        action: () => destNamespace[className]
    });
}
export function defineObsoleteMethod(info) {
    info.target[info.memberName] = function (...args) {
        if (!info.ignoreWarmMessage) {
            let message = info.warmMessage ? info.warmMessage : obsoleteWarn(ClassMemberType.method, info.oldMemberDisplayName, info.newMemberDisplayName);
            console.warn(message);
        }
        return info.action.apply(info.target, args);
    };
}
