/**
* DevExpress Dashboard (_dashboard-component-name-generator.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import { NameGenerator } from './_helper-classes';
import { subscribeArrayChangeWithCancel } from './_knockout-utils';
export class DashboardUniqueNameGenerator extends Disposable {
    constructor(_propertyName, _startIndex, ...collections) {
        super();
        this._propertyName = _propertyName;
        this._startIndex = _startIndex;
        this._componentsCollections = collections;
        this._componentsCollections.map(collection => {
            collection().forEach(item => this._ensureUniqueName(item));
            this.addDisposable(subscribeArrayChangeWithCancel(collection, changes => {
                for (const itemChange of changes) {
                    var change = itemChange;
                    if (change.status === 'added') {
                        if (!this._ensureUniqueName(change.value))
                            return false;
                    }
                }
                return true;
            }));
        });
    }
    _ensureUniqueName(item) {
        var affectedItems = this._componentsCollections.reduce((result, collection) => result.concat(collection()), []), itemIndex = affectedItems.indexOf(item), uniqueName = item[this._propertyName]();
        affectedItems.splice(itemIndex, 1);
        if (!!uniqueName && !NameGenerator.isValidName(uniqueName, affectedItems, this._propertyName))
            throw new Error(`Invalid Name "${uniqueName}": An item with the same name already exists. Check the name or set it to 'undefined' to generate a unique name automatically.`);
        if (!uniqueName) {
            item[this._propertyName](NameGenerator.generateName(item.getUniqueNamePrefix(), affectedItems, this._propertyName, this._startIndex));
        }
        return true;
    }
}
