/**
* DevExpress Dashboard (dashboard-item-format-rule.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { getLocalizationById } from '../../data/localization/_default';
import { TypedSerializableModel } from '../serializable-model';
import { conditionTypes, dashboardItemFormatRuleSerializationsInfo } from './metadata/_dashboard-item-format-rule';
import { IconSettings } from './style-settings/icon-settings';
export class DashboardItemFormatRule extends TypedSerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.addDisposable(this.conditionBar, this.conditionRangeGradient, this.conditionGradientRangeBar, this.conditionValue, this.conditionTopBottom, this.conditionAverage, this.conditionDateOccuring, this.conditionExpression);
        this.addDisposable(this.condition = ko.computed({
            read: () => {
                var info = conditionTypes.filter(ct => this[ct.propertyName] && !this[ct.propertyName].isEmpty())[0];
                if (info) {
                    return this[info.propertyName];
                }
            },
            write: (newCondition) => {
                var info = conditionTypes.filter(ct => newCondition instanceof ct.type)[0];
            }
        }));
    }
    get _classCaption() {
        var info = conditionTypes.filter(t => this.condition() instanceof t.type)[0];
        return info && (this.name() + ': ' + getLocalizationById(info.displayName));
    }
    get _classId() {
        var info = conditionTypes.filter(t => this.condition() instanceof t.type)[0];
        var id = info && info.propertyName;
        if (id === 'conditionRangeSet') {
            if (this.condition().actualStyles.filter(style => style instanceof IconSettings).length > 0) {
                id += '_icons';
            }
            else {
                id += '_colors';
            }
        }
        return id;
    }
    getInfo() {
        return dashboardItemFormatRuleSerializationsInfo;
    }
    _changeConditionType(propertyName) {
        var condition = this[propertyName];
        var oldCondition = this.condition();
        condition.init();
        oldCondition && oldCondition.isEmpty(true);
    }
}
