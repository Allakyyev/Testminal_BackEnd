/**
* DevExpress Dashboard (format-condition-value.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { ParameterHelper } from '../../parameters/_parameters-helper';
import { fieldTypes } from '../metadata/_format-rules-common';
import { FormatConditionStyleBase } from './format-condition-style-base';
import { formatConditionValueSerializationsInfo } from './metadata/_format-condition-value';
export class FormatConditionValue extends FormatConditionStyleBase {
    constructor(modelJson, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.condition();
        this.setSpecificType = (type) => {
            this.condition(type);
            if (!this.value1.type()) {
                this.value1.type(fieldTypes[this.dataType()]);
                var defaultValue = ParameterHelper.convertSingleValue(null, this.value1.type());
                if (this.value1.type() === 'System.String' && defaultValue === undefined) {
                    defaultValue = '';
                }
                this.value1.value(defaultValue);
            }
            if (type.toLowerCase().indexOf('between') !== -1) {
                if (!this.value2.type()) {
                    this.value2.value(this.value1.value());
                    this.value2.type(this.value1.type());
                }
            }
            else {
                this.value2.type(null);
            }
        };
        this.addDisposable(this.value1, this.value2);
    }
    _getInfoButStyleSettings() {
        return formatConditionValueSerializationsInfo;
    }
}
