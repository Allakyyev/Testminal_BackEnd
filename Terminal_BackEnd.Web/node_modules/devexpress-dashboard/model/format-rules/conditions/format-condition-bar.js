/**
* DevExpress Dashboard (format-condition-bar.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { styleSettings } from '../metadata/_format-rules-common';
import { BarStyleSettings } from '../style-settings/bar-style-settings';
import { FormatConditionMinMaxBase } from './format-condition-min-max-base';
import { barNegativeStyleSettings, formatConditionBarSerializationsInfo } from './metadata/_format-condition-bar';
export class FormatConditionBar extends FormatConditionMinMaxBase {
    constructor(modelJson, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.currentStyleSettingsType = ko.observable('Positive');
        this.getSpecificType = () => null;
        this.setSpecificType = (type) => { };
        this.negativeStyleSettings(new BarStyleSettings(modelJson && modelJson[barNegativeStyleSettings.modelName] || {}));
        if (modelJson) {
            delete modelJson[barNegativeStyleSettings.modelName];
        }
        this.addDisposable(this.currentStyleSettings = ko.computed({
            read: () => this.currentStyleSettingsType() == 'Positive' ? this.styleSettings() : this.negativeStyleSettings(),
            write: value => this.currentStyleSettingsType() == 'Positive' ? this.styleSettings(value) : this.negativeStyleSettings(value)
        }));
    }
    get _isApplyToRowColumnRestricted() { return true; }
    _getInfoButStyleSettings() {
        return formatConditionBarSerializationsInfo;
    }
    _getStyleSettingsInfo() {
        return Object.assign(Object.assign({}, styleSettings), { modelName: 'StyleSettings', type: BarStyleSettings });
    }
    _getDefaultStyleSettingsType() {
        return 'BarStyleSettings';
    }
    init() {
        super.init();
        if (this.negativeStyleSettings()) {
            this.negativeStyleSettings().init();
        }
        this.isEmpty(false);
    }
}
