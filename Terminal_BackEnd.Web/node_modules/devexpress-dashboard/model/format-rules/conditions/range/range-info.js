/**
* DevExpress Dashboard (range-info.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { TypedSerializableModel } from '../../../serializable-model';
import { styleSettingsTypes, styleSettingsTypesMap } from '../../style-settings/_style-settings-utils';
import { currentStyleSettingsInfo } from '../format-condition-style-base';
import { rangeInfoSerializationsInfo } from './metadata/_range-info';
export class RangeInfo extends TypedSerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.styleSettings = ko.observable();
        this._styleSettingsType = ko.observable();
        this._styleSettingsType(styleSettingsTypes.filter(mapItem => !!modelJson && modelJson[mapItem])[0]);
        if (this._styleSettingsType()) {
            this.styleSettings(new styleSettingsTypesMap[this._styleSettingsType()]((modelJson || {})[this._styleSettingsType()]));
            delete this['_model'][this._styleSettingsType()];
        }
        this.addDisposable(this.styleSettings.subscribe(styleSettings => {
            this._styleSettingsType(styleSettingsTypes.filter(mapItem => styleSettings instanceof styleSettingsTypesMap[mapItem])[0]);
        }));
        this.addDisposable(this.value);
    }
    getInfo() {
        let styleSettingsInfo = currentStyleSettingsInfo(this._styleSettingsType);
        if (!styleSettingsInfo || !styleSettingsInfo.modelName) {
            styleSettingsInfo = {
                propertyName: 'styleSettings',
                modelName: 'FakeSettingsForModelSubscriber',
                from: (json, serializer) => undefined,
                toJsonObject: (value, serializer, refs) => null
            };
        }
        return rangeInfoSerializationsInfo.concat([styleSettingsInfo]);
    }
    clone() {
        var rangeInfo = new RangeInfo();
        rangeInfo.value.setValue(this.value.value(), this.value.type());
        rangeInfo.styleSettings(this.styleSettings().clone());
        return rangeInfo;
    }
    _getDefaultItemType() {
        return 'RangeInfo';
    }
}
