/**
* DevExpress Dashboard (format-condition-range-gradient.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { AppearanceSettings } from '../../style-settings/appearance-settings';
import { RangeIndexSettings } from '../../style-settings/range-index-settings';
import { FormatConditionRangeBase } from './format-condition-range-base';
import { formatConditionRangeGradientSerializationsInfo } from './metadata/_format-condition-range-gradient';
import { FormatConditionRangeGenerator } from './range-generator';
import { RangeInfo } from './range-info';
export class FormatConditionRangeGradient extends FormatConditionRangeBase {
    constructor(modelJson, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.getActualPredefinedType();
        this.setSpecificType = (specificType) => this.setActualPredefinedType(specificType);
        this.addDisposable(this.segmentNumber = ko.computed({
            read: () => this.rangeSet.ranges().length,
            write: (value) => {
                this._generateByDefault(value);
            }
        }));
    }
    static isGradientStop(predefined, color) {
        return predefined == 'Custom' && !!color || predefined != 'None' && predefined.indexOf('Gradient') != -1;
    }
    isGradient() {
        return true;
    }
    getInfo() {
        return formatConditionRangeGradientSerializationsInfo;
    }
    getActualPredefinedType() {
        return FormatConditionRangeGenerator.getGradientPredefinedType(this.actualStyles, (type) => {
            var c = new FormatConditionRangeGradient();
            FormatConditionRangeGenerator.generateGradientByType(c, type, 10);
            return c;
        });
    }
    setActualPredefinedType(type) {
        FormatConditionRangeGenerator.generateGradientByType(this, type, 10);
    }
    _generateByDefault(segmentNumber) {
        FormatConditionRangeGenerator.generateGradientByStyles(this, this.stopStyles, segmentNumber);
    }
    generateAsPercent(startStyle, endStyle, segmentNumber) {
        if (segmentNumber >= this.stopStyles.length) {
            this.valueType('Percent');
            this._generate(startStyle, endStyle, segmentNumber);
            this.setValues(FormatConditionRangeGenerator.calculateRangePercentValues(segmentNumber));
        }
    }
    generateAsNumber(startStyle, endStyle, values) {
        var segmentNumber = values.length;
        if (segmentNumber >= this.stopStyles.length) {
            this.valueType('Number');
            this._generate(startStyle, endStyle, segmentNumber);
            this.setValues(values);
        }
    }
    _getRangeIndexSettings(index) {
        return new RangeIndexSettings(index);
    }
    _getSortedRanges() {
        var ranges = this.rangeSet.ranges();
        ranges.sort((a, b) => {
            var aValue = a.value.value(), bValue = b.value.value();
            var c = FormatConditionRangeGenerator.compareValues(aValue, bValue, true);
            if (c != 0)
                return c;
            if (a.valueComparison() == b.valueComparison())
                return 0;
            if (a.valueComparison() == 'Greater')
                return 1;
            return -1;
        });
        return ranges;
    }
    _generate(startStyle, endStyle, rangeCount) {
        var ranges = [];
        for (var i = 0; i < rangeCount; i++) {
            ranges.push(new RangeInfo());
        }
        ranges[0].styleSettings(this._validateStyle(startStyle));
        ranges[ranges.length - 1].styleSettings(this._validateStyle(endStyle));
        this.rangeSet.ranges(ranges);
    }
    _isGradientStop(style) {
        if (style instanceof AppearanceSettings) {
            return FormatConditionRangeGradient.isGradientStop(style.appearanceType(), style.backColor());
        }
        else {
            return false;
        }
    }
    _validateStyle(style) {
        if (!this._isGradientStop(style))
            throw new Error("Use colors with the 'Gradient' prefix from the FormatConditionAppearanceType enumeration to initialize the AppearanceSettings.appearanceType property or set the AppearanceSettings.appearanceType property to 'Custom' and specify the AppearanceSettings.backColor property.");
        return style;
    }
}
