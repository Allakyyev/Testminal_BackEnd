/**
* DevExpress Dashboard (format-condition-range-base.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { fieldTypes } from '../../metadata/_format-rules-common';
import { AppearanceSettings } from '../../style-settings/appearance-settings';
import { FormatConditionBase } from '../format-condition-base';
import { formatConditionRangeBaseSerializationsInfo } from './metadata/_format-condition-range-base';
export class FormatConditionRangeBase extends FormatConditionBase {
    constructor(modelJson, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.getSpecificType = () => this.getActualPredefinedType();
        this.setSpecificType = specificType => this.setActualPredefinedType(specificType);
        this.addDisposable(this.rangeSet);
    }
    get actualStyles() {
        var ranges = this._getSortedRanges();
        return ranges.map((range, index) => {
            var style = range.styleSettings();
            if (!style) {
                style = this._getRangeIndexSettings(index);
            }
            return style;
        });
    }
    get stopStyles() {
        return this._getSortedRanges().filter(range => !!range.styleSettings()).map(range => range.styleSettings());
    }
    getInfo() {
        return formatConditionRangeBaseSerializationsInfo;
    }
    isValid() {
        return super.isValid();
    }
    isRange() {
        return true;
    }
    setValues(values) {
        if (values.length > this.rangeSet.ranges().length)
            throw new Error('The number of values exceeds the number of ranges.');
        var index = 0;
        const valueType = this.valueType() === 'Percent' ? 'System.Double' : fieldTypes[this.dataType()];
        values.forEach(value => this.rangeSet.ranges()[index++].value.setValue(value, valueType));
    }
    createStyleSettings(styleListItem) {
        return new AppearanceSettings({ '@AppearanceType': styleListItem });
    }
    _getSortedRanges() {
        return this.rangeSet.ranges();
    }
    _getRangeIndexSettings(index) {
        return null;
    }
}
