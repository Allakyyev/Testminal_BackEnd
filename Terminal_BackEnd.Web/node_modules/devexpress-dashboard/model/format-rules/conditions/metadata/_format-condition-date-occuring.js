/**
* DevExpress Dashboard (_format-condition-date-occuring.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { getFlagsEnumTypeValues, parseFlagsEnumType, serializeFlagsEnumType } from '../../../../data/_common';
import { FilterDateType } from '../../../enums';
import { formatConditionStyleBaseSerializationsInfo } from './_format-condition-style-base';
let parseFilterDateType = (typeModel) => {
    return parseFlagsEnumType(typeModel, FilterDateType.None, FilterDateTypeDictionary);
};
let serializeFilterDateType = (val) => {
    return serializeFlagsEnumType(val, 'None', FilterDateTypeDictionary);
};
let getFilterDateTypeValues = (val) => {
    return getFlagsEnumTypeValues(val, FilterDateTypeDictionary, 'key');
};
let FilterDateTypeDictionary = {
    'BeyondThisYear': FilterDateType.BeyondThisYear,
    'LaterThisYear': FilterDateType.LaterThisYear,
    'LaterThisMonth': FilterDateType.LaterThisMonth,
    'LaterThisWeek': FilterDateType.LaterThisWeek,
    'NextWeek': FilterDateType.NextWeek,
    'Tomorrow': FilterDateType.Tomorrow,
    'Today': FilterDateType.Today,
    'Yesterday': FilterDateType.Yesterday,
    'EarlierThisWeek': FilterDateType.EarlierThisWeek,
    'LastWeek': FilterDateType.LastWeek,
    'EarlierThisMonth': FilterDateType.EarlierThisMonth,
    'EarlierThisYear': FilterDateType.EarlierThisYear,
    'PriorThisYear': FilterDateType.PriorThisYear,
    'Empty': FilterDateType.Empty,
    'Beyond': FilterDateType.Beyond,
    'ThisWeek': FilterDateType.ThisWeek,
    'ThisMonth': FilterDateType.ThisMonth,
    'MonthAfter1': FilterDateType.MonthAfter1,
    'MonthAfter2': FilterDateType.MonthAfter2,
    'MonthAgo1': FilterDateType.MonthAgo1,
    'MonthAgo2': FilterDateType.MonthAgo2,
    'MonthAgo3': FilterDateType.MonthAgo3,
    'MonthAgo4': FilterDateType.MonthAgo4,
    'MonthAgo5': FilterDateType.MonthAgo5,
    'MonthAgo6': FilterDateType.MonthAgo6,
    'Earlier': FilterDateType.Earlier
};
export let baseDateTypeValues = [
    { value: FilterDateType.Yesterday, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday' },
    { value: FilterDateType.Today, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringToday' },
    { value: FilterDateType.Tomorrow, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow' },
    { value: FilterDateType.LastWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek' },
    { value: FilterDateType.ThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek' },
    { value: FilterDateType.NextWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek' },
    { value: FilterDateType.MonthAgo1, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1' },
    { value: FilterDateType.ThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth' },
    { value: FilterDateType.MonthAfter1, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1' }
];
export let extendedDateTypeValues = [
    { value: FilterDateType.BeyondThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear' },
    { value: FilterDateType.LaterThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear' },
    { value: FilterDateType.LaterThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth' },
    { value: FilterDateType.LaterThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek' },
    { value: FilterDateType.EarlierThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek' },
    { value: FilterDateType.EarlierThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth' },
    { value: FilterDateType.EarlierThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear' },
    { value: FilterDateType.PriorThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear' },
    { value: FilterDateType.Empty, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty' },
    { value: FilterDateType.Beyond, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond' },
    { value: FilterDateType.MonthAfter2, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2' },
    { value: FilterDateType.MonthAgo2, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2' },
    { value: FilterDateType.MonthAgo3, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3' },
    { value: FilterDateType.MonthAgo4, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4' },
    { value: FilterDateType.MonthAgo5, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5' },
    { value: FilterDateType.MonthAgo6, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6' },
    { value: FilterDateType.Earlier, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier' }
];
export let dateType = {
    propertyName: 'dateType', modelName: '@DateType', defaultVal: 'Yesterday',
    from: d => ko.observable(parseFilterDateType(d)), toJsonObject: serializeFilterDateType,
};
export let formatConditionDateOccurringSerializationsInfo = formatConditionStyleBaseSerializationsInfo.concat([dateType]);
