/**
* DevExpress Dashboard (format-rules-common.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { ParameterHelper } from '../parameters/_parameters-helper';
import { SerializableModel } from '../serializable-model';
import { complexValueInfo, negativeInfinity } from './metadata/_format-rules-common';
export class ComplexValue extends SerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        if (!this.isEmpty() && !this.isInfinity) {
            this._persistedValue(ParameterHelper.convertSingleValue(this._persistedValue(), this.type()));
        }
        this.addDisposable(this.value = ko.pureComputed({
            read: () => this._persistedValue(),
            write: (val) => {
                if (val === negativeInfinity) {
                    this.type('System.Double');
                }
                this._persistedValue(val);
            }
        }));
    }
    isEmpty() {
        return !this._persistedValue || !this.type || !this.type();
    }
    get isInfinity() {
        return this._persistedValue() == negativeInfinity;
    }
    getInfo() {
        return complexValueInfo;
    }
    setValue(value, type) {
        this.value(value);
        this.type(type);
    }
}
