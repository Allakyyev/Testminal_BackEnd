/**
* DevExpress Dashboard (_dashboard-item-format-rule.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { itemType, parseBool } from '../../metadata/_base-metadata';
import { FormatConditionAverage } from '../conditions/format-condition-average';
import { FormatConditionBar } from '../conditions/format-condition-bar';
import { FormatConditionDateOccurring } from '../conditions/format-condition-date-occuring';
import { FormatConditionExpression } from '../conditions/format-condition-expression';
import { FormatConditionTopBottom } from '../conditions/format-condition-top-bottom';
import { FormatConditionValue } from '../conditions/format-condition-value';
import { FormatConditionColorRangeBar } from '../conditions/range/format-condition-range-color-bar';
import { FormatConditionRangeGradient } from '../conditions/range/format-condition-range-gradient';
import { FormatConditionGradientRangeBar } from '../conditions/range/format-condition-range-gradient-bar';
import { FormatConditionRangeSet } from '../conditions/range/format-condition-range-set';
export let formatRuleName = {
    propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor'
};
export let classCaption = {
    propertyName: '_classCaption', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor'
};
export let enabled = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'DashboardWebStringId.TopNEnabled', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: parseBool };
export let conditionTypes = [
    { propertyName: 'conditionValue', displayName: 'DashboardStringId.CommandFormatRuleValue', modelName: 'FormatConditionValue', type: FormatConditionValue },
    { propertyName: 'conditionTopBottom', displayName: 'DashboardStringId.CommandFormatRuleTopBottom', modelName: 'FormatConditionTopBottom', type: FormatConditionTopBottom },
    { propertyName: 'conditionAverage', displayName: 'DashboardStringId.CommandFormatRuleAboveBelowAverage', modelName: 'FormatConditionAverage', type: FormatConditionAverage },
    { propertyName: 'conditionDateOccuring', displayName: 'DashboardStringId.CommandFormatRuleDateOccurring', modelName: 'FormatConditionDateOccurring', type: FormatConditionDateOccurring },
    { propertyName: 'conditionExpression', displayName: 'DashboardStringId.CommandFormatRuleExpression', modelName: 'FormatConditionExpression', type: FormatConditionExpression },
    { propertyName: 'conditionBar', displayName: 'DashboardStringId.CommandFormatRuleBar', modelName: 'FormatConditionBar', type: FormatConditionBar },
    { propertyName: 'conditionColorRangeBar', displayName: 'DashboardStringId.CommandFormatRuleColorRangeBar', modelName: 'FormatConditionColorRangeBar', type: FormatConditionColorRangeBar },
    { propertyName: 'conditionGradientRangeBar', displayName: 'DashboardWebStringId.ConditionalFormatting.GradientRangeBar', modelName: 'FormatConditionGradientRangeBar', type: FormatConditionGradientRangeBar },
    { propertyName: 'conditionRangeGradient', displayName: 'DashboardWebStringId.ConditionalFormatting.RangeGradient', modelName: 'FormatConditionRangeGradient', type: FormatConditionRangeGradient },
    { propertyName: 'conditionRangeSet', displayName: 'DashboardStringId.CommandFormatRuleRangeSet', modelName: 'FormatConditionRangeSet', type: FormatConditionRangeSet }
];
export let condition = { propertyName: 'condition' };
export let dashboardItemFormatRuleSerializationsInfo = [itemType, formatRuleName, enabled, condition].concat(conditionTypes);
