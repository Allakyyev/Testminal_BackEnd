/**
* DevExpress Dashboard (dashboard-layout-tab-page.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import { DashboardLayoutGroup } from './dashboard-layout-group';
import { _layoutItemTypeMap } from './_layout-utils';
export class DashboardLayoutTabPage extends DashboardLayoutGroup {
    get _template() { return 'dx-layout-group-container'; }
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
    }
    _getDefaultItemType() { return 'LayoutTabPage'; }
    _deleteDashbordItem() {
        super._deleteDashbordItem();
        this.childNodes()
            .filter(item => item instanceof DashboardLayoutGroup)
            .forEach(group => group.dashboardItem() && group._deleteDashbordItem());
        var tabContainer = this.parentNode().item;
        let page = this.item;
        let deletedPageIndex = tabContainer.tabPages().indexOf(page);
        if (tabContainer._activeTabPage() === page) {
            let newIndex = deletedPageIndex === tabContainer.tabPages().length - 1 && tabContainer.tabPages().length > 1 ? deletedPageIndex - 1 : deletedPageIndex;
            tabContainer.tabPages.remove(page);
            tabContainer._activeTabPage(tabContainer.tabPages()[newIndex]);
        }
        else {
            tabContainer.tabPages.remove(page);
        }
    }
}
_layoutItemTypeMap['LayoutTabPage'] = DashboardLayoutTabPage;
