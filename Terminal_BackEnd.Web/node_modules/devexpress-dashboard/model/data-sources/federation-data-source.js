/**
* DevExpress Dashboard (federation-data-source.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { deserializeArray, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { SerializableModel } from '../serializable-model';
import { DataSource } from './data-source';
import { contextItemSerializationsInfo, federationDataSourceSerializationsInfo, queryNodeSerializationsInfo, sourceSerializationsInfo } from './metadata/_federation-data-source';
import { _baseDataSourceTypesMap } from './_data-source-factory-base';
export class FederationDataSource extends DataSource {
    constructor(dataSourceJSON = {}, serializer = new ModelSerializer()) {
        super(dataSourceJSON, serializer);
        this.queries = deserializeArray(dataSourceJSON.Queries, json => new QueryNode(json, serializer));
        this.context = deserializeArray(dataSourceJSON.Context, json => new ContextItem(json, serializer));
        this.sources = deserializeArray(dataSourceJSON.Sources, json => new Source(json, serializer));
        this.hasCalculatedFields = true;
        this.supportDataMembers = true;
    }
    get _isFederationDataProvider() {
        return true;
    }
    getInfo() {
        return federationDataSourceSerializationsInfo;
    }
    getDisplayNamePrefix() {
        return 'DashboardStringId.DefaultFederationDataSourceName';
    }
    _getDefaultItemType() {
        return 'FederationDataSource';
    }
}
export class QueryNode extends SerializableModel {
    constructor(json = {}, serializer = new ModelSerializer()) {
        super(json, serializer);
    }
    get queryType() { return this._queryType(); }
    getInfo() {
        return queryNodeSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'QueryNode';
    }
}
export class ContextItem extends SerializableModel {
    constructor(json = {}, serializer = new ModelSerializer()) {
        super(json, serializer);
        this.source = ko.observable(null);
        for (let key in _baseDataSourceTypesMap) {
            var dataSourceJson = json[key];
            if (dataSourceJson !== undefined) {
                this.source(new _baseDataSourceTypesMap[key](dataSourceJson || {}));
                break;
            }
        }
    }
    getInfo() {
        return contextItemSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'ContextItem';
    }
}
export class Source extends SerializableModel {
    constructor(json = {}, serializer = new ModelSerializer()) {
        super(json, serializer);
    }
    getInfo() {
        return sourceSerializationsInfo;
    }
    _getDefaultItemType() {
        return 'Source';
    }
}
