/**
* DevExpress Dashboard (calculation.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { isEmptyObject } from '@devexpress/analytics-core/analytics-internal';
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { SerializableModel } from '../../serializable-model';
import { calculationsTypesMap } from './measure-calculation';
import { calculationSerializationsInfo } from './metadata/_calculation';
export let _currentCalculationInfo = (model) => {
    if (!model.calculationType)
        return [];
    return [{
            propertyName: 'calculation',
            modelName: model.calculationType() || 'FakeCalculationForModelSubscriber',
            from: (json, serializer) => { return new calculationsTypesMap[model.calculationType()](json, serializer); },
            toJsonObject: (value, serializer, refs) => {
                var result = serializer.serialize(value, null, refs);
                if (isEmptyObject(result)) {
                    return null;
                }
                return result;
            }
        }];
};
export class Calculation extends SerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.calculationType = ko.observable();
        this.calculation = ko.observable();
        this.calculationType(Object.keys(calculationsTypesMap).filter(mapItem => !!modelJson && modelJson[mapItem] !== undefined)[0]);
        if (!!this.calculationType()) {
            this.calculation(new (calculationsTypesMap[this.calculationType()])((modelJson || {})[this.calculationType()]));
            delete this['_model'][this.calculationType()];
        }
        this.addDisposable(this.calculation.subscribe(calculation => {
            this.calculationType(Object.keys(calculationsTypesMap).filter(mapItem => calculation instanceof calculationsTypesMap[mapItem])[0]);
        }));
    }
    getInfo() {
        return calculationSerializationsInfo.concat(_currentCalculationInfo(this));
    }
    isEmpty() {
        return !this.calculation();
    }
}
