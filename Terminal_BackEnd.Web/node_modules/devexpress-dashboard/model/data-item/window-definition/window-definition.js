/**
* DevExpress Dashboard (window-definition.js)
* Version:  23.2.7
* Build date: Jun 25, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { isEmptyObject } from '@devexpress/analytics-core/analytics-internal';
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { SerializableModel } from '../../serializable-model';
import { windowDefinitionsTypesMap } from './measure-calc-window-definition';
import { windowDefinitionSerializationsInfo } from './metadata/_window-definition';
var currentwindowDefinitionInfo = (model) => {
    if (!model.windowDefinitionType)
        return [];
    return [{
            propertyName: 'windowDefinition',
            modelName: model.windowDefinitionType() || 'FakeWindowDefinitionForModelSubscriber',
            from: (json, serializer) => { return new windowDefinitionsTypesMap[model.windowDefinitionType()](json, serializer); },
            toJsonObject: (value, serializer, refs) => {
                var result = serializer.serialize(value, null, refs);
                if (isEmptyObject(result)) {
                    return null;
                }
                return result;
            }
        }];
};
export class WindowDefinition extends SerializableModel {
    constructor(modelJson = {}, serializer = new ModelSerializer()) {
        super(modelJson, serializer);
        this.windowDefinitionType = ko.observable();
        this.windowDefinition = ko.observable();
        this.windowDefinitionType(Object.keys(windowDefinitionsTypesMap).filter(mapItem => !!modelJson && modelJson[mapItem] !== undefined)[0]);
        if (!!this.windowDefinitionType()) {
            let type = windowDefinitionsTypesMap[this.windowDefinitionType()];
            this.windowDefinition(new type((modelJson || {})[this.windowDefinitionType()]));
            delete this['_model'][this.windowDefinitionType()];
        }
        this.addDisposable(this.windowDefinition.subscribe(windowDefinition => {
            this.windowDefinitionType(Object.keys(windowDefinitionsTypesMap).filter(mapItem => windowDefinition instanceof windowDefinitionsTypesMap[mapItem])[0]);
        }));
    }
    getInfo() {
        return windowDefinitionSerializationsInfo.concat(currentwindowDefinitionInfo(this));
    }
    equals(def) {
        return (this.isEmpty() && def.isEmpty()) || this.windowDefinition().equals(def.windowDefinition());
    }
    isEmpty() {
        return !this.windowDefinition();
    }
}
