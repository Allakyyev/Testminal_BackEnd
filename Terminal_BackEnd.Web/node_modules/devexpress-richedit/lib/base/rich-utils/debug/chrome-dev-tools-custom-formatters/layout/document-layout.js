import { DocumentLayout } from '../../../../../core/layout/document-layout';
import { ColorHelper } from '../../../../../core/model/color/color';
import { Pair } from '@devexpress/utils/lib/class/pair';
import { BaseFormatter, StdProps } from '../base-formatter';
import { DivElement } from '../elements';
export class CCF_DocumentLayout extends BaseFormatter {
    isHandleObject(obj) {
        return obj instanceof DocumentLayout;
    }
    getShortDescription(_config) {
        return this.stdShow(new StdProps([
            new Pair("", this.curr.isFullyFormatted ? "FullFormatted" : "NotFullFormatted"),
            new Pair("validPages", this.curr.validPageCount),
            new Pair("phisicalPages", this.curr.pages.length),
            new Pair("anchorObjectsPositionInfo", this.curr.anchorObjectsPositionInfo),
        ]).showAsLine());
    }
    availableFullDescription(_config) {
        return true;
    }
    getFullDescription(_config) {
        return this.stdShow(new StdProps(this.getList(true)).showAsColumn());
    }
    getList(placePagesInfo) {
        const list = [new Pair("isFullyFormatted", this.curr.isFullyFormatted),
            new Pair("validPages", this.curr.validPageCount),
            new Pair("existingPages", this.curr.pages.length),
            new Pair("lastMaxNumPages", this.curr.lastMaxNumPages),
            new Pair("pagesColor", new DivElement().setStyle(`display: inline-block`)
                .setText(`${ColorHelper.getCssString(this.curr.pageColor, false)} (${this.curr.pageColor}) `)
                .setNode(BaseFormatter.getColorBoxNode(this.curr.pageColor))),
            new Pair("anchorObjectsPositionInfo", this.curr.anchorObjectsPositionInfo)];
        if (placePagesInfo)
            list.push(new Pair("pages", this.curr.pages));
        return list;
    }
}
CCF_DocumentLayout._foo = BaseFormatter.addToFormattersList(new CCF_DocumentLayout());
