import { LogSource } from '../../../../../core/rich-utils/debug/logger/base-logger/log-source';
import { LogSourceParamsFuncHandler } from '../../../../../core/rich-utils/debug/logger/base-logger/log-source-params-func-handler';
import { ModelParamsHolder } from '../../../../../core/rich-utils/debug/logger/base-logger/model-params-holder';
import { DomUtils } from '@devexpress/utils/lib/utils/dom';
import { ListUtils } from '@devexpress/utils/lib/utils/list';
import { NumberMapUtils } from '@devexpress/utils/lib/utils/map/number';
import { DiplayTableBoundsInfoSourceParam } from './diplay-table-bounds-info-source-param';
export class LayoutParamsHolder extends ModelParamsHolder {
    constructor() {
        super();
        this.listOfCustomBounds = {};
        if (!this.visualizerManager)
            this.visualizerManager = null;
    }
    handle(logSourceKey) {
        switch (logSourceKey) {
            case LogSource.DiplayPageInfo:
                this.logSourceParams[logSourceKey] = new LogSourceParamsFuncHandler(false, logSourceKey);
                break;
            case LogSource.DiplayTableBoundsInfo:
                this.logSourceParams[logSourceKey] = new DiplayTableBoundsInfoSourceParam(false, logSourceKey);
                break;
            default: super.handle(logSourceKey);
        }
    }
    clearCustomBounds(pageIndex = -1) {
        if (pageIndex == -1) {
            NumberMapUtils.forEach(this.listOfCustomBounds, (pageList) => ListUtils.forEach(pageList, (elem) => DomUtils.hideNode(elem)));
            this.listOfCustomBounds = {};
        }
        else {
            const pageList = this.listOfCustomBounds[pageIndex];
            if (pageList) {
                ListUtils.forEach(pageList, (elem) => DomUtils.hideNode(elem));
            }
            delete this.listOfCustomBounds[pageIndex];
        }
    }
}
