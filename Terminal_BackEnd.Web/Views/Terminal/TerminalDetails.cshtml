@model Terminal_BackEnd.Infrastructure.Entities.Terminal
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@inject IHtmlLocalizer<SharedResource> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["Transaction Details"];
}
<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@SharedLocalizer["Информация о Терминале"]: <strong>ID @Model.Id</strong></h5>
                   
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@SharedLocalizer["Текущие Транзакции"]</h5>
                    <div id="gridContainer">
                    </div>
                </div>
            </div>
        </div>
    </div>
     <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@SharedLocalizer["Инкассации"]</h5>
                    <div id="gridEnchargements">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@SharedLocalizer["Логи от Терминала"]</h5>
                    <div id="gridTerminalLogs">
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts {
    <script>
        performActionAndRedirect("Terminal");
        $(function () {
            let url = window.location.origin + '/' + 'api/TransactionsAPI/Terminal/' + @(Model.Id);
            var returnUrl = '@Context.Request.Path@Context.Request.QueryString';
            $("#gridContainer").dxDataGrid({
                dataSource: DevExpress.data.AspNet.createStore({
                    key: "id",
                    loadUrl: url,
                    insertUrl: url,
                    updateUrl: url,
                    deleteUrl: url,
                    onBeforeSend: function (method, ajaxOptions) {
                        ajaxOptions.xhrFields = { withCredentials: true };
                    }
                }),
                onExporting: function (e) {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    DevExpress.excelExporter.exportDataGrid({
                        worksheet: worksheet,
                        component: e.component,
                        customizeCell: function (options) {
                            options.excelCell.font = { name: 'Arial', size: 12 };
                            options.excelCell.alignment = { horizontal: 'left' };
                        }
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');
                        });
                    });
                },
                onInitNewRow: function (e) {
                    var url = `@Url.Action("Create", "Terminal")`;
                    window.location = url;
                },
                selection: {
                    mode: "multiple"
                },
                allowColumnReordering: true,
                allowColumnResizing: true,
                "export": {
                    enabled: true,
                    fileName: "Documents",
                    allowExportSelectedData: true
                },
                filterPanel: {
                    visible: false
                },
                filterRow: { visible: false },
                remoteOperations: true,                
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 50],
                    showNavigationButtons: true
                },
                editing: {
                    useIcons: true,
                    allowUpdating: false,
                    allowDeleting: false,
                    allowAdding: false
                },
                headerFilter: {
                    visible: true
                },
                wordWrapEnabled: true,
                showColumnLines: true,
                showRowLines: true,
                rowAlternationEnabled: true,
                showBorders: true,
                searchPanel: {
                    visible: true
                },                

                columns: [
                    {
                        caption: '@SharedLocalizer["Id транзакции"]',
                        dataField: "id",
                        allowHeaderFiltering: true
                    },
                    {
                        caption: '@SharedLocalizer["Телефон"]',
                        dataField: "msisdn",
                        allowHeaderFiltering: true
                    },
                    {
                        caption: '@SharedLocalizer["Сумма(TMT)"]',
                        dataField: "amount",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Дата транзакции"]',
                        dataField: "transactionDate",
                        dataType: 'datetime',
                        format: "dd/MM/yyyy HH:mm",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["RefNum"]',
                        dataField: "refNum",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Статус"]',
                        dataField: "status",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Состояние"]',
                        dataField: "state",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Причина"]',
                        dataField: "reason",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Id терминала"]',
                        dataField: "terminalId",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Имя терминала"]',
                        dataField: "termianlName",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Дилер"]',
                        dataField: "ownerName",
                        allowHeaderFiltering: true,
                    },
                    {
                        type: "buttons",
                        width: 110,
                        buttons: [
                            {
                                hint: '@SharedLocalizer["Детали"]',
                                icon: "info",
                                onClick: function (e) {
                                    var idString = e.row.data.id;
                                    var url = `@Url.Action("TransactionDetails", "Transaction")`;
                                    window.location = url + '?id=' + idString;
                                }
                            }
                        ]
                    }
                ],
                summary: {
                      totalItems: [
                        {
                            column: 'amount',
                            summaryType: 'sum',
                            customizeText(itemInfo) {
                                return `Сумма: ${itemInfo.value} man.`;
                            }
                        }
                      ]
                }
            });

            let enchUrl = window.location.origin + '/' + 'api/TransactionsAPI/TerminalEnchargements/' + @(Model.Id);
                        $("#gridEnchargements").dxDataGrid({
                dataSource: DevExpress.data.AspNet.createStore({
                    key: "id",
                    loadUrl: enchUrl,
                    insertUrl: enchUrl,
                    updateUrl: enchUrl,
                    deleteUrl: enchUrl,
                    onBeforeSend: function (method, ajaxOptions) {
                        ajaxOptions.xhrFields = { withCredentials: true };
                    }
                }),
                onExporting: function (e) {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    DevExpress.excelExporter.exportDataGrid({
                        worksheet: worksheet,
                        component: e.component,
                        customizeCell: function (options) {
                            options.excelCell.font = { name: 'Arial', size: 12 };
                            options.excelCell.alignment = { horizontal: 'left' };
                        }
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');
                        });
                    });
                },                
                allowColumnReordering: true,
                "export": {
                    enabled: true,
                    fileName: "Documents",
                    allowExportSelectedData: true
                },
                filterPanel: {
                    visible: false
                },
                filterRow: { visible: false },
                remoteOperations: true,
                allowColumnResizing: true,
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 50],
                    showNavigationButtons: true
                },
                onInitNewRow: function (e) {
                    var url = `@Url.Action("Create", "Encashments")`;
                    window.location = url;
                },
                editing: {
                    useIcons: true,
                    allowUpdating: false,
                    allowDeleting: false,
                    allowAdding: @(User.Identity != null && User.Identity.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Cashier")) ? "true" : "false")
                },
                headerFilter: {
                    visible: true
                },
                wordWrapEnabled: true,
                showColumnLines: true,
                showRowLines: true,
                rowAlternationEnabled: false,
                showBorders: true,
                searchPanel: {
                    visible: true
                },

                stateStoring: {
                    enabled: true,
                    type: "localStorage",
                    storageKey: "EnchashmentIndex"
                },
                onRowPrepared: function (e) {
                    if (e.rowType === "data") {
                        if (e.data.status === 1) {
                            e.rowElement.css("background-color", "#9ecd9e");
                        }else if (e.data.balanceDifference !== 0) {
                            e.rowElement.css("background-color", "#e8aaaa");
                        }
                    }
                },
                columns: [
                    {
                        caption: '@SharedLocalizer["ID инкассации"]',
                        dataField: "id",
                        allowHeaderFiltering: true
                    },
                    {
                        caption: '@SharedLocalizer["Дата инкассации"]',
                        dataField: "encashmentDate",
                        dataType: 'datetime',
                        format: "dd/MM/yyyy HH:mm", // Optional: Customize the format
                        allowHeaderFiltering: true
                    },
                    {
                        caption: '@SharedLocalizer["Сумма успешных переводов(TMT)"]',
                        dataField: "encashmentSum",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Сумма в терминале(TMT)"]',
                        dataField: "encashmentSumFromTerminal",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Разница (TMT)"]',
                        dataField: "balanceDifference",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Статус"]',
                        dataField: "status",
                        allowHeaderFiltering: true,
                        calculateCellValue: function (data) {
                            return data.status === 0 ? "Открыт" : "Закрыт";
                        }
                    },
                    {
                        caption: '@SharedLocalizer["Имя терминала"]',
                        dataField: "terminalName",
                        allowHeaderFiltering: true,
                    },
                    {
                        caption: '@SharedLocalizer["Дилер"]',
                        dataField: "terminalOwner",
                        allowHeaderFiltering: true,
                    },

                    {
                        type: "buttons",
                        width: 110,
                        buttons: [
                            {
                                hint: '@SharedLocalizer["Детальнее"]',
                                icon: "info",
                                onClick: function (e) {
                                    var idString = e.row.data.id;
                                    var url = `@Url.Action("EncashmentDetails", "Encashments")`;
                                    window.location = url + '?id=' + idString;
                                },
                                visible: @(User.Identity != null && User.Identity.IsAuthenticated && User.IsInRole("Cashier") ? "true" : "false")
                            }
                        ]
                    }
                ],
                summary: {
                      totalItems: [
                        {
                            column: 'encashmentSum',
                            summaryType: 'sum',
                            customizeText(itemInfo) {
                                return `Всего продаж: ${itemInfo.value} man.`;
                            }
                        },
                        {
                            column: 'encashmentSumFromTerminal',
                            summaryType: 'sum',
                            customizeText(itemInfo) {
                                return `Всего накоплено: ${itemInfo.value} man.`;
                            }
                        },
                        {
                            column: 'balanceDifference',
                            summaryType: 'sum',
                            customizeText(itemInfo) {
                                return `Всего разниц: ${itemInfo.value} man.`;
                            }
                        }
                      ]
                }
            });
            let logUrl = window.location.origin + '/' + 'api/TerminalAPI/Logs/' + @(Model.Id);
            $("#gridTerminalLogs").dxDataGrid({
                dataSource: DevExpress.data.AspNet.createStore({
                    key: "id",
                    loadUrl: logUrl,
                    insertUrl: logUrl,
                    updateUrl: logUrl,
                    deleteUrl: logUrl,
                    onBeforeSend: function (method, ajaxOptions) {
                        ajaxOptions.xhrFields = { withCredentials: true };
                    }
                }),
                onExporting: function (e) {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    DevExpress.excelExporter.exportDataGrid({
                        worksheet: worksheet,
                        component: e.component,
                        customizeCell: function (options) {
                            options.excelCell.font = { name: 'Arial', size: 12 };
                            options.excelCell.alignment = { horizontal: 'left' };
                        }
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');
                        });
                    });
                },                
                selection: {
                    mode: "multiple"
                },
                allowColumnReordering: true,
                allowColumnResizing: true,
                "export": {
                    enabled: true,
                    fileName: "Documents",
                    allowExportSelectedData: true
                },
                filterPanel: {
                    visible: false
                },
                filterRow: { visible: false },
                remoteOperations: true,
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 50],
                    showNavigationButtons: true
                },
                editing: {
                    useIcons: true,
                    allowUpdating: false,
                    allowDeleting: false,
                    allowAdding: false
                },
                headerFilter: {
                    visible: true
                },
                wordWrapEnabled: true,
                showColumnLines: true,
                showRowLines: true,
                rowAlternationEnabled: true,
                showBorders: true,
                searchPanel: {
                    visible: true
                },
                columns: [
                    {
                        caption: '@SharedLocalizer["Дата"]',
                        dataField: "logDate",
                        dataType: 'datetime',
                        format: "dd/MM/yyyy HH:mm",
                        allowHeaderFiltering: true
                    },
                    {
                        caption: '@SharedLocalizer["Лог Инфо"]',
                        dataField: "logInfo",                        
                        allowHeaderFiltering: true
                    },
                    {
                        caption: '@SharedLocalizer["Статус лога"]',
                        dataField: "status",
                        allowHeaderFiltering: true,
                    }                   
                ]
            });
        });
    </script>
}

